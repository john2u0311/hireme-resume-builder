{"ast":null,"code":"import { upperFirst, capitalize, parseFloat as parseFloat$1, without, pick, compose, evolve, mapValues, matchPercent, castArray, isNil, omit, asyncCompose } from '@react-pdf/fns';\nimport * as P from '@react-pdf/primitives';\nimport resolveStyle, { transformColor, flatten } from '@react-pdf/stylesheet';\nimport layoutEngine, { fontSubstitution, wordHyphenation, scriptItemizer, textDecoration, justification, linebreaker, bidi, fromFragments } from '@react-pdf/textkit';\nimport * as Yoga from 'yoga-layout/load';\nimport { loadYoga as loadYoga$1 } from 'yoga-layout/load';\nimport emojiRegex from 'emoji-regex';\nimport resolveImage from '@react-pdf/image';\n\n/**\n * Apply transformation to text string\n *\n * @param {string} text\n * @param {string} transformation type\n * @returns {string} transformed text\n */\nconst transformText = (text, transformation) => {\n  switch (transformation) {\n    case 'uppercase':\n      return text.toUpperCase();\n    case 'lowercase':\n      return text.toLowerCase();\n    case 'capitalize':\n      return capitalize(text);\n    case 'upperfirst':\n      return upperFirst(text);\n    default:\n      return text;\n  }\n};\nconst isTspan = node => node.type === P.Tspan;\nconst isTextInstance$4 = node => node.type === P.TextInstance;\nconst engines$1 = {\n  bidi,\n  linebreaker,\n  justification,\n  textDecoration,\n  scriptItemizer,\n  wordHyphenation,\n  fontSubstitution\n};\nconst engine$1 = layoutEngine(engines$1);\nconst getFragments$1 = (fontStore, instance) => {\n  if (!instance) return [{\n    string: ''\n  }];\n  const fragments = [];\n  const {\n    fill = 'black',\n    fontFamily = 'Helvetica',\n    fontWeight,\n    fontStyle,\n    fontSize = 18,\n    textDecorationColor,\n    textDecorationStyle,\n    textTransform,\n    opacity\n  } = instance.props;\n  const _textDecoration = instance.props.textDecoration;\n  const fontFamilies = typeof fontFamily === 'string' ? [fontFamily] : [...(fontFamily || [])];\n  // Fallback font\n  fontFamilies.push('Helvetica');\n  const font = fontFamilies.map(fontFamilyName => {\n    const opts = {\n      fontFamily: fontFamilyName,\n      fontWeight,\n      fontStyle\n    };\n    const obj = fontStore.getFont(opts);\n    return obj?.data;\n  });\n  const attributes = {\n    font,\n    opacity,\n    fontSize,\n    color: fill,\n    underlineStyle: textDecorationStyle,\n    underline: _textDecoration === 'underline' || _textDecoration === 'underline line-through' || _textDecoration === 'line-through underline',\n    underlineColor: textDecorationColor || fill,\n    strike: _textDecoration === 'line-through' || _textDecoration === 'underline line-through' || _textDecoration === 'line-through underline',\n    strikeStyle: textDecorationStyle,\n    strikeColor: textDecorationColor || fill\n  };\n  for (let i = 0; i < instance.children.length; i += 1) {\n    const child = instance.children[i];\n    if (isTextInstance$4(child)) {\n      fragments.push({\n        string: transformText(child.value, textTransform),\n        attributes\n      });\n    } else if (child) {\n      fragments.push(...getFragments$1(fontStore, child));\n    }\n  }\n  return fragments;\n};\nconst getAttributedString$1 = (fontStore, instance) => fromFragments(getFragments$1(fontStore, instance));\nconst AlmostInfinity = 999999999999;\nconst shrinkWhitespaceFactor = {\n  before: -0.5,\n  after: -0.5\n};\nconst layoutTspan = fontStore => (node, xOffset) => {\n  const attributedString = getAttributedString$1(fontStore, node);\n  const x = node.props.x === undefined ? xOffset : node.props.x;\n  const y = node.props?.y || 0;\n  const container = {\n    x,\n    y,\n    width: AlmostInfinity,\n    height: AlmostInfinity\n  };\n  const hyphenationCallback = node.props.hyphenationCallback || fontStore?.getHyphenationCallback() || null;\n  const layoutOptions = {\n    hyphenationCallback,\n    shrinkWhitespaceFactor\n  };\n  const lines = engine$1(attributedString, container, layoutOptions).flat();\n  return Object.assign({}, node, {\n    lines\n  });\n};\n// Consecutive TSpan elements should be joined with a space\nconst joinTSpanLines = node => {\n  const children = node.children.map((child, index) => {\n    if (!isTspan(child)) return child;\n    const textInstance = child.children[0];\n    if (child.props.x === undefined && index < node.children.length - 1 && textInstance?.value) {\n      return Object.assign({}, child, {\n        children: [{\n          ...textInstance,\n          value: `${textInstance.value} `\n        }]\n      });\n    }\n    return child;\n  }, []);\n  return Object.assign({}, node, {\n    children\n  });\n};\nconst layoutText$1 = (fontStore, node) => {\n  if (!node.children) return node;\n  let currentXOffset = node.props?.x || 0;\n  const layoutFn = layoutTspan(fontStore);\n  const joinedNode = joinTSpanLines(node);\n  const children = joinedNode.children.map(child => {\n    const childWithLayout = layoutFn(child, currentXOffset);\n    currentXOffset += childWithLayout.lines[0].xAdvance;\n    return childWithLayout;\n  });\n  return Object.assign({}, node, {\n    children\n  });\n};\nconst isDefs = node => node.type === P.Defs;\nconst getDefs = node => {\n  const children = node.children || [];\n  const defs = children.find(isDefs);\n  const values = defs?.children || [];\n  return values.reduce((acc, value) => {\n    const id = value.props?.id;\n    if (id) acc[id] = value;\n    return acc;\n  }, {});\n};\nconst isNotDefs = node => node.type !== P.Defs;\nconst detachDefs = node => {\n  if (!node.children) return node;\n  const children = node.children.filter(isNotDefs);\n  return Object.assign({}, node, {\n    children\n  });\n};\nconst URL_REGEX = /url\\(['\"]?#([^'\"]+)['\"]?\\)/;\nconst replaceDef = (defs, value) => {\n  if (!value) return undefined;\n  if (!URL_REGEX.test(value)) return value;\n  const match = value.match(URL_REGEX);\n  return defs[match[1]];\n};\nconst parseNodeDefs = defs => node => {\n  const props = node.props;\n  const fill = `fill` in props ? replaceDef(defs, props?.fill) : undefined;\n  const clipPath = `clipPath` in props ? replaceDef(defs, props?.clipPath) : undefined;\n  const newProps = Object.assign({}, node.props, {\n    fill,\n    clipPath\n  });\n  const children = node.children ? node.children.map(parseNodeDefs(defs)) : undefined;\n  return Object.assign({}, node, {\n    props: newProps,\n    children\n  });\n};\nconst parseDefs = root => {\n  if (!root.children) return root;\n  const defs = getDefs(root);\n  const children = root.children.map(parseNodeDefs(defs));\n  return Object.assign({}, root, {\n    children\n  });\n};\nconst replaceDefs = node => {\n  return detachDefs(parseDefs(node));\n};\nconst parseViewbox = value => {\n  if (!value) return null;\n  if (typeof value !== 'string') return value;\n  const values = value.split(/[,\\s]+/).map(parseFloat$1);\n  if (values.length !== 4) return null;\n  return {\n    minX: values[0],\n    minY: values[1],\n    maxX: values[2],\n    maxY: values[3]\n  };\n};\nconst getContainer$1 = node => {\n  const viewbox = parseViewbox(node.props.viewBox);\n  if (viewbox) {\n    return {\n      width: viewbox.maxX,\n      height: viewbox.maxY\n    };\n  }\n  if (node.props.width && node.props.height) {\n    return {\n      width: parseFloat$1(node.props.width),\n      height: parseFloat$1(node.props.height)\n    };\n  }\n  return {\n    width: 0,\n    height: 0\n  };\n};\nconst BASE_SVG_INHERITED_PROPS = ['x', 'y', 'clipPath', 'clipRule', 'opacity', 'fill', 'fillOpacity', 'fillRule', 'stroke', 'strokeLinecap', 'strokeLinejoin', 'strokeOpacity', 'strokeWidth', 'textAnchor', 'dominantBaseline', 'color', 'fontFamily', 'fontSize', 'fontStyle', 'fontWeight', 'letterSpacing', 'opacity', 'textDecoration', 'lineHeight', 'textAlign', 'visibility', 'wordSpacing'];\n// Do not inherit \"x\" for <tspan> elements from <text> parent\nconst TEXT_SVG_INHERITED_PROPS = without(['x'], BASE_SVG_INHERITED_PROPS);\nconst SVG_INHERITED_PROPS = {\n  [P.Text]: TEXT_SVG_INHERITED_PROPS\n};\nconst getInheritProps = node => {\n  const props = node.props || {};\n  const svgInheritedProps = SVG_INHERITED_PROPS[node.type] ?? BASE_SVG_INHERITED_PROPS;\n  return pick(svgInheritedProps, props);\n};\nconst inheritProps = node => {\n  if (!node.children) return node;\n  const inheritedProps = getInheritProps(node);\n  const children = node.children.map(child => {\n    const props = Object.assign({}, inheritedProps, child.props || {});\n    const newChild = Object.assign({}, child, {\n      props\n    });\n    return inheritProps(newChild);\n  });\n  return Object.assign({}, node, {\n    children\n  });\n};\nconst parseAspectRatio = value => {\n  if (typeof value !== 'string') return value;\n  const match = value.replace(/[\\s\\r\\t\\n]+/gm, ' ').replace(/^defer\\s/, '').split(' ');\n  const align = match[0] || 'xMidYMid';\n  const meetOrSlice = match[1] || 'meet';\n  return {\n    align,\n    meetOrSlice\n  };\n};\nconst STYLE_PROPS = ['width', 'height', 'color', 'stroke', 'strokeWidth', 'opacity', 'fillOpacity', 'strokeOpacity', 'fill', 'fillRule', 'clipPath', 'offset', 'transform', 'strokeLinejoin', 'strokeLinecap', 'strokeDasharray', 'gradientUnits', 'gradientTransform'];\nconst VERTICAL_PROPS = ['y', 'y1', 'y2', 'height', 'cy', 'ry'];\nconst HORIZONTAL_PROPS = ['x', 'x1', 'x2', 'width', 'cx', 'rx'];\nconst isSvg$3 = node => node.type === P.Svg;\nconst isText$5 = node => node.type === P.Text;\nconst isTextInstance$3 = node => node.type === P.TextInstance;\nconst transformPercent = container => props => mapValues(props, (value, key) => {\n  const match = matchPercent(value);\n  if (match && VERTICAL_PROPS.includes(key)) {\n    return match.percent * container.height;\n  }\n  if (match && HORIZONTAL_PROPS.includes(key)) {\n    return match.percent * container.width;\n  }\n  return value;\n});\nconst parsePercent = value => {\n  const match = matchPercent(value);\n  return match ? match.percent : parseFloat$1(value);\n};\nconst parseTransform = container => value => {\n  return resolveStyle(container, {\n    transform: value\n  }).transform;\n};\nconst parseProps = container => node => {\n  let props = transformPercent(container)(node.props);\n  props = evolve({\n    x: parseFloat$1,\n    x1: parseFloat$1,\n    x2: parseFloat$1,\n    y: parseFloat$1,\n    y1: parseFloat$1,\n    y2: parseFloat$1,\n    r: parseFloat$1,\n    rx: parseFloat$1,\n    ry: parseFloat$1,\n    cx: parseFloat$1,\n    cy: parseFloat$1,\n    width: parseFloat$1,\n    height: parseFloat$1,\n    offset: parsePercent,\n    fill: transformColor,\n    opacity: parsePercent,\n    stroke: transformColor,\n    stopOpacity: parsePercent,\n    stopColor: transformColor,\n    transform: parseTransform(container),\n    gradientTransform: parseTransform(container)\n  }, props);\n  return Object.assign({}, node, {\n    props\n  });\n};\nconst mergeStyles$1 = node => {\n  const style = node.style || {};\n  const props = Object.assign({}, style, node.props);\n  return Object.assign({}, node, {\n    props\n  });\n};\nconst removeNoneValues = node => {\n  const removeNone = value => value === 'none' ? null : value;\n  const props = mapValues(node.props, removeNone);\n  return Object.assign({}, node, {\n    props\n  });\n};\nconst pickStyleProps = node => {\n  const props = node.props || {};\n  const styleProps = pick(STYLE_PROPS, props);\n  const style = Object.assign({}, styleProps, node.style || {});\n  return Object.assign({}, node, {\n    style\n  });\n};\nconst parseSvgProps = node => {\n  const props = evolve({\n    width: parseFloat$1,\n    height: parseFloat$1,\n    viewBox: parseViewbox,\n    preserveAspectRatio: parseAspectRatio\n  }, node.props);\n  return Object.assign({}, node, {\n    props\n  });\n};\nconst wrapBetweenTspan = node => ({\n  type: P.Tspan,\n  props: {},\n  style: {},\n  children: [node]\n});\nconst addMissingTspan = node => {\n  if (!isText$5(node)) return node;\n  if (!node.children) return node;\n  const resolveChild = child => isTextInstance$3(child) ? wrapBetweenTspan(child) : child;\n  const children = node.children.map(resolveChild);\n  return Object.assign({}, node, {\n    children\n  });\n};\nconst parseText = fontStore => node => {\n  if (isText$5(node)) return layoutText$1(fontStore, node);\n  if (!node.children) return node;\n  const children = node.children.map(parseText(fontStore));\n  return Object.assign({}, node, {\n    children\n  });\n};\nconst resolveSvgNode = container => compose(parseProps(container), addMissingTspan, removeNoneValues, mergeStyles$1);\nconst resolveChildren = container => node => {\n  if (!node.children) return node;\n  const resolveChild = compose(resolveChildren(container), resolveSvgNode(container));\n  const children = node.children.map(resolveChild);\n  return Object.assign({}, node, {\n    children\n  });\n};\nconst buildXLinksIndex = node => {\n  const idIndex = {};\n  const listToExplore = node.children?.slice(0) || [];\n  while (listToExplore.length > 0) {\n    const child = listToExplore.shift();\n    if (child.props && 'id' in child.props) {\n      idIndex[child.props.id] = child;\n    }\n    if (child.children) listToExplore.push(...child.children);\n  }\n  return idIndex;\n};\nconst replaceXLinks = (node, idIndex) => {\n  if (node.props && 'xlinkHref' in node.props) {\n    const linkedNode = idIndex[node.props.xlinkHref.replace(/^#/, '')];\n    // No node to extend from\n    if (!linkedNode) return node;\n    const newProps = Object.assign({}, linkedNode.props, node.props);\n    delete newProps.xlinkHref;\n    return Object.assign({}, linkedNode, {\n      props: newProps\n    });\n  }\n  const children = node.children?.map(child => replaceXLinks(child, idIndex));\n  return Object.assign({}, node, {\n    children\n  });\n};\nconst resolveXLinks = node => {\n  const idIndex = buildXLinksIndex(node);\n  return replaceXLinks(node, idIndex);\n};\nconst resolveSvgRoot = (node, fontStore) => {\n  const container = getContainer$1(node);\n  return compose(replaceDefs, parseText(fontStore), parseSvgProps, pickStyleProps, inheritProps, resolveChildren(container), resolveXLinks)(node);\n};\n/**\n * Pre-process SVG nodes so they can be rendered in the next steps\n *\n * @param node - Root node\n * @param fontStore - Font store\n * @returns Root node\n */\nconst resolveSvg = (node, fontStore) => {\n  if (!('children' in node)) return node;\n  const resolveChild = child => resolveSvg(child, fontStore);\n  const root = isSvg$3(node) ? resolveSvgRoot(node, fontStore) : node;\n  const children = root.children?.map(resolveChild);\n  return Object.assign({}, root, {\n    children\n  });\n};\nlet instancePromise;\nconst loadYoga = async () => {\n  // Yoga WASM binaries must be asynchronously compiled and loaded\n  // to prevent Event emitter memory leak warnings, Yoga must be loaded only once\n  const instance = await (instancePromise ??= loadYoga$1());\n  const config = instance.Config.create();\n  config.setPointScaleFactor(0);\n  const node = {\n    create: () => instance.Node.createWithConfig(config)\n  };\n  return {\n    node\n  };\n};\nconst resolveYoga = async root => {\n  const yoga = await loadYoga();\n  return Object.assign({}, root, {\n    yoga\n  });\n};\nconst getZIndex = node => node.style.zIndex;\nconst shouldSort = node => node.type !== P.Document && node.type !== P.Svg;\nconst sortZIndex = (a, b) => {\n  const za = getZIndex(a);\n  const zb = getZIndex(b);\n  if (!za && !zb) return 0;\n  if (!za) return 1;\n  if (!zb) return -1;\n  return zb - za;\n};\n/**\n * Sort children by zIndex value\n *\n * @param node\n * @returns Node\n */\nconst resolveNodeZIndex = node => {\n  if (!node.children) return node;\n  const sortedChildren = shouldSort(node) ? node.children.sort(sortZIndex) : node.children;\n  const children = sortedChildren.map(resolveNodeZIndex);\n  return Object.assign({}, node, {\n    children\n  });\n};\n/**\n * Sort children by zIndex value\n *\n * @param node\n * @returns Node\n */\nconst resolveZIndex = root => resolveNodeZIndex(root);\n\n// Caches emoji images data\nconst emojis = {};\nconst regex = emojiRegex();\n/**\n * When an emoji as no variations, it might still have 2 parts,\n * the canonical emoji and an empty string.\n * ex.\n *   (no color) Array.from('❤️') => [\"❤\", \"️\"]\n *   (w/ color) Array.from('👍🏿') => [\"👍\", \"🏿\"]\n *\n * The empty string needs to be removed otherwise the generated\n * url will be incorect.\n */\nconst removeVariationSelectors = x => x !== '️';\nconst getCodePoints = function (string) {\n  let withVariationSelectors = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return Array.from(string).filter(withVariationSelectors ? () => true : removeVariationSelectors).map(char => char.codePointAt(0).toString(16)).join('-');\n};\nconst buildEmojiUrl = (emoji, source) => {\n  if ('builder' in source) {\n    return source.builder(getCodePoints(emoji, source.withVariationSelectors));\n  }\n  const {\n    url,\n    format = 'png',\n    withVariationSelectors\n  } = source;\n  return `${url}${getCodePoints(emoji, withVariationSelectors)}.${format}`;\n};\nconst fetchEmojis = (string, source) => {\n  if (!source) return [];\n  const promises = [];\n  Array.from(string.matchAll(regex)).forEach(match => {\n    const emoji = match[0];\n    if (!emojis[emoji] || emojis[emoji].loading) {\n      const emojiUrl = buildEmojiUrl(emoji, source);\n      emojis[emoji] = {\n        loading: true\n      };\n      promises.push(resolveImage({\n        uri: emojiUrl\n      }).then(image => {\n        emojis[emoji].loading = false;\n        emojis[emoji].data = image.data;\n      }));\n    }\n  });\n  return promises;\n};\nconst embedEmojis = fragments => {\n  const result = [];\n  for (let i = 0; i < fragments.length; i += 1) {\n    const fragment = fragments[i];\n    let lastIndex = 0;\n    Array.from(fragment.string.matchAll(regex)).forEach(match => {\n      const {\n        index\n      } = match;\n      const emoji = match[0];\n      const emojiSize = fragment.attributes.fontSize;\n      const chunk = fragment.string.slice(lastIndex, index + match[0].length);\n      // If emoji image was found, we create a new fragment with the\n      // correct attachment and object substitution character;\n      if (emojis[emoji] && emojis[emoji].data) {\n        result.push({\n          string: chunk.replace(match[0], String.fromCharCode(0xfffc)),\n          attributes: {\n            ...fragment.attributes,\n            attachment: {\n              width: emojiSize,\n              height: emojiSize,\n              yOffset: Math.floor(emojiSize * 0.1),\n              image: emojis[emoji].data\n            }\n          }\n        });\n      } else {\n        // If no emoji data, we try to use emojis in the font\n        result.push({\n          string: chunk,\n          attributes: fragment.attributes\n        });\n      }\n      lastIndex = index + emoji.length;\n    });\n    if (lastIndex < fragment.string.length) {\n      result.push({\n        string: fragment.string.slice(lastIndex),\n        attributes: fragment.attributes\n      });\n    }\n  }\n  return result;\n};\n\n/**\n * Get image source\n *\n * @param node - Image node\n * @returns Image src\n */\nconst getSource = node => {\n  if (node.props.src) return node.props.src;\n  if (node.props.source) return node.props.source;\n};\n\n/**\n * Resolves `src` to `@react-pdf/image` interface.\n *\n * Also it handles factories and async sources.\n *\n * @param src\n * @returns Resolved src\n */\nconst resolveSource = async src => {\n  const source = typeof src === 'function' ? await src() : await src;\n  return typeof source === 'string' ? {\n    uri: source\n  } : source;\n};\n\n/**\n * Fetches image and append data to node\n * Ideally this fn should be immutable.\n *\n * @param node\n */\nconst fetchImage = async node => {\n  const src = getSource(node);\n  const {\n    cache\n  } = node.props;\n  if (!src) {\n    console.warn(false, 'Image should receive either a \"src\" or \"source\" prop');\n    return;\n  }\n  try {\n    const source = await resolveSource(src);\n    if (!source) {\n      throw new Error(`Image's \"src\" or \"source\" prop returned ${source}`);\n    }\n    node.image = await resolveImage(source, {\n      cache\n    });\n    if (Buffer.isBuffer(source) || source instanceof Blob) return;\n    node.image.key = 'data' in source ? source.data.toString() : source.uri;\n  } catch (e) {\n    console.warn(e.message);\n  }\n};\nconst isImage$2 = node => node.type === P.Image;\n/**\n * Get all asset promises that need to be resolved\n *\n * @param fontStore - Font store\n * @param node - Root node\n * @returns Asset promises\n */\nconst fetchAssets = (fontStore, node) => {\n  const promises = [];\n  const listToExplore = node.children?.slice(0) || [];\n  const emojiSource = fontStore ? fontStore.getEmojiSource() : null;\n  while (listToExplore.length > 0) {\n    const n = listToExplore.shift();\n    if (isImage$2(n)) {\n      promises.push(fetchImage(n));\n    }\n    if (fontStore && n.style?.fontFamily) {\n      const fontFamilies = castArray(n.style.fontFamily);\n      promises.push(...fontFamilies.map(fontFamily => fontStore.load({\n        fontFamily,\n        fontStyle: n.style.fontStyle,\n        fontWeight: n.style.fontWeight\n      })));\n    }\n    if (typeof n === 'string') {\n      promises.push(...fetchEmojis(n, emojiSource));\n    }\n    if ('value' in n && typeof n.value === 'string') {\n      promises.push(...fetchEmojis(n.value, emojiSource));\n    }\n    if (n.children) {\n      n.children.forEach(childNode => {\n        listToExplore.push(childNode);\n      });\n    }\n  }\n  return promises;\n};\n/**\n * Fetch image, font and emoji assets in parallel.\n * Layout process will not be resumed until promise resolves.\n *\n * @param node root node\n * @param fontStore font store\n * @returns Root node\n */\nconst resolveAssets = async (node, fontStore) => {\n  const promises = fetchAssets(fontStore, node);\n  await Promise.all(promises);\n  return node;\n};\nconst isLink$1 = node => node.type === P.Link;\nconst DEFAULT_LINK_STYLES = {\n  color: 'blue',\n  textDecoration: 'underline'\n};\n/**\n * Computes styles using stylesheet\n *\n * @param container\n * @param node - Document node\n * @returns Computed styles\n */\nconst computeStyle = (container, node) => {\n  let baseStyle = [node.style];\n  if (isLink$1(node)) {\n    baseStyle = Array.isArray(node.style) ? [DEFAULT_LINK_STYLES, ...node.style] : [DEFAULT_LINK_STYLES, node.style];\n  }\n  return resolveStyle(container, baseStyle);\n};\n/**\n * Resolves node styles\n *\n * @param container\n * @returns Resolve node styles\n */\nconst resolveNodeStyles = container => node => {\n  const style = computeStyle(container, node);\n  if (!node.children) return Object.assign({}, node, {\n    style\n  });\n  const children = node.children.map(resolveNodeStyles(container));\n  return Object.assign({}, node, {\n    style,\n    children\n  });\n};\n/**\n * Resolves page styles\n *\n * @param page Document page\n * @returns Document page with resolved styles\n */\nconst resolvePageStyles = page => {\n  const dpi = page.props?.dpi || 72;\n  const style = page.style;\n  const width = page.box?.width || style.width;\n  const height = page.box?.height || style.height;\n  const orientation = page.props?.orientation || 'portrait';\n  const remBase = style?.fontSize || 18;\n  const container = {\n    width,\n    height,\n    orientation,\n    dpi,\n    remBase\n  };\n  return resolveNodeStyles(container)(page);\n};\n/**\n * Resolves document styles\n *\n * @param root - Document root\n * @returns Document root with resolved styles\n */\nconst resolveStyles = root => {\n  if (!root.children) return root;\n  const children = root.children.map(resolvePageStyles);\n  return Object.assign({}, root, {\n    children\n  });\n};\nconst getTransformStyle = s => node => isNil(node.style?.[s]) ? '50%' : node.style?.[s] ?? null;\n/**\n * Get node origin\n *\n * @param node\n * @returns {{ left?: number, top?: number }} node origin\n */\nconst getOrigin = node => {\n  if (!node.box) return null;\n  const {\n    left,\n    top,\n    width,\n    height\n  } = node.box;\n  const transformOriginX = getTransformStyle('transformOriginX')(node);\n  const transformOriginY = getTransformStyle('transformOriginY')(node);\n  const percentX = matchPercent(transformOriginX);\n  const percentY = matchPercent(transformOriginY);\n  const offsetX = percentX ? width * percentX.percent : transformOriginX;\n  const offsetY = percentY ? height * percentY.percent : transformOriginY;\n  if (isNil(offsetX) || typeof offsetX === 'string') throw new Error(`Invalid origin offsetX: ${offsetX}`);\n  if (isNil(offsetY) || typeof offsetY === 'string') throw new Error(`Invalid origin offsetY: ${offsetY}`);\n  return {\n    left: left + offsetX,\n    top: top + offsetY\n  };\n};\n\n/**\n * Resolve node origin\n *\n * @param node\n * @returns Node with origin attribute\n */\nconst resolveNodeOrigin = node => {\n  const origin = getOrigin(node);\n  const newNode = Object.assign({}, node, {\n    origin\n  });\n  if (!node.children) return newNode;\n  const children = node.children.map(resolveNodeOrigin);\n  return Object.assign({}, newNode, {\n    children\n  });\n};\n/**\n * Resolve document origins\n *\n * @param root - Document root\n * @returns Document root\n */\nconst resolveOrigin = root => {\n  if (!root.children) return root;\n  const children = root.children.map(resolveNodeOrigin);\n  return Object.assign({}, root, {\n    children\n  });\n};\nconst getBookmarkValue = bookmark => {\n  return typeof bookmark === 'string' ? {\n    title: bookmark,\n    fit: false,\n    expanded: false\n  } : bookmark;\n};\nconst resolveBookmarks = node => {\n  let refs = 0;\n  const children = (node.children || []).slice(0);\n  const listToExplore = children.map(value => ({\n    value,\n    parent: null\n  }));\n  while (listToExplore.length > 0) {\n    const element = listToExplore.shift();\n    if (!element) break;\n    const child = element.value;\n    let parent = element.parent;\n    if (child.props && 'bookmark' in child.props) {\n      const bookmark = getBookmarkValue(child.props.bookmark);\n      const ref = refs++;\n      const newHierarchy = {\n        ref,\n        parent: parent?.ref,\n        ...bookmark\n      };\n      child.props.bookmark = newHierarchy;\n      parent = newHierarchy;\n    }\n    if (child.children) {\n      child.children.forEach(childNode => {\n        listToExplore.push({\n          value: childNode,\n          parent\n        });\n      });\n    }\n  }\n  return node;\n};\nconst VALID_ORIENTATIONS = ['portrait', 'landscape'];\n/**\n * Get page orientation. Defaults to portrait\n *\n * @param page - Page object\n * @returns Page orientation\n */\nconst getOrientation = page => {\n  const value = page.props?.orientation || 'portrait';\n  return VALID_ORIENTATIONS.includes(value) ? value : 'portrait';\n};\n\n/**\n * Return true if page is landscape\n *\n * @param page - Page instance\n * @returns Is page landscape\n */\nconst isLandscape = page => getOrientation(page) === 'landscape';\n\n// Page sizes for 72dpi. 72dpi is used internally by pdfkit.\nconst PAGE_SIZES = {\n  '4A0': [4767.87, 6740.79],\n  '2A0': [3370.39, 4767.87],\n  A0: [2383.94, 3370.39],\n  A1: [1683.78, 2383.94],\n  A2: [1190.55, 1683.78],\n  A3: [841.89, 1190.55],\n  A4: [595.28, 841.89],\n  A5: [419.53, 595.28],\n  A6: [297.64, 419.53],\n  A7: [209.76, 297.64],\n  A8: [147.4, 209.76],\n  A9: [104.88, 147.4],\n  A10: [73.7, 104.88],\n  B0: [2834.65, 4008.19],\n  B1: [2004.09, 2834.65],\n  B2: [1417.32, 2004.09],\n  B3: [1000.63, 1417.32],\n  B4: [708.66, 1000.63],\n  B5: [498.9, 708.66],\n  B6: [354.33, 498.9],\n  B7: [249.45, 354.33],\n  B8: [175.75, 249.45],\n  B9: [124.72, 175.75],\n  B10: [87.87, 124.72],\n  C0: [2599.37, 3676.54],\n  C1: [1836.85, 2599.37],\n  C2: [1298.27, 1836.85],\n  C3: [918.43, 1298.27],\n  C4: [649.13, 918.43],\n  C5: [459.21, 649.13],\n  C6: [323.15, 459.21],\n  C7: [229.61, 323.15],\n  C8: [161.57, 229.61],\n  C9: [113.39, 161.57],\n  C10: [79.37, 113.39],\n  RA0: [2437.8, 3458.27],\n  RA1: [1729.13, 2437.8],\n  RA2: [1218.9, 1729.13],\n  RA3: [864.57, 1218.9],\n  RA4: [609.45, 864.57],\n  SRA0: [2551.18, 3628.35],\n  SRA1: [1814.17, 2551.18],\n  SRA2: [1275.59, 1814.17],\n  SRA3: [907.09, 1275.59],\n  SRA4: [637.8, 907.09],\n  EXECUTIVE: [521.86, 756.0],\n  FOLIO: [612.0, 936.0],\n  LEGAL: [612.0, 1008.0],\n  LETTER: [612.0, 792.0],\n  TABLOID: [792.0, 1224.0],\n  ID1: [153, 243]\n};\n/**\n * Parses scalar value in value and unit pairs\n *\n * @param value - Scalar value\n * @returns Parsed value\n */\nconst parseValue = value => {\n  if (typeof value === 'number') return {\n    value,\n    unit: undefined\n  };\n  const match = /^(-?\\d*\\.?\\d+)(in|mm|cm|pt|px)?$/g.exec(value);\n  return match ? {\n    value: parseFloat(match[1]),\n    unit: match[2] || 'pt'\n  } : {\n    value,\n    unit: undefined\n  };\n};\n/**\n * Transform given scalar value to 72dpi equivalent of size\n *\n * @param value - Styles value\n * @param inputDpi - User defined dpi\n * @returns Transformed value\n */\nconst transformUnit = (value, inputDpi) => {\n  if (!value) return 0;\n  const scalar = parseValue(value);\n  const outputDpi = 72;\n  const mmFactor = 1 / 25.4 * outputDpi;\n  const cmFactor = 1 / 2.54 * outputDpi;\n  if (typeof scalar.value === 'string') throw new Error(`Invalid page size: ${value}`);\n  switch (scalar.unit) {\n    case 'in':\n      return scalar.value * outputDpi;\n    case 'mm':\n      return scalar.value * mmFactor;\n    case 'cm':\n      return scalar.value * cmFactor;\n    case 'px':\n      return Math.round(scalar.value * (outputDpi / inputDpi));\n    default:\n      return scalar.value;\n  }\n};\nconst transformUnits = (_ref, dpi) => {\n  let {\n    width,\n    height\n  } = _ref;\n  return {\n    width: transformUnit(width, dpi),\n    height: transformUnit(height, dpi)\n  };\n};\n/**\n * Transforms array into size object\n *\n * @param v - Values array\n * @returns Size object with width and height\n */\nconst toSizeObject = v => ({\n  width: v[0],\n  height: v[1]\n});\n/**\n * Flip size object\n *\n * @param v - Size object\n * @returns Flipped size object\n */\nconst flipSizeObject = v => ({\n  width: v.height,\n  height: v.width\n});\n/**\n * Returns size object from a given string\n *\n * @param v - Page size string\n * @returns Size object with width and height\n */\nconst getStringSize = v => {\n  return toSizeObject(PAGE_SIZES[v.toUpperCase()]);\n};\n/**\n * Returns size object from a single number\n *\n * @param n - Page size number\n * @returns Size object with width and height\n */\nconst getNumberSize = n => toSizeObject([n, n]);\n/**\n * Return page size in an object { width, height }\n *\n * @param page - Page node\n * @returns Size object with width and height\n */\nconst getSize = page => {\n  const value = page.props?.size || 'A4';\n  const dpi = page.props?.dpi || 72;\n  let size;\n  if (typeof value === 'string') {\n    size = getStringSize(value);\n  } else if (Array.isArray(value)) {\n    size = transformUnits(toSizeObject(value), dpi);\n  } else if (typeof value === 'number') {\n    size = transformUnits(getNumberSize(value), dpi);\n  } else {\n    size = transformUnits(value, dpi);\n  }\n  return isLandscape(page) ? flipSizeObject(size) : size;\n};\n\n/**\n * Resolves page size\n *\n * @param page\n * @returns Page with resolved size in style attribute\n */\nconst resolvePageSize = page => {\n  const size = getSize(page);\n  const style = flatten(page.style || {});\n  return {\n    ...page,\n    style: {\n      ...style,\n      ...size\n    }\n  };\n};\n/**\n * Resolves page sizes\n *\n * @param root  -Document root\n * @returns Document root with resolved page sizes\n */\nconst resolvePageSizes = root => {\n  if (!root.children) return root;\n  const children = root.children.map(resolvePageSize);\n  return Object.assign({}, root, {\n    children\n  });\n};\nconst isFixed = node => {\n  if (!node.props) return false;\n  return 'fixed' in node.props ? node.props.fixed === true : false;\n};\n\n/**\n * Get line index at given height\n *\n * @param node\n * @param height\n */\nconst lineIndexAtHeight = (node, height) => {\n  let y = 0;\n  if (!node.lines) return 0;\n  for (let i = 0; i < node.lines.length; i += 1) {\n    const line = node.lines[i];\n    if (y + line.box.height > height) return i;\n    y += line.box.height;\n  }\n  return node.lines.length;\n};\n\n/**\n * Get height for given text line index\n *\n * @param node\n * @param index\n */\nconst heightAtLineIndex = (node, index) => {\n  let counter = 0;\n  if (!node.lines) return counter;\n  for (let i = 0; i < index; i += 1) {\n    const line = node.lines[i];\n    if (!line) break;\n    counter += line.box.height;\n  }\n  return counter;\n};\nconst getLineBreak = (node, height) => {\n  const top = node.box?.top || 0;\n  const widows = node.props.widows || 2;\n  const orphans = node.props.orphans || 2;\n  const linesQuantity = node.lines.length;\n  const slicedLine = lineIndexAtHeight(node, height - top);\n  if (slicedLine === 0) {\n    return 0;\n  }\n  if (linesQuantity < orphans) {\n    return linesQuantity;\n  }\n  if (slicedLine < orphans || linesQuantity < orphans + widows) {\n    return 0;\n  }\n  if (linesQuantity === orphans + widows) {\n    return orphans;\n  }\n  if (linesQuantity - slicedLine < widows) {\n    return linesQuantity - widows;\n  }\n  return slicedLine;\n};\n// Also receives contentArea in case it's needed\nconst splitText = (node, height) => {\n  const slicedLineIndex = getLineBreak(node, height);\n  const currentHeight = heightAtLineIndex(node, slicedLineIndex);\n  const nextHeight = node.box.height - currentHeight;\n  const current = Object.assign({}, node, {\n    box: {\n      ...node.box,\n      height: currentHeight,\n      borderBottomWidth: 0\n    },\n    style: {\n      ...node.style,\n      marginBottom: 0,\n      paddingBottom: 0,\n      borderBottomWidth: 0,\n      borderBottomLeftRadius: 0,\n      borderBottomRightRadius: 0\n    },\n    lines: node.lines.slice(0, slicedLineIndex)\n  });\n  const next = Object.assign({}, node, {\n    box: {\n      ...node.box,\n      top: 0,\n      height: nextHeight,\n      borderTopWidth: 0\n    },\n    style: {\n      ...node.style,\n      marginTop: 0,\n      paddingTop: 0,\n      borderTopWidth: 0,\n      borderTopLeftRadius: 0,\n      borderTopRightRadius: 0\n    },\n    lines: node.lines.slice(slicedLineIndex)\n  });\n  return [current, next];\n};\nconst getTop$1 = node => node.box?.top || 0;\nconst hasFixedHeight = node => !isNil(node.style?.height);\nconst splitNode = (node, height) => {\n  if (!node) return [null, null];\n  const nodeTop = getTop$1(node);\n  const current = Object.assign({}, node, {\n    box: {\n      ...node.box,\n      borderBottomWidth: 0\n    },\n    style: {\n      ...node.style,\n      marginBottom: 0,\n      paddingBottom: 0,\n      borderBottomWidth: 0,\n      borderBottomLeftRadius: 0,\n      borderBottomRightRadius: 0\n    }\n  });\n  current.style.height = height - nodeTop;\n  const nextHeight = hasFixedHeight(node) ? node.box.height - (height - nodeTop) : null;\n  const next = Object.assign({}, node, {\n    box: {\n      ...node.box,\n      top: 0,\n      borderTopWidth: 0\n    },\n    style: {\n      ...node.style,\n      marginTop: 0,\n      paddingTop: 0,\n      borderTopWidth: 0,\n      borderTopLeftRadius: 0,\n      borderTopRightRadius: 0\n    }\n  });\n  if (nextHeight) {\n    next.style.height = nextHeight;\n  }\n  return [current, next];\n};\nconst NON_WRAP_TYPES = [P.Svg, P.Note, P.Image, P.Canvas];\nconst getWrap = node => {\n  if (NON_WRAP_TYPES.includes(node.type)) return false;\n  if (!node.props) return true;\n  return 'wrap' in node.props ? node.props.wrap : true;\n};\nconst getComputedPadding = (node, edge) => {\n  const {\n    yogaNode\n  } = node;\n  return yogaNode ? yogaNode.getComputedPadding(edge) : null;\n};\n/**\n * Get Yoga computed paddings. Zero otherwise\n *\n * @param  node\n * @returns paddings\n */\nconst getPadding = node => {\n  const {\n    style,\n    box\n  } = node;\n  const paddingTop = getComputedPadding(node, Yoga.Edge.Top) || box?.paddingTop || style?.paddingTop || 0;\n  const paddingRight = getComputedPadding(node, Yoga.Edge.Right) || box?.paddingRight || style?.paddingRight || 0;\n  const paddingBottom = getComputedPadding(node, Yoga.Edge.Bottom) || box?.paddingBottom || style?.paddingBottom || 0;\n  const paddingLeft = getComputedPadding(node, Yoga.Edge.Left) || box?.paddingLeft || style?.paddingLeft || 0;\n  return {\n    paddingTop,\n    paddingRight,\n    paddingBottom,\n    paddingLeft\n  };\n};\nconst getWrapArea = page => {\n  const height = page.style?.height;\n  const {\n    paddingBottom\n  } = getPadding(page);\n  return height - paddingBottom;\n};\nconst getContentArea = page => {\n  const height = page.style?.height;\n  const {\n    paddingTop,\n    paddingBottom\n  } = getPadding(page);\n  return height - paddingBottom - paddingTop;\n};\nconst isString = value => typeof value === 'string';\nconst isNumber = value => typeof value === 'number';\nconst isBoolean = value => typeof value === 'boolean';\nconst isFragment = value => value && value.type === Symbol.for('react.fragment');\n/**\n * Transforms a react element instance to internal element format.\n *\n * Can return multiple instances in the case of arrays or fragments.\n *\n * @param element - React element\n * @returns Parsed React elements\n */\nconst createInstances = element => {\n  if (!element) return [];\n  if (Array.isArray(element)) {\n    return element.reduce((acc, el) => acc.concat(createInstances(el)), []);\n  }\n  if (isBoolean(element)) {\n    return [];\n  }\n  if (isString(element) || isNumber(element)) {\n    return [{\n      type: P.TextInstance,\n      value: `${element}`\n    }];\n  }\n  if (isFragment(element)) {\n    // @ts-expect-error figure out why this is complains\n    return createInstances(element.props.children);\n  }\n  if (!isString(element.type)) {\n    // @ts-expect-error figure out why this is complains\n    return createInstances(element.type(element.props));\n  }\n  const {\n    type,\n    props: {\n      style = {},\n      children,\n      ...props\n    }\n  } = element;\n  const nextChildren = castArray(children).reduce((acc, child) => acc.concat(createInstances(child)), []);\n  return [{\n    type,\n    style,\n    props,\n    children: nextChildren\n  }];\n};\nconst getBreak = node => 'break' in node.props ? node.props.break : false;\nconst getMinPresenceAhead = node => 'minPresenceAhead' in node.props ? node.props.minPresenceAhead : 0;\nconst getFurthestEnd = elements => Math.max(...elements.map(node => node.box.top + node.box.height));\nconst getEndOfMinPresenceAhead = child => {\n  return child.box.top + child.box.height + child.box.marginBottom + getMinPresenceAhead(child);\n};\nconst getEndOfPresence = (child, futureElements) => {\n  const afterMinPresenceAhead = getEndOfMinPresenceAhead(child);\n  const endOfFurthestFutureElement = getFurthestEnd(futureElements.filter(node => !('fixed' in node.props)));\n  return Math.min(afterMinPresenceAhead, endOfFurthestFutureElement);\n};\nconst shouldBreak = (child, futureElements, height) => {\n  if ('fixed' in child.props) return false;\n  const shouldSplit = height < child.box.top + child.box.height;\n  const canWrap = getWrap(child);\n  // Calculate the y coordinate where the desired presence of the child ends\n  const endOfPresence = getEndOfPresence(child, futureElements);\n  // If the child is already at the top of the page, breaking won't improve its presence\n  // (as long as react-pdf does not support breaking into differently sized containers)\n  const breakingImprovesPresence = child.box.top > child.box.marginTop;\n  return getBreak(child) || shouldSplit && !canWrap || !shouldSplit && endOfPresence > height && breakingImprovesPresence;\n};\nconst IGNORABLE_CODEPOINTS = [8232,\n// LINE_SEPARATOR\n8233 // PARAGRAPH_SEPARATOR\n];\nconst buildSubsetForFont = font => IGNORABLE_CODEPOINTS.reduce((acc, codePoint) => {\n  if (font && font.hasGlyphForCodePoint && font.hasGlyphForCodePoint(codePoint)) {\n    return acc;\n  }\n  return [...acc, String.fromCharCode(codePoint)];\n}, []);\nconst ignoreChars = fragments => fragments.map(fragment => {\n  const charSubset = buildSubsetForFont(fragment.attributes.font[0]);\n  const subsetRegex = new RegExp(charSubset.join('|'));\n  return {\n    string: fragment.string.replace(subsetRegex, ''),\n    attributes: fragment.attributes\n  };\n});\nconst PREPROCESSORS = [ignoreChars, embedEmojis];\nconst isImage$1 = node => node.type === P.Image;\nconst isTextInstance$2 = node => node.type === P.TextInstance;\n/**\n * Get textkit fragments of given node object\n *\n * @param fontStore - Font store\n * @param instance - Node\n * @param parentLink - Parent link\n * @param level - Fragment level\n * @returns Text fragments\n */\nconst getFragments = function (fontStore, instance) {\n  let parentLink = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  let level = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  if (!instance) return [{\n    string: ''\n  }];\n  let fragments = [];\n  const {\n    color = 'black',\n    direction = 'ltr',\n    fontFamily = 'Helvetica',\n    fontWeight,\n    fontStyle,\n    fontSize = 18,\n    textAlign,\n    lineHeight,\n    textDecoration,\n    textDecorationColor,\n    textDecorationStyle,\n    textTransform,\n    letterSpacing,\n    textIndent,\n    opacity,\n    verticalAlign\n  } = instance.style;\n  const fontFamilies = typeof fontFamily === 'string' ? [fontFamily] : [...(fontFamily || [])];\n  // Fallback font\n  fontFamilies.push('Helvetica');\n  const font = fontFamilies.map(fontFamilyName => {\n    const opts = {\n      fontFamily: fontFamilyName,\n      fontWeight,\n      fontStyle\n    };\n    const obj = fontStore.getFont(opts);\n    return obj?.data;\n  });\n  // Don't pass main background color to textkit. Will be rendered by the render package instead\n  const backgroundColor = level === 0 ? null : instance.style.backgroundColor;\n  const attributes = {\n    font,\n    color,\n    opacity,\n    fontSize,\n    lineHeight,\n    direction,\n    verticalAlign,\n    backgroundColor,\n    indent: textIndent,\n    characterSpacing: letterSpacing,\n    strikeStyle: textDecorationStyle,\n    underlineStyle: textDecorationStyle,\n    underline: textDecoration === 'underline' || textDecoration === 'underline line-through' || textDecoration === 'line-through underline',\n    strike: textDecoration === 'line-through' || textDecoration === 'underline line-through' || textDecoration === 'line-through underline',\n    strikeColor: textDecorationColor || color,\n    underlineColor: textDecorationColor || color,\n    // @ts-expect-error allow this props access\n    link: parentLink || instance.props?.src || instance.props?.href,\n    align: textAlign || (direction === 'rtl' ? 'right' : 'left')\n  };\n  for (let i = 0; i < instance.children.length; i += 1) {\n    const child = instance.children[i];\n    if (isImage$1(child)) {\n      fragments.push({\n        string: String.fromCharCode(0xfffc),\n        attributes: {\n          ...attributes,\n          attachment: {\n            width: child.style.width || fontSize,\n            height: child.style.height || fontSize,\n            image: child.image.data\n          }\n        }\n      });\n    } else if (isTextInstance$2(child)) {\n      fragments.push({\n        string: transformText(child.value, textTransform),\n        attributes\n      });\n    } else if (child) {\n      fragments.push(...getFragments(fontStore, child, attributes.link, level + 1));\n    }\n  }\n  for (let i = 0; i < PREPROCESSORS.length; i += 1) {\n    const preprocessor = PREPROCESSORS[i];\n    fragments = preprocessor(fragments);\n  }\n  return fragments;\n};\n/**\n * Get textkit attributed string from text node\n *\n * @param fontStore - Font store\n * @param instance Node\n * @returns Attributed string\n */\nconst getAttributedString = (fontStore, instance) => {\n  const fragments = getFragments(fontStore, instance);\n  return fromFragments(fragments);\n};\nconst engines = {\n  bidi,\n  linebreaker,\n  justification,\n  textDecoration,\n  scriptItemizer,\n  wordHyphenation,\n  fontSubstitution\n};\nconst engine = layoutEngine(engines);\nconst getMaxLines = node => node.style?.maxLines;\nconst getTextOverflow = node => node.style?.textOverflow;\n/**\n * Get layout container for specific text node\n *\n * @param {number} width\n * @param {number} height\n * @param {Object} node\n * @returns {Object} layout container\n */\nconst getContainer = (width, height, node) => {\n  const maxLines = getMaxLines(node);\n  const textOverflow = getTextOverflow(node);\n  return {\n    x: 0,\n    y: 0,\n    width,\n    maxLines,\n    height: height || Infinity,\n    truncateMode: textOverflow\n  };\n};\n/**\n * Get text layout options for specific text node\n *\n * @param {Object} node instance\n * @returns {Object} layout options\n */\nconst getLayoutOptions = (fontStore, node) => ({\n  hyphenationPenalty: node.props.hyphenationPenalty,\n  shrinkWhitespaceFactor: {\n    before: -0.5,\n    after: -0.5\n  },\n  hyphenationCallback: node.props.hyphenationCallback || fontStore?.getHyphenationCallback() || null\n});\n/**\n * Get text lines for given node\n *\n * @param node - Node\n * @param width - Container width\n * @param height - Container height\n * @param fontStore - Font store\n * @returns Layout lines\n */\nconst layoutText = (node, width, height, fontStore) => {\n  const attributedString = getAttributedString(fontStore, node);\n  const container = getContainer(width, height, node);\n  const options = getLayoutOptions(fontStore, node);\n  const lines = engine(attributedString, container, options);\n  return lines.reduce((acc, line) => [...acc, ...line], []);\n};\nconst isSvg$2 = node => node.type === P.Svg;\nconst isText$4 = node => node.type === P.Text;\nconst shouldIterate = node => !isSvg$2(node) && !isText$4(node);\nconst shouldLayoutText = node => isText$4(node) && !node.lines;\n/**\n * Performs text layout on text node if wasn't calculated before.\n * Text layout is usually performed on Yoga's layout process (via setMeasureFunc),\n * but we need to layout those nodes with fixed width and height.\n *\n * @param node\n * @returns Layout node\n */\nconst resolveTextLayout = (node, fontStore) => {\n  if (shouldLayoutText(node)) {\n    const width = node.box.width - (node.box.paddingRight + node.box.paddingLeft);\n    const height = node.box.height - (node.box.paddingTop + node.box.paddingBottom);\n    node.lines = layoutText(node, width, height, fontStore);\n  }\n  if (shouldIterate(node)) {\n    if (!node.children) return node;\n    const mapChild = child => resolveTextLayout(child, fontStore);\n    const children = node.children.map(mapChild);\n    return Object.assign({}, node, {\n      children\n    });\n  }\n  return node;\n};\nconst BASE_INHERITABLE_PROPERTIES = ['color', 'fontFamily', 'fontSize', 'fontStyle', 'fontWeight', 'letterSpacing', 'opacity', 'textDecoration', 'textTransform', 'lineHeight', 'textAlign', 'visibility', 'wordSpacing'];\nconst TEXT_INHERITABLE_PROPERTIES = [...BASE_INHERITABLE_PROPERTIES, 'backgroundColor'];\nconst isType$2 = type => node => node.type === type;\nconst isSvg$1 = isType$2(P.Svg);\nconst isText$3 = isType$2(P.Text);\n// Merge style values\nconst mergeValues = (styleName, value, inheritedValue) => {\n  switch (styleName) {\n    case 'textDecoration':\n      {\n        // merge not none and not false textDecoration values to one rule\n        return [inheritedValue, value].filter(v => v && v !== 'none').join(' ');\n      }\n    default:\n      return value;\n  }\n};\n// Merge inherited and node styles\nconst merge = (inheritedStyles, style) => {\n  const mergedStyles = {\n    ...inheritedStyles\n  };\n  Object.entries(style).forEach(_ref2 => {\n    let [styleName, value] = _ref2;\n    mergedStyles[styleName] = mergeValues(styleName, value, inheritedStyles[styleName]);\n  });\n  return mergedStyles;\n};\n/**\n * Merges styles with node\n *\n * @param inheritedStyles - Style object\n * @returns Merge styles function\n */\nconst mergeStyles = inheritedStyles => node => {\n  const style = merge(inheritedStyles, node.style || {});\n  return Object.assign({}, node, {\n    style\n  });\n};\n/**\n * Inherit style values from the root to the leafs\n *\n * @param node - Document root\n * @returns Document root with inheritance\n *\n */\nconst resolveInheritance = node => {\n  if (isSvg$1(node)) return node;\n  if (!('children' in node)) return node;\n  const inheritableProperties = isText$3(node) ? TEXT_INHERITABLE_PROPERTIES : BASE_INHERITABLE_PROPERTIES;\n  const inheritStyles = pick(inheritableProperties, node.style || {});\n  const resolveChild = compose(resolveInheritance, mergeStyles(inheritStyles));\n  const children = node.children.map(resolveChild);\n  return Object.assign({}, node, {\n    children\n  });\n};\nconst getComputedMargin = (node, edge) => {\n  const {\n    yogaNode\n  } = node;\n  return yogaNode ? yogaNode.getComputedMargin(edge) : null;\n};\n/**\n * Get Yoga computed magins. Zero otherwise\n *\n * @param node\n * @returns Margins\n */\nconst getMargin = node => {\n  const {\n    style,\n    box\n  } = node;\n  const marginTop = getComputedMargin(node, Yoga.Edge.Top) || box?.marginTop || style?.marginTop || 0;\n  const marginRight = getComputedMargin(node, Yoga.Edge.Right) || box?.marginRight || style?.marginRight || 0;\n  const marginBottom = getComputedMargin(node, Yoga.Edge.Bottom) || box?.marginBottom || style?.marginBottom || 0;\n  const marginLeft = getComputedMargin(node, Yoga.Edge.Left) || box?.marginLeft || style?.marginLeft || 0;\n  return {\n    marginTop,\n    marginRight,\n    marginBottom,\n    marginLeft\n  };\n};\n\n/**\n * Get Yoga computed position. Zero otherwise\n *\n * @param node\n * @returns Position\n */\nconst getPosition = node => {\n  const {\n    yogaNode\n  } = node;\n  return {\n    top: yogaNode?.getComputedTop() || 0,\n    right: yogaNode?.getComputedRight() || 0,\n    bottom: yogaNode?.getComputedBottom() || 0,\n    left: yogaNode?.getComputedLeft() || 0\n  };\n};\nconst DEFAULT_DIMENSION = {\n  width: 0,\n  height: 0\n};\n/**\n * Get Yoga computed dimensions. Zero otherwise\n *\n * @param node\n * @returns Dimensions\n */\nconst getDimension = node => {\n  const {\n    yogaNode\n  } = node;\n  if (!yogaNode) return DEFAULT_DIMENSION;\n  return {\n    width: yogaNode.getComputedWidth(),\n    height: yogaNode.getComputedHeight()\n  };\n};\nconst getComputedBorder = (yogaNode, edge) => yogaNode ? yogaNode.getComputedBorder(edge) : 0;\n/**\n * Get Yoga computed border width. Zero otherwise\n *\n * @param node\n * @returns Border widths\n */\nconst getBorderWidth = node => {\n  const {\n    yogaNode\n  } = node;\n  return {\n    borderTopWidth: getComputedBorder(yogaNode, Yoga.Edge.Top),\n    borderRightWidth: getComputedBorder(yogaNode, Yoga.Edge.Right),\n    borderBottomWidth: getComputedBorder(yogaNode, Yoga.Edge.Bottom),\n    borderLeftWidth: getComputedBorder(yogaNode, Yoga.Edge.Left)\n  };\n};\n\n/**\n * Set display attribute to node's Yoga instance\n *\n * @param value - Display\n * @returns Node instance wrapper\n */\nconst setDisplay = value => node => {\n  const {\n    yogaNode\n  } = node;\n  if (yogaNode) {\n    yogaNode.setDisplay(value === 'none' ? Yoga.Display.None : Yoga.Display.Flex);\n  }\n  return node;\n};\nconst OVERFLOW = {\n  hidden: Yoga.Overflow.Hidden,\n  scroll: Yoga.Overflow.Scroll\n};\n/**\n * Set overflow attribute to node's Yoga instance\n *\n * @param value - Overflow value\n * @returns Node instance wrapper\n */\nconst setOverflow = value => node => {\n  const {\n    yogaNode\n  } = node;\n  if (!isNil(value) && yogaNode) {\n    const overflow = OVERFLOW[value] || Yoga.Overflow.Visible;\n    yogaNode.setOverflow(overflow);\n  }\n  return node;\n};\nconst FLEX_WRAP = {\n  wrap: Yoga.Wrap.Wrap,\n  'wrap-reverse': Yoga.Wrap.WrapReverse\n};\n/**\n * Set flex wrap attribute to node's Yoga instance\n *\n * @param value - Flex wrap value\n * @returns Node instance wrapper\n */\nconst setFlexWrap = value => node => {\n  const {\n    yogaNode\n  } = node;\n  if (yogaNode) {\n    const flexWrap = FLEX_WRAP[value] || Yoga.Wrap.NoWrap;\n    yogaNode.setFlexWrap(flexWrap);\n  }\n  return node;\n};\n\n/**\n * Set generic yoga attribute to node's Yoga instance, handing `auto`, edges and percentage cases\n *\n * @param attr - Property\n * @param edge - Edge\n * @returns Node instance wrapper\n */\nconst setYogaValue = (attr, edge) => value => node => {\n  const {\n    yogaNode\n  } = node;\n  if (!isNil(value) && yogaNode) {\n    const hasEdge = !isNil(edge);\n    const fixedMethod = `set${upperFirst(attr)}`;\n    const autoMethod = `${fixedMethod}Auto`;\n    const percentMethod = `${fixedMethod}Percent`;\n    const percent = matchPercent(value);\n    if (percent && !yogaNode[percentMethod]) {\n      throw new Error(`You can't pass percentage values to ${attr} property`);\n    }\n    if (percent) {\n      if (hasEdge) {\n        yogaNode[percentMethod]?.(edge, percent.value);\n      } else {\n        yogaNode[percentMethod]?.(percent.value);\n      }\n    } else if (value === 'auto') {\n      if (hasEdge) {\n        yogaNode[autoMethod]?.(edge);\n      } else {\n        yogaNode[autoMethod]?.();\n      }\n    } else if (hasEdge) {\n      yogaNode[fixedMethod]?.(edge, value);\n    } else {\n      yogaNode[fixedMethod]?.(value);\n    }\n  }\n  return node;\n};\n\n/**\n * Set flex grow attribute to node's Yoga instance\n *\n * @param  value - Flex grow value\n * @returns Node instance wrapper\n */\nconst setFlexGrow = value => node => {\n  return setYogaValue('flexGrow')(value || 0)(node);\n};\n\n/**\n * Set flex basis attribute to node's Yoga instance\n *\n * @param flex - Basis value\n * @param node - Node instance\n * @returns Node instance\n */\nconst setFlexBasis = setYogaValue('flexBasis');\nconst ALIGN = {\n  'flex-start': Yoga.Align.FlexStart,\n  center: Yoga.Align.Center,\n  'flex-end': Yoga.Align.FlexEnd,\n  stretch: Yoga.Align.Stretch,\n  baseline: Yoga.Align.Baseline,\n  'space-between': Yoga.Align.SpaceBetween,\n  'space-around': Yoga.Align.SpaceAround,\n  'space-evenly': Yoga.Align.SpaceEvenly\n};\n/**\n * Set generic align attribute to node's Yoga instance\n *\n * @param attr - Specific align property\n * @param value - Specific align value\n * @param node - Node\n * @returns Node\n */\nconst setAlign = attr => value => node => {\n  const {\n    yogaNode\n  } = node;\n  const defaultValue = attr === 'items' ? Yoga.Align.Stretch : Yoga.Align.Auto;\n  if (yogaNode) {\n    const align = ALIGN[value] || defaultValue;\n    yogaNode[`setAlign${upperFirst(attr)}`](align);\n  }\n  return node;\n};\n\n/**\n * Set align self attribute to node's Yoga instance\n *\n * @param align - Value\n * @param node - Node instance\n * @returns Node instance\n */\nconst setAlignSelf = setAlign('self');\n\n/**\n * Set align items attribute to node's Yoga instance\n *\n * @param align - Value\n * @param node - Node instance\n * @returns Node instance\n */\nconst setAlignItems = setAlign('items');\n\n/**\n * Set flex shrink attribute to node's Yoga instance\n *\n * @param value - Flex shrink value\n * @returns Node instance wrapper\n */\nconst setFlexShrink = value => node => {\n  return setYogaValue('flexShrink')(value || 1)(node);\n};\n\n/**\n * Set aspect ratio attribute to node's Yoga instance\n *\n * @param value - Ratio\n * @returns Node instance\n */\nconst setAspectRatio = value => node => {\n  const {\n    yogaNode\n  } = node;\n  if (!isNil(value) && yogaNode) {\n    yogaNode.setAspectRatio(value);\n  }\n  return node;\n};\n\n/**\n * Set align content attribute to node's Yoga instance\n *\n * @param align - Value\n * @param node - Instance\n * @returns Node instance\n */\nconst setAlignContent = setAlign('content');\nconst POSITION = {\n  absolute: Yoga.PositionType.Absolute,\n  relative: Yoga.PositionType.Relative,\n  static: Yoga.PositionType.Static\n};\n/**\n * Set position type attribute to node's Yoga instance\n *\n * @param value - Position position type\n * @returns Node instance\n */\nconst setPositionType = value => node => {\n  const {\n    yogaNode\n  } = node;\n  if (!isNil(value) && yogaNode) {\n    yogaNode.setPositionType(POSITION[value]);\n  }\n  return node;\n};\nconst FLEX_DIRECTIONS = {\n  row: Yoga.FlexDirection.Row,\n  'row-reverse': Yoga.FlexDirection.RowReverse,\n  'column-reverse': Yoga.FlexDirection.ColumnReverse\n};\n/**\n * Set flex direction attribute to node's Yoga instance\n *\n * @param value - Flex direction value\n * @returns Node instance wrapper\n */\nconst setFlexDirection = value => node => {\n  const {\n    yogaNode\n  } = node;\n  if (yogaNode) {\n    const flexDirection = FLEX_DIRECTIONS[value] || Yoga.FlexDirection.Column;\n    yogaNode.setFlexDirection(flexDirection);\n  }\n  return node;\n};\nconst JUSTIFY_CONTENT = {\n  center: Yoga.Justify.Center,\n  'flex-end': Yoga.Justify.FlexEnd,\n  'space-between': Yoga.Justify.SpaceBetween,\n  'space-around': Yoga.Justify.SpaceAround,\n  'space-evenly': Yoga.Justify.SpaceEvenly\n};\n/**\n * Set justify content attribute to node's Yoga instance\n *\n * @param value - Justify content value\n * @returns Node instance wrapper\n */\nconst setJustifyContent = value => node => {\n  const {\n    yogaNode\n  } = node;\n  if (!isNil(value) && yogaNode) {\n    const justifyContent = JUSTIFY_CONTENT[value] || Yoga.Justify.FlexStart;\n    yogaNode.setJustifyContent(justifyContent);\n  }\n  return node;\n};\n\n/**\n * Set margin top attribute to node's Yoga instance\n *\n * @param margin - Margin top\n * @param node - Node instance\n * @returns Node instance\n */\nconst setMarginTop = setYogaValue('margin', Yoga.Edge.Top);\n/**\n * Set margin right attribute to node's Yoga instance\n *\n * @param margin - Margin right\n * @param node - Node instance\n * @returns Node instance\n */\nconst setMarginRight = setYogaValue('margin', Yoga.Edge.Right);\n/**\n * Set margin bottom attribute to node's Yoga instance\n *\n * @param margin - Margin bottom\n * @param node - Node instance\n * @returns Node instance\n */\nconst setMarginBottom = setYogaValue('margin', Yoga.Edge.Bottom);\n/**\n * Set margin left attribute to node's Yoga instance\n *\n * @param margin - Margin left\n * @param node - Node instance\n * @returns Node instance\n */\nconst setMarginLeft = setYogaValue('margin', Yoga.Edge.Left);\n\n/**\n * Set padding top attribute to node's Yoga instance\n *\n * @param padding - Padding top\n * @param node - Node instance\n * @returns Node instance\n */\nconst setPaddingTop = setYogaValue('padding', Yoga.Edge.Top);\n/**\n * Set padding right attribute to node's Yoga instance\n *\n * @param padding - Padding right\n * @param node - Node instance\n * @returns Node instance\n */\nconst setPaddingRight = setYogaValue('padding', Yoga.Edge.Right);\n/**\n * Set padding bottom attribute to node's Yoga instance\n *\n * @param padding - Padding bottom\n * @param node Node instance\n * @returns Node instance\n */\nconst setPaddingBottom = setYogaValue('padding', Yoga.Edge.Bottom);\n/**\n * Set padding left attribute to node's Yoga instance\n *\n * @param padding - Padding left\n * @param node - Node instance\n * @returns Node instance\n */\nconst setPaddingLeft = setYogaValue('padding', Yoga.Edge.Left);\n\n/**\n * Set border top attribute to node's Yoga instance\n *\n * @param border - Border top width\n * @param node - Node instance\n * @returns Node instance\n */\nconst setBorderTop = setYogaValue('border', Yoga.Edge.Top);\n/**\n * Set border right attribute to node's Yoga instance\n *\n * @param border - Border right width\n * @param node - Node instance\n * @returns Node instance\n */\nconst setBorderRight = setYogaValue('border', Yoga.Edge.Right);\n/**\n * Set border bottom attribute to node's Yoga instance\n *\n * @param border - Border bottom width\n * @param node - Node instance\n * @returns Node instance\n */\nconst setBorderBottom = setYogaValue('border', Yoga.Edge.Bottom);\n/**\n * Set border left attribute to node's Yoga instance\n *\n * @param border - Border left width\n * @param node - Node instance\n * @returns Node instance\n */\nconst setBorderLeft = setYogaValue('border', Yoga.Edge.Left);\n\n/**\n * Set position top attribute to node's Yoga instance\n *\n * @param position - Position top\n * @param node - Node instance\n * @returns Node instance\n */\nconst setPositionTop = setYogaValue('position', Yoga.Edge.Top);\n/**\n * Set position right attribute to node's Yoga instance\n *\n * @param position - Position right\n * @param node - Node instance\n * @returns Node instance\n */\nconst setPositionRight = setYogaValue('position', Yoga.Edge.Right);\n/**\n * Set position bottom attribute to node's Yoga instance\n *\n * @param position - Position bottom\n * @param node - Node instance\n * @returns Node instance\n */\nconst setPositionBottom = setYogaValue('position', Yoga.Edge.Bottom);\n/**\n * Set position left attribute to node's Yoga instance\n *\n * @param position - Position left\n * @param node - Node instance\n * @returns Node instance\n */\nconst setPositionLeft = setYogaValue('position', Yoga.Edge.Left);\n\n/**\n * Set width to node's Yoga instance\n *\n * @param width - Width\n * @param node - Node instance\n * @returns Node instance\n */\nconst setWidth = setYogaValue('width');\n/**\n * Set min width to node's Yoga instance\n *\n * @param min - Width\n * @param node - Node instance\n * @returns Node instance\n */\nconst setMinWidth = setYogaValue('minWidth');\n/**\n * Set max width to node's Yoga instance\n *\n * @param max - Width\n * @param node - Node instance\n * @returns Node instance\n */\nconst setMaxWidth = setYogaValue('maxWidth');\n/**\n * Set height to node's Yoga instance\n *\n * @param height - Height\n * @param node - Node instance\n * @returns Node instance\n */\nconst setHeight = setYogaValue('height');\n/**\n * Set min height to node's Yoga instance\n *\n * @param min - Height\n * @param node - Node instance\n * @returns Node instance\n */\nconst setMinHeight = setYogaValue('minHeight');\n/**\n * Set max height to node's Yoga instance\n *\n * @param max - Height\n * @param node - Node instance\n * @returns Node instance\n */\nconst setMaxHeight = setYogaValue('maxHeight');\n\n/**\n * Set rowGap value to node's Yoga instance\n *\n * @param value - Gap value\n * @returns Node instance wrapper\n */\nconst setRowGap = setYogaValue('gap', Yoga.Gutter.Row);\n/**\n * Set columnGap value to node's Yoga instance\n *\n * @param value - Gap value\n * @returns Node instance wrapper\n */\nconst setColumnGap = setYogaValue('gap', Yoga.Gutter.Column);\nconst getAspectRatio = viewbox => {\n  if (!viewbox) return null;\n  if (typeof viewbox === 'string') return null;\n  return (viewbox.maxX - viewbox.minX) / (viewbox.maxY - viewbox.minY);\n};\n/**\n * Yoga svg measure function\n *\n * @param page\n * @param node\n * @returns Measure svg\n */\nconst measureCanvas$1 = (page, node) => (width, widthMode, height, heightMode) => {\n  const aspectRatio = getAspectRatio(node.props.viewBox) || 1;\n  if (widthMode === Yoga.MeasureMode.Exactly || widthMode === Yoga.MeasureMode.AtMost) {\n    return {\n      width,\n      height: width / aspectRatio\n    };\n  }\n  if (heightMode === Yoga.MeasureMode.Exactly) {\n    return {\n      width: height * aspectRatio\n    };\n  }\n  return {};\n};\n\n/**\n * Get lines width (if any)\n *\n * @param node\n * @returns Lines width\n */\nconst linesWidth = node => {\n  if (!node.lines) return 0;\n  return Math.max(0, ...node.lines.map(line => line.xAdvance));\n};\n\n/**\n * Get lines height (if any)\n *\n * @param node\n * @returns Lines height\n */\nconst linesHeight = node => {\n  if (!node.lines) return -1;\n  return node.lines.reduce((acc, line) => acc + line.box.height, 0);\n};\nconst ALIGNMENT_FACTORS = {\n  center: 0.5,\n  right: 1\n};\n/**\n * Yoga text measure function\n *\n * @param page\n * @param node\n * @param fontStore\n * @returns {MeasureText} measure text function\n */\nconst measureText = (page, node, fontStore) => (width, widthMode, height) => {\n  if (widthMode === Yoga.MeasureMode.Exactly) {\n    if (!node.lines) node.lines = layoutText(node, width, height, fontStore);\n    return {\n      height: linesHeight(node)\n    };\n  }\n  if (widthMode === Yoga.MeasureMode.AtMost) {\n    const alignFactor = ALIGNMENT_FACTORS[node.style?.textAlign] || 0;\n    if (!node.lines) {\n      node.lines = layoutText(node, width, height, fontStore);\n      node.alignOffset = (width - linesWidth(node)) * alignFactor; // Compensate align in variable width containers\n    }\n    return {\n      height: linesHeight(node),\n      width: Math.min(width, linesWidth(node))\n    };\n  }\n  return {};\n};\n\n/**\n * Get image ratio\n *\n * @param node - Image node\n * @returns Image ratio\n */\nconst getRatio = node => {\n  return node.image?.data ? node.image.width / node.image.height : 1;\n};\n\n/**\n * Checks if page has auto height\n *\n * @param page\n * @returns Is page height auto\n */\nconst isHeightAuto = page => isNil(page.box?.height);\nconst SAFETY_HEIGHT$1 = 10;\n/**\n * Yoga image measure function\n *\n * @param page - Page\n * @param node - Node\n * @returns Measure image\n */\nconst measureImage = (page, node) => (width, widthMode, height, heightMode) => {\n  const imageRatio = getRatio(node);\n  const imageMargin = getMargin(node);\n  const pagePadding = getPadding(page);\n  // TODO: Check image percentage margins\n  const pageArea = isHeightAuto(page) ? Infinity : (page.box?.height || 0) - pagePadding.paddingTop - pagePadding.paddingBottom - imageMargin.marginTop - imageMargin.marginBottom - SAFETY_HEIGHT$1;\n  // Skip measure if image data not present yet\n  if (!node.image) return {\n    width: 0,\n    height: 0\n  };\n  if (widthMode === Yoga.MeasureMode.Exactly && heightMode === Yoga.MeasureMode.Undefined) {\n    const scaledHeight = width / imageRatio;\n    return {\n      height: Math.min(pageArea, scaledHeight)\n    };\n  }\n  if (heightMode === Yoga.MeasureMode.Exactly && (widthMode === Yoga.MeasureMode.AtMost || widthMode === Yoga.MeasureMode.Undefined)) {\n    return {\n      width: Math.min(height * imageRatio, width)\n    };\n  }\n  if (widthMode === Yoga.MeasureMode.Exactly && heightMode === Yoga.MeasureMode.AtMost) {\n    const scaledHeight = width / imageRatio;\n    return {\n      height: Math.min(height, pageArea, scaledHeight)\n    };\n  }\n  if (widthMode === Yoga.MeasureMode.AtMost && heightMode === Yoga.MeasureMode.AtMost) {\n    if (imageRatio > 1) {\n      return {\n        width,\n        height: Math.min(width / imageRatio, height)\n      };\n    }\n    return {\n      height,\n      width: Math.min(height * imageRatio, width)\n    };\n  }\n  return {\n    height,\n    width\n  };\n};\nconst SAFETY_HEIGHT = 10;\nconst getMax = values => Math.max(-Infinity, ...values);\n/**\n * Helper object to predict canvas size\n * TODO: Implement remaining functions (as close as possible);\n */\nconst measureCtx = () => {\n  const ctx = {};\n  const points = [];\n  const nil = () => ctx;\n  const addPoint = (x, y) => points.push([x, y]);\n  const moveTo = (x, y) => {\n    addPoint(x, y);\n    return ctx;\n  };\n  const rect = (x, y, w, h) => {\n    addPoint(x, y);\n    addPoint(x + w, y);\n    addPoint(x, y + h);\n    addPoint(x + w, y + h);\n    return ctx;\n  };\n  const ellipse = (x, y, rx, ry) => {\n    ry = ry || rx;\n    addPoint(x - rx, y - ry);\n    addPoint(x + rx, y - ry);\n    addPoint(x + rx, y + ry);\n    addPoint(x - rx, y + ry);\n    return ctx;\n  };\n  const polygon = function () {\n    points.push(...arguments);\n    return ctx;\n  };\n  // Change dimensions\n  ctx.rect = rect;\n  ctx.moveTo = moveTo;\n  ctx.lineTo = moveTo;\n  ctx.circle = ellipse;\n  ctx.polygon = polygon;\n  ctx.ellipse = ellipse;\n  ctx.roundedRect = rect;\n  // To be implemented\n  ctx.text = nil;\n  ctx.path = nil;\n  ctx.lineWidth = nil;\n  ctx.bezierCurveTo = nil;\n  ctx.quadraticCurveTo = nil;\n  ctx.scale = nil;\n  ctx.rotate = nil;\n  ctx.translate = nil;\n  // These don't change dimensions\n  ctx.dash = nil;\n  ctx.clip = nil;\n  ctx.save = nil;\n  ctx.fill = nil;\n  ctx.font = nil;\n  ctx.stroke = nil;\n  ctx.lineCap = nil;\n  ctx.opacity = nil;\n  ctx.restore = nil;\n  ctx.lineJoin = nil;\n  ctx.fontSize = nil;\n  ctx.fillColor = nil;\n  ctx.miterLimit = nil;\n  ctx.strokeColor = nil;\n  ctx.fillOpacity = nil;\n  ctx.strokeOpacity = nil;\n  ctx.linearGradient = nil;\n  ctx.radialGradient = nil;\n  ctx.getWidth = () => getMax(points.map(p => p[0]));\n  ctx.getHeight = () => getMax(points.map(p => p[1]));\n  return ctx;\n};\n/**\n * @typedef {Function} MeasureCanvas\n * @returns {{ width: number, height: number }} canvas width and height\n */\n/**\n * Yoga canvas measure function\n *\n * @param {Object} page\n * @param {Object} node\n * @returns {MeasureCanvas} measure canvas\n */\nconst measureCanvas = (page, node) => () => {\n  const imageMargin = getMargin(node);\n  const pagePadding = getPadding(page);\n  // TODO: Check image percentage margins\n  const pageArea = isHeightAuto(page) ? Infinity : (page.box?.height || 0) - pagePadding.paddingTop - pagePadding.paddingBottom - imageMargin.marginTop - imageMargin.marginBottom - SAFETY_HEIGHT;\n  const ctx = measureCtx();\n  node.props.paint(ctx);\n  const width = ctx.getWidth();\n  const height = Math.min(pageArea, ctx.getHeight());\n  return {\n    width,\n    height\n  };\n};\nconst isType$1 = type => node => node.type === type;\nconst isSvg = isType$1(P.Svg);\nconst isText$2 = isType$1(P.Text);\nconst isNote = isType$1(P.Note);\nconst isPage = isType$1(P.Page);\nconst isImage = isType$1(P.Image);\nconst isCanvas = isType$1(P.Canvas);\nconst isTextInstance$1 = isType$1(P.TextInstance);\nconst setNodeHeight = node => {\n  const value = isPage(node) ? node.box?.height : node.style?.height;\n  return setHeight(value);\n};\n/**\n * Set styles valeus into yoga node before layout calculation\n *\n * @param node\n */\nconst setYogaValues = node => {\n  compose(setNodeHeight(node), setWidth(node.style.width), setMinWidth(node.style.minWidth), setMaxWidth(node.style.maxWidth), setMinHeight(node.style.minHeight), setMaxHeight(node.style.maxHeight), setMarginTop(node.style.marginTop), setMarginRight(node.style.marginRight), setMarginBottom(node.style.marginBottom), setMarginLeft(node.style.marginLeft), setPaddingTop(node.style.paddingTop), setPaddingRight(node.style.paddingRight), setPaddingBottom(node.style.paddingBottom), setPaddingLeft(node.style.paddingLeft), setPositionType(node.style.position), setPositionTop(node.style.top), setPositionRight(node.style.right), setPositionBottom(node.style.bottom), setPositionLeft(node.style.left), setBorderTop(node.style.borderTopWidth), setBorderRight(node.style.borderRightWidth), setBorderBottom(node.style.borderBottomWidth), setBorderLeft(node.style.borderLeftWidth), setDisplay(node.style.display), setFlexDirection(node.style.flexDirection), setAlignSelf(node.style.alignSelf), setAlignContent(node.style.alignContent), setAlignItems(node.style.alignItems), setJustifyContent(node.style.justifyContent), setFlexWrap(node.style.flexWrap), setOverflow(node.style.overflow), setAspectRatio(node.style.aspectRatio), setFlexBasis(node.style.flexBasis), setFlexGrow(node.style.flexGrow), setFlexShrink(node.style.flexShrink), setRowGap(node.style.rowGap), setColumnGap(node.style.columnGap))(node);\n};\n/**\n * Inserts child into parent' yoga node\n *\n * @param parent parent\n * @returns Insert yoga nodes\n */\nconst insertYogaNodes = parent => child => {\n  parent.insertChild(child.yogaNode, parent.getChildCount());\n  return child;\n};\nconst setMeasureFunc = (node, page, fontStore) => {\n  const {\n    yogaNode\n  } = node;\n  if (isText$2(node)) {\n    yogaNode.setMeasureFunc(measureText(page, node, fontStore));\n  }\n  if (isImage(node)) {\n    yogaNode.setMeasureFunc(measureImage(page, node));\n  }\n  if (isCanvas(node)) {\n    yogaNode.setMeasureFunc(measureCanvas(page, node));\n  }\n  if (isSvg(node)) {\n    yogaNode.setMeasureFunc(measureCanvas$1(page, node));\n  }\n  return node;\n};\nconst isLayoutElement = node => !isText$2(node) && !isNote(node) && !isSvg(node);\n/**\n * @typedef {Function} CreateYogaNodes\n * @param {Object} node\n * @returns {Object} node with appended yoga node\n */\n/**\n * Creates and add yoga node to document tree\n * Handles measure function for text and image nodes\n *\n * @returns Create yoga nodes\n */\nconst createYogaNodes = (page, fontStore, yoga) => node => {\n  const yogaNode = yoga.node.create();\n  const result = Object.assign({}, node, {\n    yogaNode\n  });\n  setYogaValues(result);\n  if (isLayoutElement(node) && node.children) {\n    const resolveChild = compose(insertYogaNodes(yogaNode), createYogaNodes(page, fontStore, yoga));\n    result.children = node.children.map(resolveChild);\n  }\n  setMeasureFunc(result, page, fontStore);\n  return result;\n};\n/**\n * Performs yoga calculation\n *\n * @param page - Page node\n * @returns Page node\n */\nconst calculateLayout = page => {\n  page.yogaNode.calculateLayout();\n  return page;\n};\n/**\n * Saves Yoga layout result into 'box' attribute of node\n *\n * @param node\n * @returns Node with box data\n */\nconst persistDimensions = node => {\n  if (isTextInstance$1(node)) return node;\n  const box = Object.assign(getPadding(node), getMargin(node), getBorderWidth(node), getPosition(node), getDimension(node));\n  const newNode = Object.assign({}, node, {\n    box\n  });\n  if (!node.children) return newNode;\n  const children = node.children.map(persistDimensions);\n  return Object.assign({}, newNode, {\n    children\n  });\n};\n/**\n * Removes yoga node from document tree\n *\n * @param node\n * @returns Node without yoga node\n */\nconst destroyYogaNodes = node => {\n  const newNode = Object.assign({}, node);\n  delete newNode.yogaNode;\n  if (!node.children) return newNode;\n  const children = node.children.map(destroyYogaNodes);\n  return Object.assign({}, newNode, {\n    children\n  });\n};\n/**\n * Free yoga node from document tree\n *\n * @param node\n * @returns Node without yoga node\n */\nconst freeYogaNodes = node => {\n  if (node.yogaNode) node.yogaNode.freeRecursive();\n  return node;\n};\n/**\n * Calculates page object layout using Yoga.\n * Takes node values from 'box' and 'style' attributes, and persist them back into 'box'\n * Destroy yoga values at the end.\n *\n * @param page - Object\n * @returns Page object with correct 'box' layout attributes\n */\nconst resolvePageDimensions = (page, fontStore, yoga) => {\n  if (isNil(page)) return null;\n  return compose(destroyYogaNodes, freeYogaNodes, persistDimensions, calculateLayout, createYogaNodes(page, fontStore, yoga))(page);\n};\n/**\n * Calculates root object layout using Yoga.\n *\n * @param node - Root object\n * @param fontStore - Font store\n * @returns Root object with correct 'box' layout attributes\n */\nconst resolveDimensions = (node, fontStore) => {\n  if (!node.children) return node;\n  const resolveChild = child => resolvePageDimensions(child, fontStore, node.yoga);\n  const children = node.children.map(resolveChild);\n  return Object.assign({}, node, {\n    children\n  });\n};\nconst isText$1 = node => node.type === P.Text;\n// Prevent splitting elements by low decimal numbers\nconst SAFETY_THRESHOLD = 0.001;\nconst assingChildren = (children, node) => Object.assign({}, node, {\n  children\n});\nconst getTop = node => node.box?.top || 0;\nconst allFixed = nodes => nodes.every(isFixed);\nconst isDynamic = node => node.props && 'render' in node.props;\nconst relayoutPage = compose(resolveTextLayout, resolvePageDimensions, resolveInheritance, resolvePageStyles);\nconst warnUnavailableSpace = node => {\n  console.warn(`Node of type ${node.type} can't wrap between pages and it's bigger than available page height`);\n};\nconst splitNodes = (height, contentArea, nodes) => {\n  const currentChildren = [];\n  const nextChildren = [];\n  for (let i = 0; i < nodes.length; i += 1) {\n    const child = nodes[i];\n    const futureNodes = nodes.slice(i + 1);\n    const futureFixedNodes = futureNodes.filter(isFixed);\n    const nodeTop = getTop(child);\n    const nodeHeight = child.box.height;\n    const isOutside = height <= nodeTop;\n    const shouldBreak$1 = shouldBreak(child, futureNodes, height);\n    const shouldSplit = height + SAFETY_THRESHOLD < nodeTop + nodeHeight;\n    const canWrap = getWrap(child);\n    const fitsInsidePage = nodeHeight <= contentArea;\n    if (isFixed(child)) {\n      nextChildren.push(child);\n      currentChildren.push(child);\n      continue;\n    }\n    if (isOutside) {\n      const box = Object.assign({}, child.box, {\n        top: child.box.top - height\n      });\n      const next = Object.assign({}, child, {\n        box\n      });\n      nextChildren.push(next);\n      continue;\n    }\n    if (!fitsInsidePage && !canWrap) {\n      currentChildren.push(child);\n      nextChildren.push(...futureNodes);\n      warnUnavailableSpace(child);\n      break;\n    }\n    if (shouldBreak$1) {\n      const box = Object.assign({}, child.box, {\n        top: child.box.top - height\n      });\n      const props = Object.assign({}, child.props, {\n        wrap: true,\n        break: false\n      });\n      const next = Object.assign({}, child, {\n        box,\n        props\n      });\n      currentChildren.push(...futureFixedNodes);\n      nextChildren.push(next, ...futureNodes);\n      break;\n    }\n    if (shouldSplit) {\n      const [currentChild, nextChild] = split(child, height, contentArea);\n      // All children are moved to the next page, it doesn't make sense to show the parent on the current page\n      if (child.children.length > 0 && currentChild.children.length === 0) {\n        // But if the current page is empty then we can just include the parent on the current page\n        if (currentChildren.length === 0) {\n          currentChildren.push(child, ...futureFixedNodes);\n          nextChildren.push(...futureNodes);\n        } else {\n          const box = Object.assign({}, child.box, {\n            top: child.box.top - height\n          });\n          const next = Object.assign({}, child, {\n            box\n          });\n          currentChildren.push(...futureFixedNodes);\n          nextChildren.push(next, ...futureNodes);\n        }\n        break;\n      }\n      if (currentChild) currentChildren.push(currentChild);\n      if (nextChild) nextChildren.push(nextChild);\n      continue;\n    }\n    currentChildren.push(child);\n  }\n  return [currentChildren, nextChildren];\n};\nconst splitChildren = (height, contentArea, node) => {\n  const children = node.children || [];\n  const availableHeight = height - getTop(node);\n  return splitNodes(availableHeight, contentArea, children);\n};\nconst splitView = (node, height, contentArea) => {\n  const [currentNode, nextNode] = splitNode(node, height);\n  const [currentChilds, nextChildren] = splitChildren(height, contentArea, node);\n  return [assingChildren(currentChilds, currentNode), assingChildren(nextChildren, nextNode)];\n};\nconst split = (node, height, contentArea) => isText$1(node) ? splitText(node, height) : splitView(node, height, contentArea);\nconst shouldResolveDynamicNodes = node => {\n  const children = node.children || [];\n  return isDynamic(node) || children.some(shouldResolveDynamicNodes);\n};\nconst resolveDynamicNodes = (props, node) => {\n  const isNodeDynamic = isDynamic(node);\n  // Call render prop on dynamic nodes and append result to children\n  const resolveChildren = function () {\n    let children = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    if (isNodeDynamic) {\n      const res = node.props.render(props);\n      return createInstances(res).filter(Boolean)\n      // @ts-expect-error rework dynamic nodes. conflicting types\n      .map(n => resolveDynamicNodes(props, n));\n    }\n    return children.map(c => resolveDynamicNodes(props, c));\n  };\n  // We reset dynamic text box so it can be computed again later on\n  const resetHeight = isNodeDynamic && isText$1(node);\n  const box = resetHeight ? {\n    ...node.box,\n    height: 0\n  } : node.box;\n  const children = resolveChildren(node.children);\n  // @ts-expect-error handle text here specifically\n  const lines = isNodeDynamic ? null : node.lines;\n  return Object.assign({}, node, {\n    box,\n    lines,\n    children\n  });\n};\nconst resolveDynamicPage = (props, page, fontStore, yoga) => {\n  if (shouldResolveDynamicNodes(page)) {\n    const resolvedPage = resolveDynamicNodes(props, page);\n    return relayoutPage(resolvedPage, fontStore, yoga);\n  }\n  return page;\n};\nconst splitPage = (page, pageNumber, fontStore, yoga) => {\n  const wrapArea = getWrapArea(page);\n  const contentArea = getContentArea(page);\n  const dynamicPage = resolveDynamicPage({\n    pageNumber\n  }, page, fontStore, yoga);\n  const height = page.style.height;\n  const [currentChilds, nextChilds] = splitNodes(wrapArea, contentArea, dynamicPage.children);\n  const relayout = node =>\n  // @ts-expect-error rework pagination\n  relayoutPage(node, fontStore, yoga);\n  const currentBox = {\n    ...page.box,\n    height\n  };\n  const currentPage = relayout(Object.assign({}, page, {\n    box: currentBox,\n    children: currentChilds\n  }));\n  if (nextChilds.length === 0 || allFixed(nextChilds)) return [currentPage, null];\n  const nextBox = omit('height', page.box);\n  const nextProps = omit('bookmark', page.props);\n  const nextPage = relayout(Object.assign({}, page, {\n    props: nextProps,\n    box: nextBox,\n    children: nextChilds\n  }));\n  return [currentPage, nextPage];\n};\nconst resolvePageIndices = (fontStore, yoga, page, pageNumber, pages) => {\n  const totalPages = pages.length;\n  const props = {\n    totalPages,\n    pageNumber: pageNumber + 1,\n    subPageNumber: page.subPageNumber + 1,\n    subPageTotalPages: page.subPageTotalPages\n  };\n  return resolveDynamicPage(props, page, fontStore, yoga);\n};\nconst assocSubPageData = subpages => {\n  return subpages.map((page, i) => ({\n    ...page,\n    subPageNumber: i,\n    subPageTotalPages: subpages.length\n  }));\n};\nconst dissocSubPageData = page => {\n  return omit(['subPageNumber', 'subPageTotalPages'], page);\n};\nconst paginate = (page, pageNumber, fontStore, yoga) => {\n  if (!page) return [];\n  if (page.props?.wrap === false) return [page];\n  let splittedPage = splitPage(page, pageNumber, fontStore, yoga);\n  const pages = [splittedPage[0]];\n  let nextPage = splittedPage[1];\n  while (nextPage !== null) {\n    splittedPage = splitPage(nextPage, pageNumber + pages.length, fontStore, yoga);\n    pages.push(splittedPage[0]);\n    nextPage = splittedPage[1];\n  }\n  return pages;\n};\n/**\n * Performs pagination. This is the step responsible of breaking the whole document\n * into pages following pagiation rules, such as `fixed`, `break` and dynamic nodes.\n *\n * @param root - Document node\n * @param fontStore - Font store\n * @returns Layout node\n */\nconst resolvePagination = (root, fontStore) => {\n  let pages = [];\n  let pageNumber = 1;\n  for (let i = 0; i < root.children.length; i += 1) {\n    const page = root.children[i];\n    let subpages = paginate(page, pageNumber, fontStore, root.yoga);\n    subpages = assocSubPageData(subpages);\n    pageNumber += subpages.length;\n    pages = pages.concat(subpages);\n  }\n  pages = pages.map(function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return dissocSubPageData(resolvePageIndices(fontStore, root.yoga, ...args));\n  });\n  return assingChildren(pages, root);\n};\n\n/**\n * Translates page percentage horizontal paddings in fixed ones\n *\n * @param container - Page container\n * @returns Resolve page horizontal padding\n */\nconst resolvePageHorizontalPadding = container => value => {\n  const match = matchPercent(value);\n  const width = container.width;\n  return match ? match.percent * width : value;\n};\n/**\n * Translates page percentage vertical paddings in fixed ones\n *\n * @param container - Page container\n * @returns Resolve page vertical padding\n */\nconst resolvePageVerticalPadding = container => value => {\n  const match = matchPercent(value);\n  const height = container.height;\n  return match ? match.percent * height : value;\n};\n/**\n * Translates page percentage paddings in fixed ones\n *\n * @param page\n * @returns Page with fixed paddings\n */\nconst resolvePagePaddings = page => {\n  const container = page.style;\n  const style = evolve({\n    paddingTop: resolvePageVerticalPadding(container),\n    paddingLeft: resolvePageHorizontalPadding(container),\n    paddingRight: resolvePageHorizontalPadding(container),\n    paddingBottom: resolvePageVerticalPadding(container)\n  }, page.style);\n  return Object.assign({}, page, {\n    style\n  });\n};\n/**\n * Translates all pages percentage paddings in fixed ones\n * This has to be computed from pages calculated size and not by Yoga\n * because at this point we didn't performed pagination yet.\n *\n * @param root - Document root\n * @returns Document root with translated page paddings\n */\nconst resolvePagesPaddings = root => {\n  if (!root.children) return root;\n  const children = root.children.map(resolvePagePaddings);\n  return Object.assign({}, root, {\n    children\n  });\n};\nconst resolveRadius = box => value => {\n  if (!value) return undefined;\n  const match = matchPercent(value);\n  return match ? match.percent * Math.min(box.width, box.height) : value;\n};\n/**\n * Transforms percent border radius into fixed values\n *\n * @param node\n * @returns Node\n */\nconst resolvePercentRadius = node => {\n  const style = evolve({\n    borderTopLeftRadius: resolveRadius(node.box),\n    borderTopRightRadius: resolveRadius(node.box),\n    borderBottomRightRadius: resolveRadius(node.box),\n    borderBottomLeftRadius: resolveRadius(node.box)\n  }, node.style || {});\n  const newNode = Object.assign({}, node, {\n    style\n  });\n  if (!node.children) return newNode;\n  const children = node.children.map(resolvePercentRadius);\n  return Object.assign({}, newNode, {\n    children\n  });\n};\n\n/**\n * Transform percent height into fixed\n *\n * @param height\n * @returns Height\n */\nconst transformHeight = (pageArea, height) => {\n  const match = matchPercent(height);\n  return match ? match.percent * pageArea : height;\n};\n/**\n * Get page area (height minus paddings)\n *\n * @param page\n * @returns Page area\n */\nconst getPageArea = page => {\n  const pageHeight = page.style.height;\n  const pagePaddingTop = page.style?.paddingTop || 0;\n  const pagePaddingBottom = page.style?.paddingBottom || 0;\n  return pageHeight - pagePaddingTop - pagePaddingBottom;\n};\n/**\n * Transform node percent height to fixed\n *\n * @param page\n * @param node\n * @returns Transformed node\n */\nconst resolveNodePercentHeight = (page, node) => {\n  if (isNil(page.style?.height)) return node;\n  if (isNil(node.style?.height)) return node;\n  const pageArea = getPageArea(page);\n  const height = transformHeight(pageArea, node.style.height);\n  const style = Object.assign({}, node.style, {\n    height\n  });\n  return Object.assign({}, node, {\n    style\n  });\n};\n/**\n * Transform page immediate children with percent height to fixed\n *\n * @param page\n * @returns Transformed page\n */\nconst resolvePagePercentHeight = page => {\n  if (!page.children) return page;\n  const resolveChild = child => resolveNodePercentHeight(page, child);\n  const children = page.children.map(resolveChild);\n  return Object.assign({}, page, {\n    children\n  });\n};\n/**\n * Transform all page immediate children with percent height to fixed.\n * This is needed for computing correct dimensions on pre-pagination layout.\n *\n * @param root - Document root\n * @returns Transformed document root\n */\nconst resolvePercentHeight = root => {\n  if (!root.children) return root;\n  const children = root.children.map(resolvePagePercentHeight);\n  return Object.assign({}, root, {\n    children\n  });\n};\nconst isType = type => node => node.type === type;\nconst isLink = isType(P.Link);\nconst isText = isType(P.Text);\nconst isTextInstance = isType(P.TextInstance);\n/**\n * Checks if node has render prop\n *\n * @param node\n * @returns Has render prop?\n */\nconst hasRenderProp = node => 'render' in node.props;\n/**\n * Checks if node is text type (Text or TextInstance)\n *\n * @param node\n * @returns Are all children text instances?\n */\nconst isTextType = node => isText(node) || isTextInstance(node);\n/**\n * Checks if is tet link that needs to be wrapped in Text\n *\n * @param node\n * @returns Are all children text instances?\n */\nconst isTextLink = node => {\n  const children = node.children || [];\n  // Text string inside a Link\n  if (children.every(isTextInstance)) return true;\n  // Text node inside a Link\n  if (children.every(isText)) return false;\n  return children.every(isTextType);\n};\n/**\n * Wraps node children inside Text node\n *\n * @param node\n * @returns Node with intermediate Text child\n */\nconst wrapText = node => {\n  const textElement = {\n    type: P.Text,\n    props: {},\n    style: {},\n    box: {},\n    children: node.children\n  };\n  return Object.assign({}, node, {\n    children: [textElement]\n  });\n};\nconst transformLink = node => {\n  if (!isLink(node)) return node;\n  // If has render prop substitute the instance by a Text, that will\n  // ultimately render the inline Link via the textkit PDF renderer.\n  if (hasRenderProp(node)) return Object.assign({}, node, {\n    type: P.Text\n  });\n  // If is a text link (either contains Text or TextInstance), wrap it\n  // inside a Text element so styles are applied correctly\n  if (isTextLink(node)) return wrapText(node);\n  return node;\n};\n/**\n * Transforms Link layout to correctly render text and dynamic rendered links\n *\n * @param node\n * @returns Node with link substitution\n */\nconst resolveLinkSubstitution = node => {\n  if (!node.children) return node;\n  const resolveChild = compose(transformLink, resolveLinkSubstitution);\n  const children = node.children.map(resolveChild);\n  return Object.assign({}, node, {\n    children\n  });\n};\nconst layout = asyncCompose(resolveZIndex, resolveOrigin, resolveAssets, resolvePagination, resolveTextLayout, resolvePercentRadius, resolveDimensions, resolveSvg, resolveAssets, resolveInheritance, resolvePercentHeight, resolvePagesPaddings, resolveStyles, resolveLinkSubstitution, resolveBookmarks, resolvePageSizes, resolveYoga);\nexport { layout as default };","map":{"version":3,"names":["upperFirst","capitalize","parseFloat","parseFloat$1","without","pick","compose","evolve","mapValues","matchPercent","castArray","isNil","omit","asyncCompose","P","resolveStyle","transformColor","flatten","layoutEngine","fontSubstitution","wordHyphenation","scriptItemizer","textDecoration","justification","linebreaker","bidi","fromFragments","Yoga","loadYoga","loadYoga$1","emojiRegex","resolveImage","transformText","text","transformation","toUpperCase","toLowerCase","isTspan","node","type","Tspan","isTextInstance$4","TextInstance","engines$1","engine$1","getFragments$1","fontStore","instance","string","fragments","fill","fontFamily","fontWeight","fontStyle","fontSize","textDecorationColor","textDecorationStyle","textTransform","opacity","props","_textDecoration","fontFamilies","push","font","map","fontFamilyName","opts","obj","getFont","data","attributes","color","underlineStyle","underline","underlineColor","strike","strikeStyle","strikeColor","i","children","length","child","value","getAttributedString$1","AlmostInfinity","shrinkWhitespaceFactor","before","after","layoutTspan","xOffset","attributedString","x","undefined","y","container","width","height","hyphenationCallback","getHyphenationCallback","layoutOptions","lines","flat","Object","assign","joinTSpanLines","index","textInstance","layoutText$1","currentXOffset","layoutFn","joinedNode","childWithLayout","xAdvance","isDefs","Defs","getDefs","defs","find","values","reduce","acc","id","isNotDefs","detachDefs","filter","URL_REGEX","replaceDef","test","match","parseNodeDefs","clipPath","newProps","parseDefs","root","replaceDefs","parseViewbox","split","minX","minY","maxX","maxY","getContainer$1","viewbox","viewBox","BASE_SVG_INHERITED_PROPS","TEXT_SVG_INHERITED_PROPS","SVG_INHERITED_PROPS","Text","getInheritProps","svgInheritedProps","inheritProps","inheritedProps","newChild","parseAspectRatio","replace","align","meetOrSlice","STYLE_PROPS","VERTICAL_PROPS","HORIZONTAL_PROPS","isSvg$3","Svg","isText$5","isTextInstance$3","transformPercent","key","includes","percent","parsePercent","parseTransform","transform","parseProps","x1","x2","y1","y2","r","rx","ry","cx","cy","offset","stroke","stopOpacity","stopColor","gradientTransform","mergeStyles$1","style","removeNoneValues","removeNone","pickStyleProps","styleProps","parseSvgProps","preserveAspectRatio","wrapBetweenTspan","addMissingTspan","resolveChild","parseText","resolveSvgNode","resolveChildren","buildXLinksIndex","idIndex","listToExplore","slice","shift","replaceXLinks","linkedNode","xlinkHref","resolveXLinks","resolveSvgRoot","resolveSvg","instancePromise","config","Config","create","setPointScaleFactor","Node","createWithConfig","resolveYoga","yoga","getZIndex","zIndex","shouldSort","Document","sortZIndex","a","b","za","zb","resolveNodeZIndex","sortedChildren","sort","resolveZIndex","emojis","regex","removeVariationSelectors","getCodePoints","withVariationSelectors","arguments","Array","from","char","codePointAt","toString","join","buildEmojiUrl","emoji","source","builder","url","format","fetchEmojis","promises","matchAll","forEach","loading","emojiUrl","uri","then","image","embedEmojis","result","fragment","lastIndex","emojiSize","chunk","String","fromCharCode","attachment","yOffset","Math","floor","getSource","src","resolveSource","fetchImage","cache","console","warn","Error","Buffer","isBuffer","Blob","e","message","isImage$2","Image","fetchAssets","emojiSource","getEmojiSource","n","load","childNode","resolveAssets","Promise","all","isLink$1","Link","DEFAULT_LINK_STYLES","computeStyle","baseStyle","isArray","resolveNodeStyles","resolvePageStyles","page","dpi","box","orientation","remBase","resolveStyles","getTransformStyle","s","getOrigin","left","top","transformOriginX","transformOriginY","percentX","percentY","offsetX","offsetY","resolveNodeOrigin","origin","newNode","resolveOrigin","getBookmarkValue","bookmark","title","fit","expanded","resolveBookmarks","refs","parent","element","ref","newHierarchy","VALID_ORIENTATIONS","getOrientation","isLandscape","PAGE_SIZES","A0","A1","A2","A3","A4","A5","A6","A7","A8","A9","A10","B0","B1","B2","B3","B4","B5","B6","B7","B8","B9","B10","C0","C1","C2","C3","C4","C5","C6","C7","C8","C9","C10","RA0","RA1","RA2","RA3","RA4","SRA0","SRA1","SRA2","SRA3","SRA4","EXECUTIVE","FOLIO","LEGAL","LETTER","TABLOID","ID1","parseValue","unit","exec","transformUnit","inputDpi","scalar","outputDpi","mmFactor","cmFactor","round","transformUnits","_ref","toSizeObject","v","flipSizeObject","getStringSize","getNumberSize","getSize","size","resolvePageSize","resolvePageSizes","isFixed","fixed","lineIndexAtHeight","line","heightAtLineIndex","counter","getLineBreak","widows","orphans","linesQuantity","slicedLine","splitText","slicedLineIndex","currentHeight","nextHeight","current","borderBottomWidth","marginBottom","paddingBottom","borderBottomLeftRadius","borderBottomRightRadius","next","borderTopWidth","marginTop","paddingTop","borderTopLeftRadius","borderTopRightRadius","getTop$1","hasFixedHeight","splitNode","nodeTop","NON_WRAP_TYPES","Note","Canvas","getWrap","wrap","getComputedPadding","edge","yogaNode","getPadding","Edge","Top","paddingRight","Right","Bottom","paddingLeft","Left","getWrapArea","getContentArea","isString","isNumber","isBoolean","isFragment","Symbol","for","createInstances","el","concat","nextChildren","getBreak","break","getMinPresenceAhead","minPresenceAhead","getFurthestEnd","elements","max","getEndOfMinPresenceAhead","getEndOfPresence","futureElements","afterMinPresenceAhead","endOfFurthestFutureElement","min","shouldBreak","shouldSplit","canWrap","endOfPresence","breakingImprovesPresence","IGNORABLE_CODEPOINTS","buildSubsetForFont","codePoint","hasGlyphForCodePoint","ignoreChars","charSubset","subsetRegex","RegExp","PREPROCESSORS","isImage$1","isTextInstance$2","getFragments","parentLink","level","direction","textAlign","lineHeight","letterSpacing","textIndent","verticalAlign","backgroundColor","indent","characterSpacing","link","href","preprocessor","getAttributedString","engines","engine","getMaxLines","maxLines","getTextOverflow","textOverflow","getContainer","Infinity","truncateMode","getLayoutOptions","hyphenationPenalty","layoutText","options","isSvg$2","isText$4","shouldIterate","shouldLayoutText","resolveTextLayout","mapChild","BASE_INHERITABLE_PROPERTIES","TEXT_INHERITABLE_PROPERTIES","isType$2","isSvg$1","isText$3","mergeValues","styleName","inheritedValue","merge","inheritedStyles","mergedStyles","entries","_ref2","mergeStyles","resolveInheritance","inheritableProperties","inheritStyles","getComputedMargin","getMargin","marginRight","marginLeft","getPosition","getComputedTop","right","getComputedRight","bottom","getComputedBottom","getComputedLeft","DEFAULT_DIMENSION","getDimension","getComputedWidth","getComputedHeight","getComputedBorder","getBorderWidth","borderRightWidth","borderLeftWidth","setDisplay","Display","None","Flex","OVERFLOW","hidden","Overflow","Hidden","scroll","Scroll","setOverflow","overflow","Visible","FLEX_WRAP","Wrap","WrapReverse","setFlexWrap","flexWrap","NoWrap","setYogaValue","attr","hasEdge","fixedMethod","autoMethod","percentMethod","setFlexGrow","setFlexBasis","ALIGN","Align","FlexStart","center","Center","FlexEnd","stretch","Stretch","baseline","Baseline","SpaceBetween","SpaceAround","SpaceEvenly","setAlign","defaultValue","Auto","setAlignSelf","setAlignItems","setFlexShrink","setAspectRatio","setAlignContent","POSITION","absolute","PositionType","Absolute","relative","Relative","static","Static","setPositionType","FLEX_DIRECTIONS","row","FlexDirection","Row","RowReverse","ColumnReverse","setFlexDirection","flexDirection","Column","JUSTIFY_CONTENT","Justify","setJustifyContent","justifyContent","setMarginTop","setMarginRight","setMarginBottom","setMarginLeft","setPaddingTop","setPaddingRight","setPaddingBottom","setPaddingLeft","setBorderTop","setBorderRight","setBorderBottom","setBorderLeft","setPositionTop","setPositionRight","setPositionBottom","setPositionLeft","setWidth","setMinWidth","setMaxWidth","setHeight","setMinHeight","setMaxHeight","setRowGap","Gutter","setColumnGap","getAspectRatio","measureCanvas$1","widthMode","heightMode","aspectRatio","MeasureMode","Exactly","AtMost","linesWidth","linesHeight","ALIGNMENT_FACTORS","measureText","alignFactor","alignOffset","getRatio","isHeightAuto","SAFETY_HEIGHT$1","measureImage","imageRatio","imageMargin","pagePadding","pageArea","Undefined","scaledHeight","SAFETY_HEIGHT","getMax","measureCtx","ctx","points","nil","addPoint","moveTo","rect","w","h","ellipse","polygon","lineTo","circle","roundedRect","path","lineWidth","bezierCurveTo","quadraticCurveTo","scale","rotate","translate","dash","clip","save","lineCap","restore","lineJoin","fillColor","miterLimit","strokeColor","fillOpacity","strokeOpacity","linearGradient","radialGradient","getWidth","p","getHeight","measureCanvas","paint","isType$1","isSvg","isText$2","isNote","isPage","Page","isImage","isCanvas","isTextInstance$1","setNodeHeight","setYogaValues","minWidth","maxWidth","minHeight","maxHeight","position","display","alignSelf","alignContent","alignItems","flexBasis","flexGrow","flexShrink","rowGap","columnGap","insertYogaNodes","insertChild","getChildCount","setMeasureFunc","isLayoutElement","createYogaNodes","calculateLayout","persistDimensions","destroyYogaNodes","freeYogaNodes","freeRecursive","resolvePageDimensions","resolveDimensions","isText$1","SAFETY_THRESHOLD","assingChildren","getTop","allFixed","nodes","every","isDynamic","relayoutPage","warnUnavailableSpace","splitNodes","contentArea","currentChildren","futureNodes","futureFixedNodes","nodeHeight","isOutside","shouldBreak$1","fitsInsidePage","currentChild","nextChild","splitChildren","availableHeight","splitView","currentNode","nextNode","currentChilds","shouldResolveDynamicNodes","some","resolveDynamicNodes","isNodeDynamic","res","render","Boolean","c","resetHeight","resolveDynamicPage","resolvedPage","splitPage","pageNumber","wrapArea","dynamicPage","nextChilds","relayout","currentBox","currentPage","nextBox","nextProps","nextPage","resolvePageIndices","pages","totalPages","subPageNumber","subPageTotalPages","assocSubPageData","subpages","dissocSubPageData","paginate","splittedPage","resolvePagination","_len","args","_key","resolvePageHorizontalPadding","resolvePageVerticalPadding","resolvePagePaddings","resolvePagesPaddings","resolveRadius","resolvePercentRadius","transformHeight","getPageArea","pageHeight","pagePaddingTop","pagePaddingBottom","resolveNodePercentHeight","resolvePagePercentHeight","resolvePercentHeight","isType","isLink","isText","isTextInstance","hasRenderProp","isTextType","isTextLink","wrapText","textElement","transformLink","resolveLinkSubstitution","layout","default"],"sources":["C:/Users/JS/testinge/node_modules/@react-pdf/layout/lib/index.js"],"sourcesContent":["import { upperFirst, capitalize, parseFloat as parseFloat$1, without, pick, compose, evolve, mapValues, matchPercent, castArray, isNil, omit, asyncCompose } from '@react-pdf/fns';\nimport * as P from '@react-pdf/primitives';\nimport resolveStyle, { transformColor, flatten } from '@react-pdf/stylesheet';\nimport layoutEngine, { fontSubstitution, wordHyphenation, scriptItemizer, textDecoration, justification, linebreaker, bidi, fromFragments } from '@react-pdf/textkit';\nimport * as Yoga from 'yoga-layout/load';\nimport { loadYoga as loadYoga$1 } from 'yoga-layout/load';\nimport emojiRegex from 'emoji-regex';\nimport resolveImage from '@react-pdf/image';\n\n/**\n * Apply transformation to text string\n *\n * @param {string} text\n * @param {string} transformation type\n * @returns {string} transformed text\n */\nconst transformText = (text, transformation) => {\n    switch (transformation) {\n        case 'uppercase':\n            return text.toUpperCase();\n        case 'lowercase':\n            return text.toLowerCase();\n        case 'capitalize':\n            return capitalize(text);\n        case 'upperfirst':\n            return upperFirst(text);\n        default:\n            return text;\n    }\n};\n\nconst isTspan = (node) => node.type === P.Tspan;\nconst isTextInstance$4 = (node) => node.type === P.TextInstance;\nconst engines$1 = {\n    bidi,\n    linebreaker,\n    justification,\n    textDecoration,\n    scriptItemizer,\n    wordHyphenation,\n    fontSubstitution,\n};\nconst engine$1 = layoutEngine(engines$1);\nconst getFragments$1 = (fontStore, instance) => {\n    if (!instance)\n        return [{ string: '' }];\n    const fragments = [];\n    const { fill = 'black', fontFamily = 'Helvetica', fontWeight, fontStyle, fontSize = 18, textDecorationColor, textDecorationStyle, textTransform, opacity, } = instance.props;\n    const _textDecoration = instance.props.textDecoration;\n    const fontFamilies = typeof fontFamily === 'string' ? [fontFamily] : [...(fontFamily || [])];\n    // Fallback font\n    fontFamilies.push('Helvetica');\n    const font = fontFamilies.map((fontFamilyName) => {\n        const opts = { fontFamily: fontFamilyName, fontWeight, fontStyle };\n        const obj = fontStore.getFont(opts);\n        return obj?.data;\n    });\n    const attributes = {\n        font,\n        opacity,\n        fontSize,\n        color: fill,\n        underlineStyle: textDecorationStyle,\n        underline: _textDecoration === 'underline' ||\n            _textDecoration === 'underline line-through' ||\n            _textDecoration === 'line-through underline',\n        underlineColor: textDecorationColor || fill,\n        strike: _textDecoration === 'line-through' ||\n            _textDecoration === 'underline line-through' ||\n            _textDecoration === 'line-through underline',\n        strikeStyle: textDecorationStyle,\n        strikeColor: textDecorationColor || fill,\n    };\n    for (let i = 0; i < instance.children.length; i += 1) {\n        const child = instance.children[i];\n        if (isTextInstance$4(child)) {\n            fragments.push({\n                string: transformText(child.value, textTransform),\n                attributes,\n            });\n        }\n        else if (child) {\n            fragments.push(...getFragments$1(fontStore, child));\n        }\n    }\n    return fragments;\n};\nconst getAttributedString$1 = (fontStore, instance) => fromFragments(getFragments$1(fontStore, instance));\nconst AlmostInfinity = 999999999999;\nconst shrinkWhitespaceFactor = { before: -0.5, after: -0.5 };\nconst layoutTspan = (fontStore) => (node, xOffset) => {\n    const attributedString = getAttributedString$1(fontStore, node);\n    const x = node.props.x === undefined ? xOffset : node.props.x;\n    const y = node.props?.y || 0;\n    const container = { x, y, width: AlmostInfinity, height: AlmostInfinity };\n    const hyphenationCallback = node.props.hyphenationCallback ||\n        fontStore?.getHyphenationCallback() ||\n        null;\n    const layoutOptions = { hyphenationCallback, shrinkWhitespaceFactor };\n    const lines = engine$1(attributedString, container, layoutOptions).flat();\n    return Object.assign({}, node, { lines });\n};\n// Consecutive TSpan elements should be joined with a space\nconst joinTSpanLines = (node) => {\n    const children = node.children.map((child, index) => {\n        if (!isTspan(child))\n            return child;\n        const textInstance = child.children[0];\n        if (child.props.x === undefined &&\n            index < node.children.length - 1 &&\n            textInstance?.value) {\n            return Object.assign({}, child, {\n                children: [{ ...textInstance, value: `${textInstance.value} ` }],\n            });\n        }\n        return child;\n    }, []);\n    return Object.assign({}, node, { children });\n};\nconst layoutText$1 = (fontStore, node) => {\n    if (!node.children)\n        return node;\n    let currentXOffset = node.props?.x || 0;\n    const layoutFn = layoutTspan(fontStore);\n    const joinedNode = joinTSpanLines(node);\n    const children = joinedNode.children.map((child) => {\n        const childWithLayout = layoutFn(child, currentXOffset);\n        currentXOffset += childWithLayout.lines[0].xAdvance;\n        return childWithLayout;\n    });\n    return Object.assign({}, node, { children });\n};\n\nconst isDefs = (node) => node.type === P.Defs;\nconst getDefs = (node) => {\n    const children = node.children || [];\n    const defs = children.find(isDefs);\n    const values = defs?.children || [];\n    return values.reduce((acc, value) => {\n        const id = value.props?.id;\n        if (id)\n            acc[id] = value;\n        return acc;\n    }, {});\n};\n\nconst isNotDefs = (node) => node.type !== P.Defs;\nconst detachDefs = (node) => {\n    if (!node.children)\n        return node;\n    const children = node.children.filter(isNotDefs);\n    return Object.assign({}, node, { children });\n};\nconst URL_REGEX = /url\\(['\"]?#([^'\"]+)['\"]?\\)/;\nconst replaceDef = (defs, value) => {\n    if (!value)\n        return undefined;\n    if (!URL_REGEX.test(value))\n        return value;\n    const match = value.match(URL_REGEX);\n    return defs[match[1]];\n};\nconst parseNodeDefs = (defs) => (node) => {\n    const props = node.props;\n    const fill = `fill` in props ? replaceDef(defs, props?.fill) : undefined;\n    const clipPath = `clipPath` in props\n        ? replaceDef(defs, props?.clipPath)\n        : undefined;\n    const newProps = Object.assign({}, node.props, { fill, clipPath });\n    const children = node.children\n        ? node.children.map(parseNodeDefs(defs))\n        : undefined;\n    return Object.assign({}, node, { props: newProps, children });\n};\nconst parseDefs = (root) => {\n    if (!root.children)\n        return root;\n    const defs = getDefs(root);\n    const children = root.children.map(parseNodeDefs(defs));\n    return Object.assign({}, root, { children });\n};\nconst replaceDefs = (node) => {\n    return detachDefs(parseDefs(node));\n};\n\nconst parseViewbox = (value) => {\n    if (!value)\n        return null;\n    if (typeof value !== 'string')\n        return value;\n    const values = value.split(/[,\\s]+/).map(parseFloat$1);\n    if (values.length !== 4)\n        return null;\n    return { minX: values[0], minY: values[1], maxX: values[2], maxY: values[3] };\n};\n\nconst getContainer$1 = (node) => {\n    const viewbox = parseViewbox(node.props.viewBox);\n    if (viewbox) {\n        return { width: viewbox.maxX, height: viewbox.maxY };\n    }\n    if (node.props.width && node.props.height) {\n        return {\n            width: parseFloat$1(node.props.width),\n            height: parseFloat$1(node.props.height),\n        };\n    }\n    return { width: 0, height: 0 };\n};\n\nconst BASE_SVG_INHERITED_PROPS = [\n    'x',\n    'y',\n    'clipPath',\n    'clipRule',\n    'opacity',\n    'fill',\n    'fillOpacity',\n    'fillRule',\n    'stroke',\n    'strokeLinecap',\n    'strokeLinejoin',\n    'strokeOpacity',\n    'strokeWidth',\n    'textAnchor',\n    'dominantBaseline',\n    'color',\n    'fontFamily',\n    'fontSize',\n    'fontStyle',\n    'fontWeight',\n    'letterSpacing',\n    'opacity',\n    'textDecoration',\n    'lineHeight',\n    'textAlign',\n    'visibility',\n    'wordSpacing',\n];\n// Do not inherit \"x\" for <tspan> elements from <text> parent\nconst TEXT_SVG_INHERITED_PROPS = without(['x'], BASE_SVG_INHERITED_PROPS);\nconst SVG_INHERITED_PROPS = {\n    [P.Text]: TEXT_SVG_INHERITED_PROPS,\n};\nconst getInheritProps = (node) => {\n    const props = node.props || {};\n    const svgInheritedProps = SVG_INHERITED_PROPS[node.type] ?? BASE_SVG_INHERITED_PROPS;\n    return pick(svgInheritedProps, props);\n};\nconst inheritProps = (node) => {\n    if (!node.children)\n        return node;\n    const inheritedProps = getInheritProps(node);\n    const children = node.children.map((child) => {\n        const props = Object.assign({}, inheritedProps, child.props || {});\n        const newChild = Object.assign({}, child, { props });\n        return inheritProps(newChild);\n    });\n    return Object.assign({}, node, { children });\n};\n\nconst parseAspectRatio = (value) => {\n    if (typeof value !== 'string')\n        return value;\n    const match = value\n        .replace(/[\\s\\r\\t\\n]+/gm, ' ')\n        .replace(/^defer\\s/, '')\n        .split(' ');\n    const align = (match[0] || 'xMidYMid');\n    const meetOrSlice = (match[1] ||\n        'meet');\n    return { align, meetOrSlice };\n};\n\nconst STYLE_PROPS = [\n    'width',\n    'height',\n    'color',\n    'stroke',\n    'strokeWidth',\n    'opacity',\n    'fillOpacity',\n    'strokeOpacity',\n    'fill',\n    'fillRule',\n    'clipPath',\n    'offset',\n    'transform',\n    'strokeLinejoin',\n    'strokeLinecap',\n    'strokeDasharray',\n    'gradientUnits',\n    'gradientTransform',\n];\nconst VERTICAL_PROPS = ['y', 'y1', 'y2', 'height', 'cy', 'ry'];\nconst HORIZONTAL_PROPS = ['x', 'x1', 'x2', 'width', 'cx', 'rx'];\nconst isSvg$3 = (node) => node.type === P.Svg;\nconst isText$5 = (node) => node.type === P.Text;\nconst isTextInstance$3 = (node) => node.type === P.TextInstance;\nconst transformPercent = (container) => (props) => mapValues(props, (value, key) => {\n    const match = matchPercent(value);\n    if (match && VERTICAL_PROPS.includes(key)) {\n        return match.percent * container.height;\n    }\n    if (match && HORIZONTAL_PROPS.includes(key)) {\n        return match.percent * container.width;\n    }\n    return value;\n});\nconst parsePercent = (value) => {\n    const match = matchPercent(value);\n    return match ? match.percent : parseFloat$1(value);\n};\nconst parseTransform = (container) => (value) => {\n    return resolveStyle(container, { transform: value }).transform;\n};\nconst parseProps = (container) => (node) => {\n    let props = transformPercent(container)(node.props);\n    props = evolve({\n        x: parseFloat$1,\n        x1: parseFloat$1,\n        x2: parseFloat$1,\n        y: parseFloat$1,\n        y1: parseFloat$1,\n        y2: parseFloat$1,\n        r: parseFloat$1,\n        rx: parseFloat$1,\n        ry: parseFloat$1,\n        cx: parseFloat$1,\n        cy: parseFloat$1,\n        width: parseFloat$1,\n        height: parseFloat$1,\n        offset: parsePercent,\n        fill: transformColor,\n        opacity: parsePercent,\n        stroke: transformColor,\n        stopOpacity: parsePercent,\n        stopColor: transformColor,\n        transform: parseTransform(container),\n        gradientTransform: parseTransform(container),\n    }, props);\n    return Object.assign({}, node, { props });\n};\nconst mergeStyles$1 = (node) => {\n    const style = node.style || {};\n    const props = Object.assign({}, style, node.props);\n    return Object.assign({}, node, { props });\n};\nconst removeNoneValues = (node) => {\n    const removeNone = (value) => (value === 'none' ? null : value);\n    const props = mapValues(node.props, removeNone);\n    return Object.assign({}, node, { props });\n};\nconst pickStyleProps = (node) => {\n    const props = node.props || {};\n    const styleProps = pick(STYLE_PROPS, props);\n    const style = Object.assign({}, styleProps, node.style || {});\n    return Object.assign({}, node, { style });\n};\nconst parseSvgProps = (node) => {\n    const props = evolve({\n        width: parseFloat$1,\n        height: parseFloat$1,\n        viewBox: parseViewbox,\n        preserveAspectRatio: parseAspectRatio,\n    }, node.props);\n    return Object.assign({}, node, { props });\n};\nconst wrapBetweenTspan = (node) => ({\n    type: P.Tspan,\n    props: {},\n    style: {},\n    children: [node],\n});\nconst addMissingTspan = (node) => {\n    if (!isText$5(node))\n        return node;\n    if (!node.children)\n        return node;\n    const resolveChild = (child) => isTextInstance$3(child) ? wrapBetweenTspan(child) : child;\n    const children = node.children.map(resolveChild);\n    return Object.assign({}, node, { children });\n};\nconst parseText = (fontStore) => (node) => {\n    if (isText$5(node))\n        return layoutText$1(fontStore, node);\n    if (!node.children)\n        return node;\n    const children = node.children.map(parseText(fontStore));\n    return Object.assign({}, node, { children });\n};\nconst resolveSvgNode = (container) => compose(parseProps(container), addMissingTspan, removeNoneValues, mergeStyles$1);\nconst resolveChildren = (container) => (node) => {\n    if (!node.children)\n        return node;\n    const resolveChild = compose(resolveChildren(container), resolveSvgNode(container));\n    const children = node.children.map(resolveChild);\n    return Object.assign({}, node, { children });\n};\nconst buildXLinksIndex = (node) => {\n    const idIndex = {};\n    const listToExplore = node.children?.slice(0) || [];\n    while (listToExplore.length > 0) {\n        const child = listToExplore.shift();\n        if (child.props && 'id' in child.props) {\n            idIndex[child.props.id] = child;\n        }\n        if (child.children)\n            listToExplore.push(...child.children);\n    }\n    return idIndex;\n};\nconst replaceXLinks = (node, idIndex) => {\n    if (node.props && 'xlinkHref' in node.props) {\n        const linkedNode = idIndex[node.props.xlinkHref.replace(/^#/, '')];\n        // No node to extend from\n        if (!linkedNode)\n            return node;\n        const newProps = Object.assign({}, linkedNode.props, node.props);\n        delete newProps.xlinkHref;\n        return Object.assign({}, linkedNode, { props: newProps });\n    }\n    const children = node.children?.map((child) => replaceXLinks(child, idIndex));\n    return Object.assign({}, node, { children });\n};\nconst resolveXLinks = (node) => {\n    const idIndex = buildXLinksIndex(node);\n    return replaceXLinks(node, idIndex);\n};\nconst resolveSvgRoot = (node, fontStore) => {\n    const container = getContainer$1(node);\n    return compose(replaceDefs, parseText(fontStore), parseSvgProps, pickStyleProps, inheritProps, resolveChildren(container), resolveXLinks)(node);\n};\n/**\n * Pre-process SVG nodes so they can be rendered in the next steps\n *\n * @param node - Root node\n * @param fontStore - Font store\n * @returns Root node\n */\nconst resolveSvg = (node, fontStore) => {\n    if (!('children' in node))\n        return node;\n    const resolveChild = (child) => resolveSvg(child, fontStore);\n    const root = isSvg$3(node) ? resolveSvgRoot(node, fontStore) : node;\n    const children = root.children?.map(resolveChild);\n    return Object.assign({}, root, { children });\n};\n\nlet instancePromise;\nconst loadYoga = async () => {\n    // Yoga WASM binaries must be asynchronously compiled and loaded\n    // to prevent Event emitter memory leak warnings, Yoga must be loaded only once\n    const instance = await (instancePromise ??= loadYoga$1());\n    const config = instance.Config.create();\n    config.setPointScaleFactor(0);\n    const node = { create: () => instance.Node.createWithConfig(config) };\n    return { node };\n};\n\nconst resolveYoga = async (root) => {\n    const yoga = await loadYoga();\n    return Object.assign({}, root, { yoga });\n};\n\nconst getZIndex = (node) => node.style.zIndex;\nconst shouldSort = (node) => node.type !== P.Document && node.type !== P.Svg;\nconst sortZIndex = (a, b) => {\n    const za = getZIndex(a);\n    const zb = getZIndex(b);\n    if (!za && !zb)\n        return 0;\n    if (!za)\n        return 1;\n    if (!zb)\n        return -1;\n    return zb - za;\n};\n/**\n * Sort children by zIndex value\n *\n * @param node\n * @returns Node\n */\nconst resolveNodeZIndex = (node) => {\n    if (!node.children)\n        return node;\n    const sortedChildren = shouldSort(node)\n        ? node.children.sort(sortZIndex)\n        : node.children;\n    const children = sortedChildren.map(resolveNodeZIndex);\n    return Object.assign({}, node, { children });\n};\n/**\n * Sort children by zIndex value\n *\n * @param node\n * @returns Node\n */\nconst resolveZIndex = (root) => resolveNodeZIndex(root);\n\n// Caches emoji images data\nconst emojis = {};\nconst regex = emojiRegex();\n/**\n * When an emoji as no variations, it might still have 2 parts,\n * the canonical emoji and an empty string.\n * ex.\n *   (no color) Array.from('❤️') => [\"❤\", \"️\"]\n *   (w/ color) Array.from('👍🏿') => [\"👍\", \"🏿\"]\n *\n * The empty string needs to be removed otherwise the generated\n * url will be incorect.\n */\nconst removeVariationSelectors = (x) => x !== '️';\nconst getCodePoints = (string, withVariationSelectors = false) => Array.from(string)\n    .filter(withVariationSelectors ? () => true : removeVariationSelectors)\n    .map((char) => char.codePointAt(0).toString(16))\n    .join('-');\nconst buildEmojiUrl = (emoji, source) => {\n    if ('builder' in source) {\n        return source.builder(getCodePoints(emoji, source.withVariationSelectors));\n    }\n    const { url, format = 'png', withVariationSelectors } = source;\n    return `${url}${getCodePoints(emoji, withVariationSelectors)}.${format}`;\n};\nconst fetchEmojis = (string, source) => {\n    if (!source)\n        return [];\n    const promises = [];\n    Array.from(string.matchAll(regex)).forEach((match) => {\n        const emoji = match[0];\n        if (!emojis[emoji] || emojis[emoji].loading) {\n            const emojiUrl = buildEmojiUrl(emoji, source);\n            emojis[emoji] = { loading: true };\n            promises.push(resolveImage({ uri: emojiUrl }).then((image) => {\n                emojis[emoji].loading = false;\n                emojis[emoji].data = image.data;\n            }));\n        }\n    });\n    return promises;\n};\nconst embedEmojis = (fragments) => {\n    const result = [];\n    for (let i = 0; i < fragments.length; i += 1) {\n        const fragment = fragments[i];\n        let lastIndex = 0;\n        Array.from(fragment.string.matchAll(regex)).forEach((match) => {\n            const { index } = match;\n            const emoji = match[0];\n            const emojiSize = fragment.attributes.fontSize;\n            const chunk = fragment.string.slice(lastIndex, index + match[0].length);\n            // If emoji image was found, we create a new fragment with the\n            // correct attachment and object substitution character;\n            if (emojis[emoji] && emojis[emoji].data) {\n                result.push({\n                    string: chunk.replace(match[0], String.fromCharCode(0xfffc)),\n                    attributes: {\n                        ...fragment.attributes,\n                        attachment: {\n                            width: emojiSize,\n                            height: emojiSize,\n                            yOffset: Math.floor(emojiSize * 0.1),\n                            image: emojis[emoji].data,\n                        },\n                    },\n                });\n            }\n            else {\n                // If no emoji data, we try to use emojis in the font\n                result.push({\n                    string: chunk,\n                    attributes: fragment.attributes,\n                });\n            }\n            lastIndex = index + emoji.length;\n        });\n        if (lastIndex < fragment.string.length) {\n            result.push({\n                string: fragment.string.slice(lastIndex),\n                attributes: fragment.attributes,\n            });\n        }\n    }\n    return result;\n};\n\n/**\n * Get image source\n *\n * @param node - Image node\n * @returns Image src\n */\nconst getSource = (node) => {\n    if (node.props.src)\n        return node.props.src;\n    if (node.props.source)\n        return node.props.source;\n};\n\n/**\n * Resolves `src` to `@react-pdf/image` interface.\n *\n * Also it handles factories and async sources.\n *\n * @param src\n * @returns Resolved src\n */\nconst resolveSource = async (src) => {\n    const source = typeof src === 'function' ? await src() : await src;\n    return typeof source === 'string' ? { uri: source } : source;\n};\n\n/**\n * Fetches image and append data to node\n * Ideally this fn should be immutable.\n *\n * @param node\n */\nconst fetchImage = async (node) => {\n    const src = getSource(node);\n    const { cache } = node.props;\n    if (!src) {\n        console.warn(false, 'Image should receive either a \"src\" or \"source\" prop');\n        return;\n    }\n    try {\n        const source = await resolveSource(src);\n        if (!source) {\n            throw new Error(`Image's \"src\" or \"source\" prop returned ${source}`);\n        }\n        node.image = await resolveImage(source, { cache });\n        if (Buffer.isBuffer(source) || source instanceof Blob)\n            return;\n        node.image.key = 'data' in source ? source.data.toString() : source.uri;\n    }\n    catch (e) {\n        console.warn(e.message);\n    }\n};\n\nconst isImage$2 = (node) => node.type === P.Image;\n/**\n * Get all asset promises that need to be resolved\n *\n * @param fontStore - Font store\n * @param node - Root node\n * @returns Asset promises\n */\nconst fetchAssets = (fontStore, node) => {\n    const promises = [];\n    const listToExplore = node.children?.slice(0) || [];\n    const emojiSource = fontStore ? fontStore.getEmojiSource() : null;\n    while (listToExplore.length > 0) {\n        const n = listToExplore.shift();\n        if (isImage$2(n)) {\n            promises.push(fetchImage(n));\n        }\n        if (fontStore && n.style?.fontFamily) {\n            const fontFamilies = castArray(n.style.fontFamily);\n            promises.push(...fontFamilies.map((fontFamily) => fontStore.load({\n                fontFamily,\n                fontStyle: n.style.fontStyle,\n                fontWeight: n.style.fontWeight,\n            })));\n        }\n        if (typeof n === 'string') {\n            promises.push(...fetchEmojis(n, emojiSource));\n        }\n        if ('value' in n && typeof n.value === 'string') {\n            promises.push(...fetchEmojis(n.value, emojiSource));\n        }\n        if (n.children) {\n            n.children.forEach((childNode) => {\n                listToExplore.push(childNode);\n            });\n        }\n    }\n    return promises;\n};\n/**\n * Fetch image, font and emoji assets in parallel.\n * Layout process will not be resumed until promise resolves.\n *\n * @param node root node\n * @param fontStore font store\n * @returns Root node\n */\nconst resolveAssets = async (node, fontStore) => {\n    const promises = fetchAssets(fontStore, node);\n    await Promise.all(promises);\n    return node;\n};\n\nconst isLink$1 = (node) => node.type === P.Link;\nconst DEFAULT_LINK_STYLES = {\n    color: 'blue',\n    textDecoration: 'underline',\n};\n/**\n * Computes styles using stylesheet\n *\n * @param container\n * @param node - Document node\n * @returns Computed styles\n */\nconst computeStyle = (container, node) => {\n    let baseStyle = [node.style];\n    if (isLink$1(node)) {\n        baseStyle = Array.isArray(node.style)\n            ? [DEFAULT_LINK_STYLES, ...node.style]\n            : [DEFAULT_LINK_STYLES, node.style];\n    }\n    return resolveStyle(container, baseStyle);\n};\n/**\n * Resolves node styles\n *\n * @param container\n * @returns Resolve node styles\n */\nconst resolveNodeStyles = (container) => (node) => {\n    const style = computeStyle(container, node);\n    if (!node.children)\n        return Object.assign({}, node, { style });\n    const children = node.children.map(resolveNodeStyles(container));\n    return Object.assign({}, node, { style, children });\n};\n/**\n * Resolves page styles\n *\n * @param page Document page\n * @returns Document page with resolved styles\n */\nconst resolvePageStyles = (page) => {\n    const dpi = page.props?.dpi || 72;\n    const style = page.style;\n    const width = page.box?.width || style.width;\n    const height = page.box?.height || style.height;\n    const orientation = page.props?.orientation || 'portrait';\n    const remBase = style?.fontSize || 18;\n    const container = { width, height, orientation, dpi, remBase };\n    return resolveNodeStyles(container)(page);\n};\n/**\n * Resolves document styles\n *\n * @param root - Document root\n * @returns Document root with resolved styles\n */\nconst resolveStyles = (root) => {\n    if (!root.children)\n        return root;\n    const children = root.children.map(resolvePageStyles);\n    return Object.assign({}, root, { children });\n};\n\nconst getTransformStyle = (s) => (node) => isNil(node.style?.[s]) ? '50%' : node.style?.[s] ?? null;\n/**\n * Get node origin\n *\n * @param node\n * @returns {{ left?: number, top?: number }} node origin\n */\nconst getOrigin = (node) => {\n    if (!node.box)\n        return null;\n    const { left, top, width, height } = node.box;\n    const transformOriginX = getTransformStyle('transformOriginX')(node);\n    const transformOriginY = getTransformStyle('transformOriginY')(node);\n    const percentX = matchPercent(transformOriginX);\n    const percentY = matchPercent(transformOriginY);\n    const offsetX = percentX ? width * percentX.percent : transformOriginX;\n    const offsetY = percentY ? height * percentY.percent : transformOriginY;\n    if (isNil(offsetX) || typeof offsetX === 'string')\n        throw new Error(`Invalid origin offsetX: ${offsetX}`);\n    if (isNil(offsetY) || typeof offsetY === 'string')\n        throw new Error(`Invalid origin offsetY: ${offsetY}`);\n    return { left: left + offsetX, top: top + offsetY };\n};\n\n/**\n * Resolve node origin\n *\n * @param node\n * @returns Node with origin attribute\n */\nconst resolveNodeOrigin = (node) => {\n    const origin = getOrigin(node);\n    const newNode = Object.assign({}, node, { origin });\n    if (!node.children)\n        return newNode;\n    const children = node.children.map(resolveNodeOrigin);\n    return Object.assign({}, newNode, { children });\n};\n/**\n * Resolve document origins\n *\n * @param root - Document root\n * @returns Document root\n */\nconst resolveOrigin = (root) => {\n    if (!root.children)\n        return root;\n    const children = root.children.map(resolveNodeOrigin);\n    return Object.assign({}, root, { children });\n};\n\nconst getBookmarkValue = (bookmark) => {\n    return typeof bookmark === 'string'\n        ? { title: bookmark, fit: false, expanded: false }\n        : bookmark;\n};\nconst resolveBookmarks = (node) => {\n    let refs = 0;\n    const children = (node.children || []).slice(0);\n    const listToExplore = children.map((value) => ({\n        value,\n        parent: null,\n    }));\n    while (listToExplore.length > 0) {\n        const element = listToExplore.shift();\n        if (!element)\n            break;\n        const child = element.value;\n        let parent = element.parent;\n        if (child.props && 'bookmark' in child.props) {\n            const bookmark = getBookmarkValue(child.props.bookmark);\n            const ref = refs++;\n            const newHierarchy = { ref, parent: parent?.ref, ...bookmark };\n            child.props.bookmark = newHierarchy;\n            parent = newHierarchy;\n        }\n        if (child.children) {\n            child.children.forEach((childNode) => {\n                listToExplore.push({ value: childNode, parent });\n            });\n        }\n    }\n    return node;\n};\n\nconst VALID_ORIENTATIONS = ['portrait', 'landscape'];\n/**\n * Get page orientation. Defaults to portrait\n *\n * @param page - Page object\n * @returns Page orientation\n */\nconst getOrientation = (page) => {\n    const value = page.props?.orientation || 'portrait';\n    return VALID_ORIENTATIONS.includes(value) ? value : 'portrait';\n};\n\n/**\n * Return true if page is landscape\n *\n * @param page - Page instance\n * @returns Is page landscape\n */\nconst isLandscape = (page) => getOrientation(page) === 'landscape';\n\n// Page sizes for 72dpi. 72dpi is used internally by pdfkit.\nconst PAGE_SIZES = {\n    '4A0': [4767.87, 6740.79],\n    '2A0': [3370.39, 4767.87],\n    A0: [2383.94, 3370.39],\n    A1: [1683.78, 2383.94],\n    A2: [1190.55, 1683.78],\n    A3: [841.89, 1190.55],\n    A4: [595.28, 841.89],\n    A5: [419.53, 595.28],\n    A6: [297.64, 419.53],\n    A7: [209.76, 297.64],\n    A8: [147.4, 209.76],\n    A9: [104.88, 147.4],\n    A10: [73.7, 104.88],\n    B0: [2834.65, 4008.19],\n    B1: [2004.09, 2834.65],\n    B2: [1417.32, 2004.09],\n    B3: [1000.63, 1417.32],\n    B4: [708.66, 1000.63],\n    B5: [498.9, 708.66],\n    B6: [354.33, 498.9],\n    B7: [249.45, 354.33],\n    B8: [175.75, 249.45],\n    B9: [124.72, 175.75],\n    B10: [87.87, 124.72],\n    C0: [2599.37, 3676.54],\n    C1: [1836.85, 2599.37],\n    C2: [1298.27, 1836.85],\n    C3: [918.43, 1298.27],\n    C4: [649.13, 918.43],\n    C5: [459.21, 649.13],\n    C6: [323.15, 459.21],\n    C7: [229.61, 323.15],\n    C8: [161.57, 229.61],\n    C9: [113.39, 161.57],\n    C10: [79.37, 113.39],\n    RA0: [2437.8, 3458.27],\n    RA1: [1729.13, 2437.8],\n    RA2: [1218.9, 1729.13],\n    RA3: [864.57, 1218.9],\n    RA4: [609.45, 864.57],\n    SRA0: [2551.18, 3628.35],\n    SRA1: [1814.17, 2551.18],\n    SRA2: [1275.59, 1814.17],\n    SRA3: [907.09, 1275.59],\n    SRA4: [637.8, 907.09],\n    EXECUTIVE: [521.86, 756.0],\n    FOLIO: [612.0, 936.0],\n    LEGAL: [612.0, 1008.0],\n    LETTER: [612.0, 792.0],\n    TABLOID: [792.0, 1224.0],\n    ID1: [153, 243],\n};\n/**\n * Parses scalar value in value and unit pairs\n *\n * @param value - Scalar value\n * @returns Parsed value\n */\nconst parseValue = (value) => {\n    if (typeof value === 'number')\n        return { value, unit: undefined };\n    const match = /^(-?\\d*\\.?\\d+)(in|mm|cm|pt|px)?$/g.exec(value);\n    return match\n        ? { value: parseFloat(match[1]), unit: match[2] || 'pt' }\n        : { value, unit: undefined };\n};\n/**\n * Transform given scalar value to 72dpi equivalent of size\n *\n * @param value - Styles value\n * @param inputDpi - User defined dpi\n * @returns Transformed value\n */\nconst transformUnit = (value, inputDpi) => {\n    if (!value)\n        return 0;\n    const scalar = parseValue(value);\n    const outputDpi = 72;\n    const mmFactor = (1 / 25.4) * outputDpi;\n    const cmFactor = (1 / 2.54) * outputDpi;\n    if (typeof scalar.value === 'string')\n        throw new Error(`Invalid page size: ${value}`);\n    switch (scalar.unit) {\n        case 'in':\n            return scalar.value * outputDpi;\n        case 'mm':\n            return scalar.value * mmFactor;\n        case 'cm':\n            return scalar.value * cmFactor;\n        case 'px':\n            return Math.round(scalar.value * (outputDpi / inputDpi));\n        default:\n            return scalar.value;\n    }\n};\nconst transformUnits = ({ width, height }, dpi) => ({\n    width: transformUnit(width, dpi),\n    height: transformUnit(height, dpi),\n});\n/**\n * Transforms array into size object\n *\n * @param v - Values array\n * @returns Size object with width and height\n */\nconst toSizeObject = (v) => ({\n    width: v[0],\n    height: v[1],\n});\n/**\n * Flip size object\n *\n * @param v - Size object\n * @returns Flipped size object\n */\nconst flipSizeObject = (v) => ({\n    width: v.height,\n    height: v.width,\n});\n/**\n * Returns size object from a given string\n *\n * @param v - Page size string\n * @returns Size object with width and height\n */\nconst getStringSize = (v) => {\n    return toSizeObject(PAGE_SIZES[v.toUpperCase()]);\n};\n/**\n * Returns size object from a single number\n *\n * @param n - Page size number\n * @returns Size object with width and height\n */\nconst getNumberSize = (n) => toSizeObject([n, n]);\n/**\n * Return page size in an object { width, height }\n *\n * @param page - Page node\n * @returns Size object with width and height\n */\nconst getSize = (page) => {\n    const value = page.props?.size || 'A4';\n    const dpi = page.props?.dpi || 72;\n    let size;\n    if (typeof value === 'string') {\n        size = getStringSize(value);\n    }\n    else if (Array.isArray(value)) {\n        size = transformUnits(toSizeObject(value), dpi);\n    }\n    else if (typeof value === 'number') {\n        size = transformUnits(getNumberSize(value), dpi);\n    }\n    else {\n        size = transformUnits(value, dpi);\n    }\n    return isLandscape(page) ? flipSizeObject(size) : size;\n};\n\n/**\n * Resolves page size\n *\n * @param page\n * @returns Page with resolved size in style attribute\n */\nconst resolvePageSize = (page) => {\n    const size = getSize(page);\n    const style = flatten(page.style || {});\n    return { ...page, style: { ...style, ...size } };\n};\n/**\n * Resolves page sizes\n *\n * @param root  -Document root\n * @returns Document root with resolved page sizes\n */\nconst resolvePageSizes = (root) => {\n    if (!root.children)\n        return root;\n    const children = root.children.map(resolvePageSize);\n    return Object.assign({}, root, { children });\n};\n\nconst isFixed = (node) => {\n    if (!node.props)\n        return false;\n    return 'fixed' in node.props ? node.props.fixed === true : false;\n};\n\n/**\n * Get line index at given height\n *\n * @param node\n * @param height\n */\nconst lineIndexAtHeight = (node, height) => {\n    let y = 0;\n    if (!node.lines)\n        return 0;\n    for (let i = 0; i < node.lines.length; i += 1) {\n        const line = node.lines[i];\n        if (y + line.box.height > height)\n            return i;\n        y += line.box.height;\n    }\n    return node.lines.length;\n};\n\n/**\n * Get height for given text line index\n *\n * @param node\n * @param index\n */\nconst heightAtLineIndex = (node, index) => {\n    let counter = 0;\n    if (!node.lines)\n        return counter;\n    for (let i = 0; i < index; i += 1) {\n        const line = node.lines[i];\n        if (!line)\n            break;\n        counter += line.box.height;\n    }\n    return counter;\n};\n\nconst getLineBreak = (node, height) => {\n    const top = node.box?.top || 0;\n    const widows = node.props.widows || 2;\n    const orphans = node.props.orphans || 2;\n    const linesQuantity = node.lines.length;\n    const slicedLine = lineIndexAtHeight(node, height - top);\n    if (slicedLine === 0) {\n        return 0;\n    }\n    if (linesQuantity < orphans) {\n        return linesQuantity;\n    }\n    if (slicedLine < orphans || linesQuantity < orphans + widows) {\n        return 0;\n    }\n    if (linesQuantity === orphans + widows) {\n        return orphans;\n    }\n    if (linesQuantity - slicedLine < widows) {\n        return linesQuantity - widows;\n    }\n    return slicedLine;\n};\n// Also receives contentArea in case it's needed\nconst splitText = (node, height) => {\n    const slicedLineIndex = getLineBreak(node, height);\n    const currentHeight = heightAtLineIndex(node, slicedLineIndex);\n    const nextHeight = node.box.height - currentHeight;\n    const current = Object.assign({}, node, {\n        box: {\n            ...node.box,\n            height: currentHeight,\n            borderBottomWidth: 0,\n        },\n        style: {\n            ...node.style,\n            marginBottom: 0,\n            paddingBottom: 0,\n            borderBottomWidth: 0,\n            borderBottomLeftRadius: 0,\n            borderBottomRightRadius: 0,\n        },\n        lines: node.lines.slice(0, slicedLineIndex),\n    });\n    const next = Object.assign({}, node, {\n        box: {\n            ...node.box,\n            top: 0,\n            height: nextHeight,\n            borderTopWidth: 0,\n        },\n        style: {\n            ...node.style,\n            marginTop: 0,\n            paddingTop: 0,\n            borderTopWidth: 0,\n            borderTopLeftRadius: 0,\n            borderTopRightRadius: 0,\n        },\n        lines: node.lines.slice(slicedLineIndex),\n    });\n    return [current, next];\n};\n\nconst getTop$1 = (node) => node.box?.top || 0;\nconst hasFixedHeight = (node) => !isNil(node.style?.height);\nconst splitNode = (node, height) => {\n    if (!node)\n        return [null, null];\n    const nodeTop = getTop$1(node);\n    const current = Object.assign({}, node, {\n        box: {\n            ...node.box,\n            borderBottomWidth: 0,\n        },\n        style: {\n            ...node.style,\n            marginBottom: 0,\n            paddingBottom: 0,\n            borderBottomWidth: 0,\n            borderBottomLeftRadius: 0,\n            borderBottomRightRadius: 0,\n        },\n    });\n    current.style.height = height - nodeTop;\n    const nextHeight = hasFixedHeight(node)\n        ? node.box.height - (height - nodeTop)\n        : null;\n    const next = Object.assign({}, node, {\n        box: {\n            ...node.box,\n            top: 0,\n            borderTopWidth: 0,\n        },\n        style: {\n            ...node.style,\n            marginTop: 0,\n            paddingTop: 0,\n            borderTopWidth: 0,\n            borderTopLeftRadius: 0,\n            borderTopRightRadius: 0,\n        },\n    });\n    if (nextHeight) {\n        next.style.height = nextHeight;\n    }\n    return [current, next];\n};\n\nconst NON_WRAP_TYPES = [P.Svg, P.Note, P.Image, P.Canvas];\nconst getWrap = (node) => {\n    if (NON_WRAP_TYPES.includes(node.type))\n        return false;\n    if (!node.props)\n        return true;\n    return 'wrap' in node.props ? node.props.wrap : true;\n};\n\nconst getComputedPadding = (node, edge) => {\n    const { yogaNode } = node;\n    return yogaNode ? yogaNode.getComputedPadding(edge) : null;\n};\n/**\n * Get Yoga computed paddings. Zero otherwise\n *\n * @param  node\n * @returns paddings\n */\nconst getPadding = (node) => {\n    const { style, box } = node;\n    const paddingTop = getComputedPadding(node, Yoga.Edge.Top) ||\n        box?.paddingTop ||\n        style?.paddingTop ||\n        0;\n    const paddingRight = getComputedPadding(node, Yoga.Edge.Right) ||\n        box?.paddingRight ||\n        style?.paddingRight ||\n        0;\n    const paddingBottom = getComputedPadding(node, Yoga.Edge.Bottom) ||\n        box?.paddingBottom ||\n        style?.paddingBottom ||\n        0;\n    const paddingLeft = getComputedPadding(node, Yoga.Edge.Left) ||\n        box?.paddingLeft ||\n        style?.paddingLeft ||\n        0;\n    return { paddingTop, paddingRight, paddingBottom, paddingLeft };\n};\n\nconst getWrapArea = (page) => {\n    const height = page.style?.height;\n    const { paddingBottom } = getPadding(page);\n    return height - paddingBottom;\n};\n\nconst getContentArea = (page) => {\n    const height = page.style?.height;\n    const { paddingTop, paddingBottom } = getPadding(page);\n    return height - paddingBottom - paddingTop;\n};\n\nconst isString = (value) => typeof value === 'string';\nconst isNumber = (value) => typeof value === 'number';\nconst isBoolean = (value) => typeof value === 'boolean';\nconst isFragment = (value) => value && value.type === Symbol.for('react.fragment');\n/**\n * Transforms a react element instance to internal element format.\n *\n * Can return multiple instances in the case of arrays or fragments.\n *\n * @param element - React element\n * @returns Parsed React elements\n */\nconst createInstances = (element) => {\n    if (!element)\n        return [];\n    if (Array.isArray(element)) {\n        return element.reduce((acc, el) => acc.concat(createInstances(el)), []);\n    }\n    if (isBoolean(element)) {\n        return [];\n    }\n    if (isString(element) || isNumber(element)) {\n        return [{ type: P.TextInstance, value: `${element}` }];\n    }\n    if (isFragment(element)) {\n        // @ts-expect-error figure out why this is complains\n        return createInstances(element.props.children);\n    }\n    if (!isString(element.type)) {\n        // @ts-expect-error figure out why this is complains\n        return createInstances(element.type(element.props));\n    }\n    const { type, props: { style = {}, children, ...props }, } = element;\n    const nextChildren = castArray(children).reduce((acc, child) => acc.concat(createInstances(child)), []);\n    return [\n        {\n            type,\n            style,\n            props,\n            children: nextChildren,\n        },\n    ];\n};\n\nconst getBreak = (node) => 'break' in node.props ? node.props.break : false;\nconst getMinPresenceAhead = (node) => 'minPresenceAhead' in node.props ? node.props.minPresenceAhead : 0;\nconst getFurthestEnd = (elements) => Math.max(...elements.map((node) => node.box.top + node.box.height));\nconst getEndOfMinPresenceAhead = (child) => {\n    return (child.box.top +\n        child.box.height +\n        child.box.marginBottom +\n        getMinPresenceAhead(child));\n};\nconst getEndOfPresence = (child, futureElements) => {\n    const afterMinPresenceAhead = getEndOfMinPresenceAhead(child);\n    const endOfFurthestFutureElement = getFurthestEnd(futureElements.filter((node) => !('fixed' in node.props)));\n    return Math.min(afterMinPresenceAhead, endOfFurthestFutureElement);\n};\nconst shouldBreak = (child, futureElements, height) => {\n    if ('fixed' in child.props)\n        return false;\n    const shouldSplit = height < child.box.top + child.box.height;\n    const canWrap = getWrap(child);\n    // Calculate the y coordinate where the desired presence of the child ends\n    const endOfPresence = getEndOfPresence(child, futureElements);\n    // If the child is already at the top of the page, breaking won't improve its presence\n    // (as long as react-pdf does not support breaking into differently sized containers)\n    const breakingImprovesPresence = child.box.top > child.box.marginTop;\n    return (getBreak(child) ||\n        (shouldSplit && !canWrap) ||\n        (!shouldSplit && endOfPresence > height && breakingImprovesPresence));\n};\n\nconst IGNORABLE_CODEPOINTS = [\n    8232, // LINE_SEPARATOR\n    8233, // PARAGRAPH_SEPARATOR\n];\nconst buildSubsetForFont = (font) => IGNORABLE_CODEPOINTS.reduce((acc, codePoint) => {\n    if (font &&\n        font.hasGlyphForCodePoint &&\n        font.hasGlyphForCodePoint(codePoint)) {\n        return acc;\n    }\n    return [...acc, String.fromCharCode(codePoint)];\n}, []);\nconst ignoreChars = (fragments) => fragments.map((fragment) => {\n    const charSubset = buildSubsetForFont(fragment.attributes.font[0]);\n    const subsetRegex = new RegExp(charSubset.join('|'));\n    return {\n        string: fragment.string.replace(subsetRegex, ''),\n        attributes: fragment.attributes,\n    };\n});\n\nconst PREPROCESSORS = [ignoreChars, embedEmojis];\nconst isImage$1 = (node) => node.type === P.Image;\nconst isTextInstance$2 = (node) => node.type === P.TextInstance;\n/**\n * Get textkit fragments of given node object\n *\n * @param fontStore - Font store\n * @param instance - Node\n * @param parentLink - Parent link\n * @param level - Fragment level\n * @returns Text fragments\n */\nconst getFragments = (fontStore, instance, parentLink = null, level = 0) => {\n    if (!instance)\n        return [{ string: '' }];\n    let fragments = [];\n    const { color = 'black', direction = 'ltr', fontFamily = 'Helvetica', fontWeight, fontStyle, fontSize = 18, textAlign, lineHeight, textDecoration, textDecorationColor, textDecorationStyle, textTransform, letterSpacing, textIndent, opacity, verticalAlign, } = instance.style;\n    const fontFamilies = typeof fontFamily === 'string' ? [fontFamily] : [...(fontFamily || [])];\n    // Fallback font\n    fontFamilies.push('Helvetica');\n    const font = fontFamilies.map((fontFamilyName) => {\n        const opts = { fontFamily: fontFamilyName, fontWeight, fontStyle };\n        const obj = fontStore.getFont(opts);\n        return obj?.data;\n    });\n    // Don't pass main background color to textkit. Will be rendered by the render package instead\n    const backgroundColor = level === 0 ? null : instance.style.backgroundColor;\n    const attributes = {\n        font,\n        color,\n        opacity,\n        fontSize,\n        lineHeight,\n        direction,\n        verticalAlign,\n        backgroundColor,\n        indent: textIndent,\n        characterSpacing: letterSpacing,\n        strikeStyle: textDecorationStyle,\n        underlineStyle: textDecorationStyle,\n        underline: textDecoration === 'underline' ||\n            textDecoration === 'underline line-through' ||\n            textDecoration === 'line-through underline',\n        strike: textDecoration === 'line-through' ||\n            textDecoration === 'underline line-through' ||\n            textDecoration === 'line-through underline',\n        strikeColor: textDecorationColor || color,\n        underlineColor: textDecorationColor || color,\n        // @ts-expect-error allow this props access\n        link: parentLink || instance.props?.src || instance.props?.href,\n        align: textAlign || (direction === 'rtl' ? 'right' : 'left'),\n    };\n    for (let i = 0; i < instance.children.length; i += 1) {\n        const child = instance.children[i];\n        if (isImage$1(child)) {\n            fragments.push({\n                string: String.fromCharCode(0xfffc),\n                attributes: {\n                    ...attributes,\n                    attachment: {\n                        width: (child.style.width || fontSize),\n                        height: (child.style.height || fontSize),\n                        image: child.image.data,\n                    },\n                },\n            });\n        }\n        else if (isTextInstance$2(child)) {\n            fragments.push({\n                string: transformText(child.value, textTransform),\n                attributes,\n            });\n        }\n        else if (child) {\n            fragments.push(...getFragments(fontStore, child, attributes.link, level + 1));\n        }\n    }\n    for (let i = 0; i < PREPROCESSORS.length; i += 1) {\n        const preprocessor = PREPROCESSORS[i];\n        fragments = preprocessor(fragments);\n    }\n    return fragments;\n};\n/**\n * Get textkit attributed string from text node\n *\n * @param fontStore - Font store\n * @param instance Node\n * @returns Attributed string\n */\nconst getAttributedString = (fontStore, instance) => {\n    const fragments = getFragments(fontStore, instance);\n    return fromFragments(fragments);\n};\n\nconst engines = {\n    bidi,\n    linebreaker,\n    justification,\n    textDecoration,\n    scriptItemizer,\n    wordHyphenation,\n    fontSubstitution,\n};\nconst engine = layoutEngine(engines);\nconst getMaxLines = (node) => node.style?.maxLines;\nconst getTextOverflow = (node) => node.style?.textOverflow;\n/**\n * Get layout container for specific text node\n *\n * @param {number} width\n * @param {number} height\n * @param {Object} node\n * @returns {Object} layout container\n */\nconst getContainer = (width, height, node) => {\n    const maxLines = getMaxLines(node);\n    const textOverflow = getTextOverflow(node);\n    return {\n        x: 0,\n        y: 0,\n        width,\n        maxLines,\n        height: height || Infinity,\n        truncateMode: textOverflow,\n    };\n};\n/**\n * Get text layout options for specific text node\n *\n * @param {Object} node instance\n * @returns {Object} layout options\n */\nconst getLayoutOptions = (fontStore, node) => ({\n    hyphenationPenalty: node.props.hyphenationPenalty,\n    shrinkWhitespaceFactor: { before: -0.5, after: -0.5 },\n    hyphenationCallback: node.props.hyphenationCallback ||\n        fontStore?.getHyphenationCallback() ||\n        null,\n});\n/**\n * Get text lines for given node\n *\n * @param node - Node\n * @param width - Container width\n * @param height - Container height\n * @param fontStore - Font store\n * @returns Layout lines\n */\nconst layoutText = (node, width, height, fontStore) => {\n    const attributedString = getAttributedString(fontStore, node);\n    const container = getContainer(width, height, node);\n    const options = getLayoutOptions(fontStore, node);\n    const lines = engine(attributedString, container, options);\n    return lines.reduce((acc, line) => [...acc, ...line], []);\n};\n\nconst isSvg$2 = (node) => node.type === P.Svg;\nconst isText$4 = (node) => node.type === P.Text;\nconst shouldIterate = (node) => !isSvg$2(node) && !isText$4(node);\nconst shouldLayoutText = (node) => isText$4(node) && !node.lines;\n/**\n * Performs text layout on text node if wasn't calculated before.\n * Text layout is usually performed on Yoga's layout process (via setMeasureFunc),\n * but we need to layout those nodes with fixed width and height.\n *\n * @param node\n * @returns Layout node\n */\nconst resolveTextLayout = (node, fontStore) => {\n    if (shouldLayoutText(node)) {\n        const width = node.box.width - (node.box.paddingRight + node.box.paddingLeft);\n        const height = node.box.height - (node.box.paddingTop + node.box.paddingBottom);\n        node.lines = layoutText(node, width, height, fontStore);\n    }\n    if (shouldIterate(node)) {\n        if (!node.children)\n            return node;\n        const mapChild = (child) => resolveTextLayout(child, fontStore);\n        const children = node.children.map(mapChild);\n        return Object.assign({}, node, { children });\n    }\n    return node;\n};\n\nconst BASE_INHERITABLE_PROPERTIES = [\n    'color',\n    'fontFamily',\n    'fontSize',\n    'fontStyle',\n    'fontWeight',\n    'letterSpacing',\n    'opacity',\n    'textDecoration',\n    'textTransform',\n    'lineHeight',\n    'textAlign',\n    'visibility',\n    'wordSpacing',\n];\nconst TEXT_INHERITABLE_PROPERTIES = [\n    ...BASE_INHERITABLE_PROPERTIES,\n    'backgroundColor',\n];\nconst isType$2 = (type) => (node) => node.type === type;\nconst isSvg$1 = isType$2(P.Svg);\nconst isText$3 = isType$2(P.Text);\n// Merge style values\nconst mergeValues = (styleName, value, inheritedValue) => {\n    switch (styleName) {\n        case 'textDecoration': {\n            // merge not none and not false textDecoration values to one rule\n            return [inheritedValue, value].filter((v) => v && v !== 'none').join(' ');\n        }\n        default:\n            return value;\n    }\n};\n// Merge inherited and node styles\nconst merge = (inheritedStyles, style) => {\n    const mergedStyles = { ...inheritedStyles };\n    Object.entries(style).forEach(([styleName, value]) => {\n        mergedStyles[styleName] = mergeValues(styleName, value, inheritedStyles[styleName]);\n    });\n    return mergedStyles;\n};\n/**\n * Merges styles with node\n *\n * @param inheritedStyles - Style object\n * @returns Merge styles function\n */\nconst mergeStyles = (inheritedStyles) => (node) => {\n    const style = merge(inheritedStyles, node.style || {});\n    return Object.assign({}, node, { style });\n};\n/**\n * Inherit style values from the root to the leafs\n *\n * @param node - Document root\n * @returns Document root with inheritance\n *\n */\nconst resolveInheritance = (node) => {\n    if (isSvg$1(node))\n        return node;\n    if (!('children' in node))\n        return node;\n    const inheritableProperties = isText$3(node)\n        ? TEXT_INHERITABLE_PROPERTIES\n        : BASE_INHERITABLE_PROPERTIES;\n    const inheritStyles = pick(inheritableProperties, node.style || {});\n    const resolveChild = compose(resolveInheritance, mergeStyles(inheritStyles));\n    const children = node.children.map(resolveChild);\n    return Object.assign({}, node, { children });\n};\n\nconst getComputedMargin = (node, edge) => {\n    const { yogaNode } = node;\n    return yogaNode ? yogaNode.getComputedMargin(edge) : null;\n};\n/**\n * Get Yoga computed magins. Zero otherwise\n *\n * @param node\n * @returns Margins\n */\nconst getMargin = (node) => {\n    const { style, box } = node;\n    const marginTop = getComputedMargin(node, Yoga.Edge.Top) ||\n        box?.marginTop ||\n        style?.marginTop ||\n        0;\n    const marginRight = getComputedMargin(node, Yoga.Edge.Right) ||\n        box?.marginRight ||\n        style?.marginRight ||\n        0;\n    const marginBottom = getComputedMargin(node, Yoga.Edge.Bottom) ||\n        box?.marginBottom ||\n        style?.marginBottom ||\n        0;\n    const marginLeft = getComputedMargin(node, Yoga.Edge.Left) ||\n        box?.marginLeft ||\n        style?.marginLeft ||\n        0;\n    return { marginTop, marginRight, marginBottom, marginLeft };\n};\n\n/**\n * Get Yoga computed position. Zero otherwise\n *\n * @param node\n * @returns Position\n */\nconst getPosition = (node) => {\n    const { yogaNode } = node;\n    return {\n        top: yogaNode?.getComputedTop() || 0,\n        right: yogaNode?.getComputedRight() || 0,\n        bottom: yogaNode?.getComputedBottom() || 0,\n        left: yogaNode?.getComputedLeft() || 0,\n    };\n};\n\nconst DEFAULT_DIMENSION = {\n    width: 0,\n    height: 0,\n};\n/**\n * Get Yoga computed dimensions. Zero otherwise\n *\n * @param node\n * @returns Dimensions\n */\nconst getDimension = (node) => {\n    const { yogaNode } = node;\n    if (!yogaNode)\n        return DEFAULT_DIMENSION;\n    return {\n        width: yogaNode.getComputedWidth(),\n        height: yogaNode.getComputedHeight(),\n    };\n};\n\nconst getComputedBorder = (yogaNode, edge) => (yogaNode ? yogaNode.getComputedBorder(edge) : 0);\n/**\n * Get Yoga computed border width. Zero otherwise\n *\n * @param node\n * @returns Border widths\n */\nconst getBorderWidth = (node) => {\n    const { yogaNode } = node;\n    return {\n        borderTopWidth: getComputedBorder(yogaNode, Yoga.Edge.Top),\n        borderRightWidth: getComputedBorder(yogaNode, Yoga.Edge.Right),\n        borderBottomWidth: getComputedBorder(yogaNode, Yoga.Edge.Bottom),\n        borderLeftWidth: getComputedBorder(yogaNode, Yoga.Edge.Left),\n    };\n};\n\n/**\n * Set display attribute to node's Yoga instance\n *\n * @param value - Display\n * @returns Node instance wrapper\n */\nconst setDisplay = (value) => (node) => {\n    const { yogaNode } = node;\n    if (yogaNode) {\n        yogaNode.setDisplay(value === 'none' ? Yoga.Display.None : Yoga.Display.Flex);\n    }\n    return node;\n};\n\nconst OVERFLOW = {\n    hidden: Yoga.Overflow.Hidden,\n    scroll: Yoga.Overflow.Scroll,\n};\n/**\n * Set overflow attribute to node's Yoga instance\n *\n * @param value - Overflow value\n * @returns Node instance wrapper\n */\nconst setOverflow = (value) => (node) => {\n    const { yogaNode } = node;\n    if (!isNil(value) && yogaNode) {\n        const overflow = OVERFLOW[value] || Yoga.Overflow.Visible;\n        yogaNode.setOverflow(overflow);\n    }\n    return node;\n};\n\nconst FLEX_WRAP = {\n    wrap: Yoga.Wrap.Wrap,\n    'wrap-reverse': Yoga.Wrap.WrapReverse,\n};\n/**\n * Set flex wrap attribute to node's Yoga instance\n *\n * @param value - Flex wrap value\n * @returns Node instance wrapper\n */\nconst setFlexWrap = (value) => (node) => {\n    const { yogaNode } = node;\n    if (yogaNode) {\n        const flexWrap = FLEX_WRAP[value] || Yoga.Wrap.NoWrap;\n        yogaNode.setFlexWrap(flexWrap);\n    }\n    return node;\n};\n\n/**\n * Set generic yoga attribute to node's Yoga instance, handing `auto`, edges and percentage cases\n *\n * @param attr - Property\n * @param edge - Edge\n * @returns Node instance wrapper\n */\nconst setYogaValue = (attr, edge) => (value) => (node) => {\n    const { yogaNode } = node;\n    if (!isNil(value) && yogaNode) {\n        const hasEdge = !isNil(edge);\n        const fixedMethod = `set${upperFirst(attr)}`;\n        const autoMethod = `${fixedMethod}Auto`;\n        const percentMethod = `${fixedMethod}Percent`;\n        const percent = matchPercent(value);\n        if (percent && !yogaNode[percentMethod]) {\n            throw new Error(`You can't pass percentage values to ${attr} property`);\n        }\n        if (percent) {\n            if (hasEdge) {\n                yogaNode[percentMethod]?.(edge, percent.value);\n            }\n            else {\n                yogaNode[percentMethod]?.(percent.value);\n            }\n        }\n        else if (value === 'auto') {\n            if (hasEdge) {\n                yogaNode[autoMethod]?.(edge);\n            }\n            else {\n                yogaNode[autoMethod]?.();\n            }\n        }\n        else if (hasEdge) {\n            yogaNode[fixedMethod]?.(edge, value);\n        }\n        else {\n            yogaNode[fixedMethod]?.(value);\n        }\n    }\n    return node;\n};\n\n/**\n * Set flex grow attribute to node's Yoga instance\n *\n * @param  value - Flex grow value\n * @returns Node instance wrapper\n */\nconst setFlexGrow = (value) => (node) => {\n    return setYogaValue('flexGrow')(value || 0)(node);\n};\n\n/**\n * Set flex basis attribute to node's Yoga instance\n *\n * @param flex - Basis value\n * @param node - Node instance\n * @returns Node instance\n */\nconst setFlexBasis = setYogaValue('flexBasis');\n\nconst ALIGN = {\n    'flex-start': Yoga.Align.FlexStart,\n    center: Yoga.Align.Center,\n    'flex-end': Yoga.Align.FlexEnd,\n    stretch: Yoga.Align.Stretch,\n    baseline: Yoga.Align.Baseline,\n    'space-between': Yoga.Align.SpaceBetween,\n    'space-around': Yoga.Align.SpaceAround,\n    'space-evenly': Yoga.Align.SpaceEvenly,\n};\n/**\n * Set generic align attribute to node's Yoga instance\n *\n * @param attr - Specific align property\n * @param value - Specific align value\n * @param node - Node\n * @returns Node\n */\nconst setAlign = (attr) => (value) => (node) => {\n    const { yogaNode } = node;\n    const defaultValue = attr === 'items' ? Yoga.Align.Stretch : Yoga.Align.Auto;\n    if (yogaNode) {\n        const align = ALIGN[value] || defaultValue;\n        yogaNode[`setAlign${upperFirst(attr)}`](align);\n    }\n    return node;\n};\n\n/**\n * Set align self attribute to node's Yoga instance\n *\n * @param align - Value\n * @param node - Node instance\n * @returns Node instance\n */\nconst setAlignSelf = setAlign('self');\n\n/**\n * Set align items attribute to node's Yoga instance\n *\n * @param align - Value\n * @param node - Node instance\n * @returns Node instance\n */\nconst setAlignItems = setAlign('items');\n\n/**\n * Set flex shrink attribute to node's Yoga instance\n *\n * @param value - Flex shrink value\n * @returns Node instance wrapper\n */\nconst setFlexShrink = (value) => (node) => {\n    return setYogaValue('flexShrink')(value || 1)(node);\n};\n\n/**\n * Set aspect ratio attribute to node's Yoga instance\n *\n * @param value - Ratio\n * @returns Node instance\n */\nconst setAspectRatio = (value) => (node) => {\n    const { yogaNode } = node;\n    if (!isNil(value) && yogaNode) {\n        yogaNode.setAspectRatio(value);\n    }\n    return node;\n};\n\n/**\n * Set align content attribute to node's Yoga instance\n *\n * @param align - Value\n * @param node - Instance\n * @returns Node instance\n */\nconst setAlignContent = setAlign('content');\n\nconst POSITION = {\n    absolute: Yoga.PositionType.Absolute,\n    relative: Yoga.PositionType.Relative,\n    static: Yoga.PositionType.Static,\n};\n/**\n * Set position type attribute to node's Yoga instance\n *\n * @param value - Position position type\n * @returns Node instance\n */\nconst setPositionType = (value) => (node) => {\n    const { yogaNode } = node;\n    if (!isNil(value) && yogaNode) {\n        yogaNode.setPositionType(POSITION[value]);\n    }\n    return node;\n};\n\nconst FLEX_DIRECTIONS = {\n    row: Yoga.FlexDirection.Row,\n    'row-reverse': Yoga.FlexDirection.RowReverse,\n    'column-reverse': Yoga.FlexDirection.ColumnReverse,\n};\n/**\n * Set flex direction attribute to node's Yoga instance\n *\n * @param value - Flex direction value\n * @returns Node instance wrapper\n */\nconst setFlexDirection = (value) => (node) => {\n    const { yogaNode } = node;\n    if (yogaNode) {\n        const flexDirection = FLEX_DIRECTIONS[value] || Yoga.FlexDirection.Column;\n        yogaNode.setFlexDirection(flexDirection);\n    }\n    return node;\n};\n\nconst JUSTIFY_CONTENT = {\n    center: Yoga.Justify.Center,\n    'flex-end': Yoga.Justify.FlexEnd,\n    'space-between': Yoga.Justify.SpaceBetween,\n    'space-around': Yoga.Justify.SpaceAround,\n    'space-evenly': Yoga.Justify.SpaceEvenly,\n};\n/**\n * Set justify content attribute to node's Yoga instance\n *\n * @param value - Justify content value\n * @returns Node instance wrapper\n */\nconst setJustifyContent = (value) => (node) => {\n    const { yogaNode } = node;\n    if (!isNil(value) && yogaNode) {\n        const justifyContent = JUSTIFY_CONTENT[value] || Yoga.Justify.FlexStart;\n        yogaNode.setJustifyContent(justifyContent);\n    }\n    return node;\n};\n\n/**\n * Set margin top attribute to node's Yoga instance\n *\n * @param margin - Margin top\n * @param node - Node instance\n * @returns Node instance\n */\nconst setMarginTop = setYogaValue('margin', Yoga.Edge.Top);\n/**\n * Set margin right attribute to node's Yoga instance\n *\n * @param margin - Margin right\n * @param node - Node instance\n * @returns Node instance\n */\nconst setMarginRight = setYogaValue('margin', Yoga.Edge.Right);\n/**\n * Set margin bottom attribute to node's Yoga instance\n *\n * @param margin - Margin bottom\n * @param node - Node instance\n * @returns Node instance\n */\nconst setMarginBottom = setYogaValue('margin', Yoga.Edge.Bottom);\n/**\n * Set margin left attribute to node's Yoga instance\n *\n * @param margin - Margin left\n * @param node - Node instance\n * @returns Node instance\n */\nconst setMarginLeft = setYogaValue('margin', Yoga.Edge.Left);\n\n/**\n * Set padding top attribute to node's Yoga instance\n *\n * @param padding - Padding top\n * @param node - Node instance\n * @returns Node instance\n */\nconst setPaddingTop = setYogaValue('padding', Yoga.Edge.Top);\n/**\n * Set padding right attribute to node's Yoga instance\n *\n * @param padding - Padding right\n * @param node - Node instance\n * @returns Node instance\n */\nconst setPaddingRight = setYogaValue('padding', Yoga.Edge.Right);\n/**\n * Set padding bottom attribute to node's Yoga instance\n *\n * @param padding - Padding bottom\n * @param node Node instance\n * @returns Node instance\n */\nconst setPaddingBottom = setYogaValue('padding', Yoga.Edge.Bottom);\n/**\n * Set padding left attribute to node's Yoga instance\n *\n * @param padding - Padding left\n * @param node - Node instance\n * @returns Node instance\n */\nconst setPaddingLeft = setYogaValue('padding', Yoga.Edge.Left);\n\n/**\n * Set border top attribute to node's Yoga instance\n *\n * @param border - Border top width\n * @param node - Node instance\n * @returns Node instance\n */\nconst setBorderTop = setYogaValue('border', Yoga.Edge.Top);\n/**\n * Set border right attribute to node's Yoga instance\n *\n * @param border - Border right width\n * @param node - Node instance\n * @returns Node instance\n */\nconst setBorderRight = setYogaValue('border', Yoga.Edge.Right);\n/**\n * Set border bottom attribute to node's Yoga instance\n *\n * @param border - Border bottom width\n * @param node - Node instance\n * @returns Node instance\n */\nconst setBorderBottom = setYogaValue('border', Yoga.Edge.Bottom);\n/**\n * Set border left attribute to node's Yoga instance\n *\n * @param border - Border left width\n * @param node - Node instance\n * @returns Node instance\n */\nconst setBorderLeft = setYogaValue('border', Yoga.Edge.Left);\n\n/**\n * Set position top attribute to node's Yoga instance\n *\n * @param position - Position top\n * @param node - Node instance\n * @returns Node instance\n */\nconst setPositionTop = setYogaValue('position', Yoga.Edge.Top);\n/**\n * Set position right attribute to node's Yoga instance\n *\n * @param position - Position right\n * @param node - Node instance\n * @returns Node instance\n */\nconst setPositionRight = setYogaValue('position', Yoga.Edge.Right);\n/**\n * Set position bottom attribute to node's Yoga instance\n *\n * @param position - Position bottom\n * @param node - Node instance\n * @returns Node instance\n */\nconst setPositionBottom = setYogaValue('position', Yoga.Edge.Bottom);\n/**\n * Set position left attribute to node's Yoga instance\n *\n * @param position - Position left\n * @param node - Node instance\n * @returns Node instance\n */\nconst setPositionLeft = setYogaValue('position', Yoga.Edge.Left);\n\n/**\n * Set width to node's Yoga instance\n *\n * @param width - Width\n * @param node - Node instance\n * @returns Node instance\n */\nconst setWidth = setYogaValue('width');\n/**\n * Set min width to node's Yoga instance\n *\n * @param min - Width\n * @param node - Node instance\n * @returns Node instance\n */\nconst setMinWidth = setYogaValue('minWidth');\n/**\n * Set max width to node's Yoga instance\n *\n * @param max - Width\n * @param node - Node instance\n * @returns Node instance\n */\nconst setMaxWidth = setYogaValue('maxWidth');\n/**\n * Set height to node's Yoga instance\n *\n * @param height - Height\n * @param node - Node instance\n * @returns Node instance\n */\nconst setHeight = setYogaValue('height');\n/**\n * Set min height to node's Yoga instance\n *\n * @param min - Height\n * @param node - Node instance\n * @returns Node instance\n */\nconst setMinHeight = setYogaValue('minHeight');\n/**\n * Set max height to node's Yoga instance\n *\n * @param max - Height\n * @param node - Node instance\n * @returns Node instance\n */\nconst setMaxHeight = setYogaValue('maxHeight');\n\n/**\n * Set rowGap value to node's Yoga instance\n *\n * @param value - Gap value\n * @returns Node instance wrapper\n */\nconst setRowGap = setYogaValue('gap', Yoga.Gutter.Row);\n/**\n * Set columnGap value to node's Yoga instance\n *\n * @param value - Gap value\n * @returns Node instance wrapper\n */\nconst setColumnGap = setYogaValue('gap', Yoga.Gutter.Column);\n\nconst getAspectRatio = (viewbox) => {\n    if (!viewbox)\n        return null;\n    if (typeof viewbox === 'string')\n        return null;\n    return (viewbox.maxX - viewbox.minX) / (viewbox.maxY - viewbox.minY);\n};\n/**\n * Yoga svg measure function\n *\n * @param page\n * @param node\n * @returns Measure svg\n */\nconst measureCanvas$1 = (page, node) => (width, widthMode, height, heightMode) => {\n    const aspectRatio = getAspectRatio(node.props.viewBox) || 1;\n    if (widthMode === Yoga.MeasureMode.Exactly ||\n        widthMode === Yoga.MeasureMode.AtMost) {\n        return { width, height: width / aspectRatio };\n    }\n    if (heightMode === Yoga.MeasureMode.Exactly) {\n        return { width: height * aspectRatio };\n    }\n    return {};\n};\n\n/**\n * Get lines width (if any)\n *\n * @param node\n * @returns Lines width\n */\nconst linesWidth = (node) => {\n    if (!node.lines)\n        return 0;\n    return Math.max(0, ...node.lines.map((line) => line.xAdvance));\n};\n\n/**\n * Get lines height (if any)\n *\n * @param node\n * @returns Lines height\n */\nconst linesHeight = (node) => {\n    if (!node.lines)\n        return -1;\n    return node.lines.reduce((acc, line) => acc + line.box.height, 0);\n};\n\nconst ALIGNMENT_FACTORS = { center: 0.5, right: 1 };\n/**\n * Yoga text measure function\n *\n * @param page\n * @param node\n * @param fontStore\n * @returns {MeasureText} measure text function\n */\nconst measureText = (page, node, fontStore) => (width, widthMode, height) => {\n    if (widthMode === Yoga.MeasureMode.Exactly) {\n        if (!node.lines)\n            node.lines = layoutText(node, width, height, fontStore);\n        return { height: linesHeight(node) };\n    }\n    if (widthMode === Yoga.MeasureMode.AtMost) {\n        const alignFactor = ALIGNMENT_FACTORS[node.style?.textAlign] || 0;\n        if (!node.lines) {\n            node.lines = layoutText(node, width, height, fontStore);\n            node.alignOffset = (width - linesWidth(node)) * alignFactor; // Compensate align in variable width containers\n        }\n        return {\n            height: linesHeight(node),\n            width: Math.min(width, linesWidth(node)),\n        };\n    }\n    return {};\n};\n\n/**\n * Get image ratio\n *\n * @param node - Image node\n * @returns Image ratio\n */\nconst getRatio = (node) => {\n    return node.image?.data ? node.image.width / node.image.height : 1;\n};\n\n/**\n * Checks if page has auto height\n *\n * @param page\n * @returns Is page height auto\n */\nconst isHeightAuto = (page) => isNil(page.box?.height);\n\nconst SAFETY_HEIGHT$1 = 10;\n/**\n * Yoga image measure function\n *\n * @param page - Page\n * @param node - Node\n * @returns Measure image\n */\nconst measureImage = (page, node) => (width, widthMode, height, heightMode) => {\n    const imageRatio = getRatio(node);\n    const imageMargin = getMargin(node);\n    const pagePadding = getPadding(page);\n    // TODO: Check image percentage margins\n    const pageArea = isHeightAuto(page)\n        ? Infinity\n        : (page.box?.height || 0) -\n            pagePadding.paddingTop -\n            pagePadding.paddingBottom -\n            imageMargin.marginTop -\n            imageMargin.marginBottom -\n            SAFETY_HEIGHT$1;\n    // Skip measure if image data not present yet\n    if (!node.image)\n        return { width: 0, height: 0 };\n    if (widthMode === Yoga.MeasureMode.Exactly &&\n        heightMode === Yoga.MeasureMode.Undefined) {\n        const scaledHeight = width / imageRatio;\n        return { height: Math.min(pageArea, scaledHeight) };\n    }\n    if (heightMode === Yoga.MeasureMode.Exactly &&\n        (widthMode === Yoga.MeasureMode.AtMost ||\n            widthMode === Yoga.MeasureMode.Undefined)) {\n        return { width: Math.min(height * imageRatio, width) };\n    }\n    if (widthMode === Yoga.MeasureMode.Exactly &&\n        heightMode === Yoga.MeasureMode.AtMost) {\n        const scaledHeight = width / imageRatio;\n        return { height: Math.min(height, pageArea, scaledHeight) };\n    }\n    if (widthMode === Yoga.MeasureMode.AtMost &&\n        heightMode === Yoga.MeasureMode.AtMost) {\n        if (imageRatio > 1) {\n            return {\n                width,\n                height: Math.min(width / imageRatio, height),\n            };\n        }\n        return {\n            height,\n            width: Math.min(height * imageRatio, width),\n        };\n    }\n    return { height, width };\n};\n\nconst SAFETY_HEIGHT = 10;\nconst getMax = (values) => Math.max(-Infinity, ...values);\n/**\n * Helper object to predict canvas size\n * TODO: Implement remaining functions (as close as possible);\n */\nconst measureCtx = () => {\n    const ctx = {};\n    const points = [];\n    const nil = () => ctx;\n    const addPoint = (x, y) => points.push([x, y]);\n    const moveTo = (x, y) => {\n        addPoint(x, y);\n        return ctx;\n    };\n    const rect = (x, y, w, h) => {\n        addPoint(x, y);\n        addPoint(x + w, y);\n        addPoint(x, y + h);\n        addPoint(x + w, y + h);\n        return ctx;\n    };\n    const ellipse = (x, y, rx, ry) => {\n        ry = ry || rx;\n        addPoint(x - rx, y - ry);\n        addPoint(x + rx, y - ry);\n        addPoint(x + rx, y + ry);\n        addPoint(x - rx, y + ry);\n        return ctx;\n    };\n    const polygon = (...pts) => {\n        points.push(...pts);\n        return ctx;\n    };\n    // Change dimensions\n    ctx.rect = rect;\n    ctx.moveTo = moveTo;\n    ctx.lineTo = moveTo;\n    ctx.circle = ellipse;\n    ctx.polygon = polygon;\n    ctx.ellipse = ellipse;\n    ctx.roundedRect = rect;\n    // To be implemented\n    ctx.text = nil;\n    ctx.path = nil;\n    ctx.lineWidth = nil;\n    ctx.bezierCurveTo = nil;\n    ctx.quadraticCurveTo = nil;\n    ctx.scale = nil;\n    ctx.rotate = nil;\n    ctx.translate = nil;\n    // These don't change dimensions\n    ctx.dash = nil;\n    ctx.clip = nil;\n    ctx.save = nil;\n    ctx.fill = nil;\n    ctx.font = nil;\n    ctx.stroke = nil;\n    ctx.lineCap = nil;\n    ctx.opacity = nil;\n    ctx.restore = nil;\n    ctx.lineJoin = nil;\n    ctx.fontSize = nil;\n    ctx.fillColor = nil;\n    ctx.miterLimit = nil;\n    ctx.strokeColor = nil;\n    ctx.fillOpacity = nil;\n    ctx.strokeOpacity = nil;\n    ctx.linearGradient = nil;\n    ctx.radialGradient = nil;\n    ctx.getWidth = () => getMax(points.map((p) => p[0]));\n    ctx.getHeight = () => getMax(points.map((p) => p[1]));\n    return ctx;\n};\n/**\n * @typedef {Function} MeasureCanvas\n * @returns {{ width: number, height: number }} canvas width and height\n */\n/**\n * Yoga canvas measure function\n *\n * @param {Object} page\n * @param {Object} node\n * @returns {MeasureCanvas} measure canvas\n */\nconst measureCanvas = (page, node) => () => {\n    const imageMargin = getMargin(node);\n    const pagePadding = getPadding(page);\n    // TODO: Check image percentage margins\n    const pageArea = isHeightAuto(page)\n        ? Infinity\n        : (page.box?.height || 0) -\n            pagePadding.paddingTop -\n            pagePadding.paddingBottom -\n            imageMargin.marginTop -\n            imageMargin.marginBottom -\n            SAFETY_HEIGHT;\n    const ctx = measureCtx();\n    node.props.paint(ctx);\n    const width = ctx.getWidth();\n    const height = Math.min(pageArea, ctx.getHeight());\n    return { width, height };\n};\n\nconst isType$1 = (type) => (node) => node.type === type;\nconst isSvg = isType$1(P.Svg);\nconst isText$2 = isType$1(P.Text);\nconst isNote = isType$1(P.Note);\nconst isPage = isType$1(P.Page);\nconst isImage = isType$1(P.Image);\nconst isCanvas = isType$1(P.Canvas);\nconst isTextInstance$1 = isType$1(P.TextInstance);\nconst setNodeHeight = (node) => {\n    const value = isPage(node) ? node.box?.height : node.style?.height;\n    return setHeight(value);\n};\n/**\n * Set styles valeus into yoga node before layout calculation\n *\n * @param node\n */\nconst setYogaValues = (node) => {\n    compose(setNodeHeight(node), setWidth(node.style.width), setMinWidth(node.style.minWidth), setMaxWidth(node.style.maxWidth), setMinHeight(node.style.minHeight), setMaxHeight(node.style.maxHeight), setMarginTop(node.style.marginTop), setMarginRight(node.style.marginRight), setMarginBottom(node.style.marginBottom), setMarginLeft(node.style.marginLeft), setPaddingTop(node.style.paddingTop), setPaddingRight(node.style.paddingRight), setPaddingBottom(node.style.paddingBottom), setPaddingLeft(node.style.paddingLeft), setPositionType(node.style.position), setPositionTop(node.style.top), setPositionRight(node.style.right), setPositionBottom(node.style.bottom), setPositionLeft(node.style.left), setBorderTop(node.style.borderTopWidth), setBorderRight(node.style.borderRightWidth), setBorderBottom(node.style.borderBottomWidth), setBorderLeft(node.style.borderLeftWidth), setDisplay(node.style.display), setFlexDirection(node.style.flexDirection), setAlignSelf(node.style.alignSelf), setAlignContent(node.style.alignContent), setAlignItems(node.style.alignItems), setJustifyContent(node.style.justifyContent), setFlexWrap(node.style.flexWrap), setOverflow(node.style.overflow), setAspectRatio(node.style.aspectRatio), setFlexBasis(node.style.flexBasis), setFlexGrow(node.style.flexGrow), setFlexShrink(node.style.flexShrink), setRowGap(node.style.rowGap), setColumnGap(node.style.columnGap))(node);\n};\n/**\n * Inserts child into parent' yoga node\n *\n * @param parent parent\n * @returns Insert yoga nodes\n */\nconst insertYogaNodes = (parent) => (child) => {\n    parent.insertChild(child.yogaNode, parent.getChildCount());\n    return child;\n};\nconst setMeasureFunc = (node, page, fontStore) => {\n    const { yogaNode } = node;\n    if (isText$2(node)) {\n        yogaNode.setMeasureFunc(measureText(page, node, fontStore));\n    }\n    if (isImage(node)) {\n        yogaNode.setMeasureFunc(measureImage(page, node));\n    }\n    if (isCanvas(node)) {\n        yogaNode.setMeasureFunc(measureCanvas(page, node));\n    }\n    if (isSvg(node)) {\n        yogaNode.setMeasureFunc(measureCanvas$1(page, node));\n    }\n    return node;\n};\nconst isLayoutElement = (node) => !isText$2(node) && !isNote(node) && !isSvg(node);\n/**\n * @typedef {Function} CreateYogaNodes\n * @param {Object} node\n * @returns {Object} node with appended yoga node\n */\n/**\n * Creates and add yoga node to document tree\n * Handles measure function for text and image nodes\n *\n * @returns Create yoga nodes\n */\nconst createYogaNodes = (page, fontStore, yoga) => (node) => {\n    const yogaNode = yoga.node.create();\n    const result = Object.assign({}, node, { yogaNode });\n    setYogaValues(result);\n    if (isLayoutElement(node) && node.children) {\n        const resolveChild = compose(insertYogaNodes(yogaNode), createYogaNodes(page, fontStore, yoga));\n        result.children = node.children.map(resolveChild);\n    }\n    setMeasureFunc(result, page, fontStore);\n    return result;\n};\n/**\n * Performs yoga calculation\n *\n * @param page - Page node\n * @returns Page node\n */\nconst calculateLayout = (page) => {\n    page.yogaNode.calculateLayout();\n    return page;\n};\n/**\n * Saves Yoga layout result into 'box' attribute of node\n *\n * @param node\n * @returns Node with box data\n */\nconst persistDimensions = (node) => {\n    if (isTextInstance$1(node))\n        return node;\n    const box = Object.assign(getPadding(node), getMargin(node), getBorderWidth(node), getPosition(node), getDimension(node));\n    const newNode = Object.assign({}, node, { box });\n    if (!node.children)\n        return newNode;\n    const children = node.children.map(persistDimensions);\n    return Object.assign({}, newNode, { children });\n};\n/**\n * Removes yoga node from document tree\n *\n * @param node\n * @returns Node without yoga node\n */\nconst destroyYogaNodes = (node) => {\n    const newNode = Object.assign({}, node);\n    delete newNode.yogaNode;\n    if (!node.children)\n        return newNode;\n    const children = node.children.map(destroyYogaNodes);\n    return Object.assign({}, newNode, { children });\n};\n/**\n * Free yoga node from document tree\n *\n * @param node\n * @returns Node without yoga node\n */\nconst freeYogaNodes = (node) => {\n    if (node.yogaNode)\n        node.yogaNode.freeRecursive();\n    return node;\n};\n/**\n * Calculates page object layout using Yoga.\n * Takes node values from 'box' and 'style' attributes, and persist them back into 'box'\n * Destroy yoga values at the end.\n *\n * @param page - Object\n * @returns Page object with correct 'box' layout attributes\n */\nconst resolvePageDimensions = (page, fontStore, yoga) => {\n    if (isNil(page))\n        return null;\n    return compose(destroyYogaNodes, freeYogaNodes, persistDimensions, calculateLayout, createYogaNodes(page, fontStore, yoga))(page);\n};\n/**\n * Calculates root object layout using Yoga.\n *\n * @param node - Root object\n * @param fontStore - Font store\n * @returns Root object with correct 'box' layout attributes\n */\nconst resolveDimensions = (node, fontStore) => {\n    if (!node.children)\n        return node;\n    const resolveChild = (child) => resolvePageDimensions(child, fontStore, node.yoga);\n    const children = node.children.map(resolveChild);\n    return Object.assign({}, node, { children });\n};\n\nconst isText$1 = (node) => node.type === P.Text;\n// Prevent splitting elements by low decimal numbers\nconst SAFETY_THRESHOLD = 0.001;\nconst assingChildren = (children, node) => Object.assign({}, node, { children });\nconst getTop = (node) => node.box?.top || 0;\nconst allFixed = (nodes) => nodes.every(isFixed);\nconst isDynamic = (node) => node.props && 'render' in node.props;\nconst relayoutPage = compose(resolveTextLayout, resolvePageDimensions, resolveInheritance, resolvePageStyles);\nconst warnUnavailableSpace = (node) => {\n    console.warn(`Node of type ${node.type} can't wrap between pages and it's bigger than available page height`);\n};\nconst splitNodes = (height, contentArea, nodes) => {\n    const currentChildren = [];\n    const nextChildren = [];\n    for (let i = 0; i < nodes.length; i += 1) {\n        const child = nodes[i];\n        const futureNodes = nodes.slice(i + 1);\n        const futureFixedNodes = futureNodes.filter(isFixed);\n        const nodeTop = getTop(child);\n        const nodeHeight = child.box.height;\n        const isOutside = height <= nodeTop;\n        const shouldBreak$1 = shouldBreak(child, futureNodes, height);\n        const shouldSplit = height + SAFETY_THRESHOLD < nodeTop + nodeHeight;\n        const canWrap = getWrap(child);\n        const fitsInsidePage = nodeHeight <= contentArea;\n        if (isFixed(child)) {\n            nextChildren.push(child);\n            currentChildren.push(child);\n            continue;\n        }\n        if (isOutside) {\n            const box = Object.assign({}, child.box, { top: child.box.top - height });\n            const next = Object.assign({}, child, { box });\n            nextChildren.push(next);\n            continue;\n        }\n        if (!fitsInsidePage && !canWrap) {\n            currentChildren.push(child);\n            nextChildren.push(...futureNodes);\n            warnUnavailableSpace(child);\n            break;\n        }\n        if (shouldBreak$1) {\n            const box = Object.assign({}, child.box, { top: child.box.top - height });\n            const props = Object.assign({}, child.props, {\n                wrap: true,\n                break: false,\n            });\n            const next = Object.assign({}, child, { box, props });\n            currentChildren.push(...futureFixedNodes);\n            nextChildren.push(next, ...futureNodes);\n            break;\n        }\n        if (shouldSplit) {\n            const [currentChild, nextChild] = split(child, height, contentArea);\n            // All children are moved to the next page, it doesn't make sense to show the parent on the current page\n            if (child.children.length > 0 && currentChild.children.length === 0) {\n                // But if the current page is empty then we can just include the parent on the current page\n                if (currentChildren.length === 0) {\n                    currentChildren.push(child, ...futureFixedNodes);\n                    nextChildren.push(...futureNodes);\n                }\n                else {\n                    const box = Object.assign({}, child.box, {\n                        top: child.box.top - height,\n                    });\n                    const next = Object.assign({}, child, { box });\n                    currentChildren.push(...futureFixedNodes);\n                    nextChildren.push(next, ...futureNodes);\n                }\n                break;\n            }\n            if (currentChild)\n                currentChildren.push(currentChild);\n            if (nextChild)\n                nextChildren.push(nextChild);\n            continue;\n        }\n        currentChildren.push(child);\n    }\n    return [currentChildren, nextChildren];\n};\nconst splitChildren = (height, contentArea, node) => {\n    const children = node.children || [];\n    const availableHeight = height - getTop(node);\n    return splitNodes(availableHeight, contentArea, children);\n};\nconst splitView = (node, height, contentArea) => {\n    const [currentNode, nextNode] = splitNode(node, height);\n    const [currentChilds, nextChildren] = splitChildren(height, contentArea, node);\n    return [\n        assingChildren(currentChilds, currentNode),\n        assingChildren(nextChildren, nextNode),\n    ];\n};\nconst split = (node, height, contentArea) => isText$1(node) ? splitText(node, height) : splitView(node, height, contentArea);\nconst shouldResolveDynamicNodes = (node) => {\n    const children = node.children || [];\n    return isDynamic(node) || children.some(shouldResolveDynamicNodes);\n};\nconst resolveDynamicNodes = (props, node) => {\n    const isNodeDynamic = isDynamic(node);\n    // Call render prop on dynamic nodes and append result to children\n    const resolveChildren = (children = []) => {\n        if (isNodeDynamic) {\n            const res = node.props.render(props);\n            return (createInstances(res)\n                .filter(Boolean)\n                // @ts-expect-error rework dynamic nodes. conflicting types\n                .map((n) => resolveDynamicNodes(props, n)));\n        }\n        return children.map((c) => resolveDynamicNodes(props, c));\n    };\n    // We reset dynamic text box so it can be computed again later on\n    const resetHeight = isNodeDynamic && isText$1(node);\n    const box = resetHeight ? { ...node.box, height: 0 } : node.box;\n    const children = resolveChildren(node.children);\n    // @ts-expect-error handle text here specifically\n    const lines = isNodeDynamic ? null : node.lines;\n    return Object.assign({}, node, { box, lines, children });\n};\nconst resolveDynamicPage = (props, page, fontStore, yoga) => {\n    if (shouldResolveDynamicNodes(page)) {\n        const resolvedPage = resolveDynamicNodes(props, page);\n        return relayoutPage(resolvedPage, fontStore, yoga);\n    }\n    return page;\n};\nconst splitPage = (page, pageNumber, fontStore, yoga) => {\n    const wrapArea = getWrapArea(page);\n    const contentArea = getContentArea(page);\n    const dynamicPage = resolveDynamicPage({ pageNumber }, page, fontStore, yoga);\n    const height = page.style.height;\n    const [currentChilds, nextChilds] = splitNodes(wrapArea, contentArea, dynamicPage.children);\n    const relayout = (node) => \n    // @ts-expect-error rework pagination\n    relayoutPage(node, fontStore, yoga);\n    const currentBox = { ...page.box, height };\n    const currentPage = relayout(Object.assign({}, page, { box: currentBox, children: currentChilds }));\n    if (nextChilds.length === 0 || allFixed(nextChilds))\n        return [currentPage, null];\n    const nextBox = omit('height', page.box);\n    const nextProps = omit('bookmark', page.props);\n    const nextPage = relayout(Object.assign({}, page, {\n        props: nextProps,\n        box: nextBox,\n        children: nextChilds,\n    }));\n    return [currentPage, nextPage];\n};\nconst resolvePageIndices = (fontStore, yoga, page, pageNumber, pages) => {\n    const totalPages = pages.length;\n    const props = {\n        totalPages,\n        pageNumber: pageNumber + 1,\n        subPageNumber: page.subPageNumber + 1,\n        subPageTotalPages: page.subPageTotalPages,\n    };\n    return resolveDynamicPage(props, page, fontStore, yoga);\n};\nconst assocSubPageData = (subpages) => {\n    return subpages.map((page, i) => ({\n        ...page,\n        subPageNumber: i,\n        subPageTotalPages: subpages.length,\n    }));\n};\nconst dissocSubPageData = (page) => {\n    return omit(['subPageNumber', 'subPageTotalPages'], page);\n};\nconst paginate = (page, pageNumber, fontStore, yoga) => {\n    if (!page)\n        return [];\n    if (page.props?.wrap === false)\n        return [page];\n    let splittedPage = splitPage(page, pageNumber, fontStore, yoga);\n    const pages = [splittedPage[0]];\n    let nextPage = splittedPage[1];\n    while (nextPage !== null) {\n        splittedPage = splitPage(nextPage, pageNumber + pages.length, fontStore, yoga);\n        pages.push(splittedPage[0]);\n        nextPage = splittedPage[1];\n    }\n    return pages;\n};\n/**\n * Performs pagination. This is the step responsible of breaking the whole document\n * into pages following pagiation rules, such as `fixed`, `break` and dynamic nodes.\n *\n * @param root - Document node\n * @param fontStore - Font store\n * @returns Layout node\n */\nconst resolvePagination = (root, fontStore) => {\n    let pages = [];\n    let pageNumber = 1;\n    for (let i = 0; i < root.children.length; i += 1) {\n        const page = root.children[i];\n        let subpages = paginate(page, pageNumber, fontStore, root.yoga);\n        subpages = assocSubPageData(subpages);\n        pageNumber += subpages.length;\n        pages = pages.concat(subpages);\n    }\n    pages = pages.map((...args) => dissocSubPageData(resolvePageIndices(fontStore, root.yoga, ...args)));\n    return assingChildren(pages, root);\n};\n\n/**\n * Translates page percentage horizontal paddings in fixed ones\n *\n * @param container - Page container\n * @returns Resolve page horizontal padding\n */\nconst resolvePageHorizontalPadding = (container) => (value) => {\n    const match = matchPercent(value);\n    const width = container.width;\n    return match ? match.percent * width : value;\n};\n/**\n * Translates page percentage vertical paddings in fixed ones\n *\n * @param container - Page container\n * @returns Resolve page vertical padding\n */\nconst resolvePageVerticalPadding = (container) => (value) => {\n    const match = matchPercent(value);\n    const height = container.height;\n    return match ? match.percent * height : value;\n};\n/**\n * Translates page percentage paddings in fixed ones\n *\n * @param page\n * @returns Page with fixed paddings\n */\nconst resolvePagePaddings = (page) => {\n    const container = page.style;\n    const style = evolve({\n        paddingTop: resolvePageVerticalPadding(container),\n        paddingLeft: resolvePageHorizontalPadding(container),\n        paddingRight: resolvePageHorizontalPadding(container),\n        paddingBottom: resolvePageVerticalPadding(container),\n    }, page.style);\n    return Object.assign({}, page, { style });\n};\n/**\n * Translates all pages percentage paddings in fixed ones\n * This has to be computed from pages calculated size and not by Yoga\n * because at this point we didn't performed pagination yet.\n *\n * @param root - Document root\n * @returns Document root with translated page paddings\n */\nconst resolvePagesPaddings = (root) => {\n    if (!root.children)\n        return root;\n    const children = root.children.map(resolvePagePaddings);\n    return Object.assign({}, root, { children });\n};\n\nconst resolveRadius = (box) => (value) => {\n    if (!value)\n        return undefined;\n    const match = matchPercent(value);\n    return match ? match.percent * Math.min(box.width, box.height) : value;\n};\n/**\n * Transforms percent border radius into fixed values\n *\n * @param node\n * @returns Node\n */\nconst resolvePercentRadius = (node) => {\n    const style = evolve({\n        borderTopLeftRadius: resolveRadius(node.box),\n        borderTopRightRadius: resolveRadius(node.box),\n        borderBottomRightRadius: resolveRadius(node.box),\n        borderBottomLeftRadius: resolveRadius(node.box),\n    }, node.style || {});\n    const newNode = Object.assign({}, node, { style });\n    if (!node.children)\n        return newNode;\n    const children = node.children.map(resolvePercentRadius);\n    return Object.assign({}, newNode, { children });\n};\n\n/**\n * Transform percent height into fixed\n *\n * @param height\n * @returns Height\n */\nconst transformHeight = (pageArea, height) => {\n    const match = matchPercent(height);\n    return match ? match.percent * pageArea : height;\n};\n/**\n * Get page area (height minus paddings)\n *\n * @param page\n * @returns Page area\n */\nconst getPageArea = (page) => {\n    const pageHeight = page.style.height;\n    const pagePaddingTop = (page.style?.paddingTop || 0);\n    const pagePaddingBottom = (page.style?.paddingBottom || 0);\n    return pageHeight - pagePaddingTop - pagePaddingBottom;\n};\n/**\n * Transform node percent height to fixed\n *\n * @param page\n * @param node\n * @returns Transformed node\n */\nconst resolveNodePercentHeight = (page, node) => {\n    if (isNil(page.style?.height))\n        return node;\n    if (isNil(node.style?.height))\n        return node;\n    const pageArea = getPageArea(page);\n    const height = transformHeight(pageArea, node.style.height);\n    const style = Object.assign({}, node.style, { height });\n    return Object.assign({}, node, { style });\n};\n/**\n * Transform page immediate children with percent height to fixed\n *\n * @param page\n * @returns Transformed page\n */\nconst resolvePagePercentHeight = (page) => {\n    if (!page.children)\n        return page;\n    const resolveChild = (child) => resolveNodePercentHeight(page, child);\n    const children = page.children.map(resolveChild);\n    return Object.assign({}, page, { children });\n};\n/**\n * Transform all page immediate children with percent height to fixed.\n * This is needed for computing correct dimensions on pre-pagination layout.\n *\n * @param root - Document root\n * @returns Transformed document root\n */\nconst resolvePercentHeight = (root) => {\n    if (!root.children)\n        return root;\n    const children = root.children.map(resolvePagePercentHeight);\n    return Object.assign({}, root, { children });\n};\n\nconst isType = (type) => (node) => node.type === type;\nconst isLink = isType(P.Link);\nconst isText = isType(P.Text);\nconst isTextInstance = isType(P.TextInstance);\n/**\n * Checks if node has render prop\n *\n * @param node\n * @returns Has render prop?\n */\nconst hasRenderProp = (node) => 'render' in node.props;\n/**\n * Checks if node is text type (Text or TextInstance)\n *\n * @param node\n * @returns Are all children text instances?\n */\nconst isTextType = (node) => isText(node) || isTextInstance(node);\n/**\n * Checks if is tet link that needs to be wrapped in Text\n *\n * @param node\n * @returns Are all children text instances?\n */\nconst isTextLink = (node) => {\n    const children = node.children || [];\n    // Text string inside a Link\n    if (children.every(isTextInstance))\n        return true;\n    // Text node inside a Link\n    if (children.every(isText))\n        return false;\n    return children.every(isTextType);\n};\n/**\n * Wraps node children inside Text node\n *\n * @param node\n * @returns Node with intermediate Text child\n */\nconst wrapText = (node) => {\n    const textElement = {\n        type: P.Text,\n        props: {},\n        style: {},\n        box: {},\n        children: node.children,\n    };\n    return Object.assign({}, node, { children: [textElement] });\n};\nconst transformLink = (node) => {\n    if (!isLink(node))\n        return node;\n    // If has render prop substitute the instance by a Text, that will\n    // ultimately render the inline Link via the textkit PDF renderer.\n    if (hasRenderProp(node))\n        return Object.assign({}, node, { type: P.Text });\n    // If is a text link (either contains Text or TextInstance), wrap it\n    // inside a Text element so styles are applied correctly\n    if (isTextLink(node))\n        return wrapText(node);\n    return node;\n};\n/**\n * Transforms Link layout to correctly render text and dynamic rendered links\n *\n * @param node\n * @returns Node with link substitution\n */\nconst resolveLinkSubstitution = (node) => {\n    if (!node.children)\n        return node;\n    const resolveChild = compose(transformLink, resolveLinkSubstitution);\n    const children = node.children.map(resolveChild);\n    return Object.assign({}, node, { children });\n};\n\nconst layout = asyncCompose(resolveZIndex, resolveOrigin, resolveAssets, resolvePagination, resolveTextLayout, resolvePercentRadius, resolveDimensions, resolveSvg, resolveAssets, resolveInheritance, resolvePercentHeight, resolvePagesPaddings, resolveStyles, resolveLinkSubstitution, resolveBookmarks, resolvePageSizes, resolveYoga);\n\nexport { layout as default };\n"],"mappings":"AAAA,SAASA,UAAU,EAAEC,UAAU,EAAEC,UAAU,IAAIC,YAAY,EAAEC,OAAO,EAAEC,IAAI,EAAEC,OAAO,EAAEC,MAAM,EAAEC,SAAS,EAAEC,YAAY,EAAEC,SAAS,EAAEC,KAAK,EAAEC,IAAI,EAAEC,YAAY,QAAQ,gBAAgB;AAClL,OAAO,KAAKC,CAAC,MAAM,uBAAuB;AAC1C,OAAOC,YAAY,IAAIC,cAAc,EAAEC,OAAO,QAAQ,uBAAuB;AAC7E,OAAOC,YAAY,IAAIC,gBAAgB,EAAEC,eAAe,EAAEC,cAAc,EAAEC,cAAc,EAAEC,aAAa,EAAEC,WAAW,EAAEC,IAAI,EAAEC,aAAa,QAAQ,oBAAoB;AACrK,OAAO,KAAKC,IAAI,MAAM,kBAAkB;AACxC,SAASC,QAAQ,IAAIC,UAAU,QAAQ,kBAAkB;AACzD,OAAOC,UAAU,MAAM,aAAa;AACpC,OAAOC,YAAY,MAAM,kBAAkB;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,aAAa,GAAGA,CAACC,IAAI,EAAEC,cAAc,KAAK;EAC5C,QAAQA,cAAc;IAClB,KAAK,WAAW;MACZ,OAAOD,IAAI,CAACE,WAAW,CAAC,CAAC;IAC7B,KAAK,WAAW;MACZ,OAAOF,IAAI,CAACG,WAAW,CAAC,CAAC;IAC7B,KAAK,YAAY;MACb,OAAOnC,UAAU,CAACgC,IAAI,CAAC;IAC3B,KAAK,YAAY;MACb,OAAOjC,UAAU,CAACiC,IAAI,CAAC;IAC3B;MACI,OAAOA,IAAI;EACnB;AACJ,CAAC;AAED,MAAMI,OAAO,GAAIC,IAAI,IAAKA,IAAI,CAACC,IAAI,KAAKzB,CAAC,CAAC0B,KAAK;AAC/C,MAAMC,gBAAgB,GAAIH,IAAI,IAAKA,IAAI,CAACC,IAAI,KAAKzB,CAAC,CAAC4B,YAAY;AAC/D,MAAMC,SAAS,GAAG;EACdlB,IAAI;EACJD,WAAW;EACXD,aAAa;EACbD,cAAc;EACdD,cAAc;EACdD,eAAe;EACfD;AACJ,CAAC;AACD,MAAMyB,QAAQ,GAAG1B,YAAY,CAACyB,SAAS,CAAC;AACxC,MAAME,cAAc,GAAGA,CAACC,SAAS,EAAEC,QAAQ,KAAK;EAC5C,IAAI,CAACA,QAAQ,EACT,OAAO,CAAC;IAAEC,MAAM,EAAE;EAAG,CAAC,CAAC;EAC3B,MAAMC,SAAS,GAAG,EAAE;EACpB,MAAM;IAAEC,IAAI,GAAG,OAAO;IAAEC,UAAU,GAAG,WAAW;IAAEC,UAAU;IAAEC,SAAS;IAAEC,QAAQ,GAAG,EAAE;IAAEC,mBAAmB;IAAEC,mBAAmB;IAAEC,aAAa;IAAEC;EAAS,CAAC,GAAGX,QAAQ,CAACY,KAAK;EAC5K,MAAMC,eAAe,GAAGb,QAAQ,CAACY,KAAK,CAACrC,cAAc;EACrD,MAAMuC,YAAY,GAAG,OAAOV,UAAU,KAAK,QAAQ,GAAG,CAACA,UAAU,CAAC,GAAG,CAAC,IAAIA,UAAU,IAAI,EAAE,CAAC,CAAC;EAC5F;EACAU,YAAY,CAACC,IAAI,CAAC,WAAW,CAAC;EAC9B,MAAMC,IAAI,GAAGF,YAAY,CAACG,GAAG,CAAEC,cAAc,IAAK;IAC9C,MAAMC,IAAI,GAAG;MAAEf,UAAU,EAAEc,cAAc;MAAEb,UAAU;MAAEC;IAAU,CAAC;IAClE,MAAMc,GAAG,GAAGrB,SAAS,CAACsB,OAAO,CAACF,IAAI,CAAC;IACnC,OAAOC,GAAG,EAAEE,IAAI;EACpB,CAAC,CAAC;EACF,MAAMC,UAAU,GAAG;IACfP,IAAI;IACJL,OAAO;IACPJ,QAAQ;IACRiB,KAAK,EAAErB,IAAI;IACXsB,cAAc,EAAEhB,mBAAmB;IACnCiB,SAAS,EAAEb,eAAe,KAAK,WAAW,IACtCA,eAAe,KAAK,wBAAwB,IAC5CA,eAAe,KAAK,wBAAwB;IAChDc,cAAc,EAAEnB,mBAAmB,IAAIL,IAAI;IAC3CyB,MAAM,EAAEf,eAAe,KAAK,cAAc,IACtCA,eAAe,KAAK,wBAAwB,IAC5CA,eAAe,KAAK,wBAAwB;IAChDgB,WAAW,EAAEpB,mBAAmB;IAChCqB,WAAW,EAAEtB,mBAAmB,IAAIL;EACxC,CAAC;EACD,KAAK,IAAI4B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG/B,QAAQ,CAACgC,QAAQ,CAACC,MAAM,EAAEF,CAAC,IAAI,CAAC,EAAE;IAClD,MAAMG,KAAK,GAAGlC,QAAQ,CAACgC,QAAQ,CAACD,CAAC,CAAC;IAClC,IAAIrC,gBAAgB,CAACwC,KAAK,CAAC,EAAE;MACzBhC,SAAS,CAACa,IAAI,CAAC;QACXd,MAAM,EAAEhB,aAAa,CAACiD,KAAK,CAACC,KAAK,EAAEzB,aAAa,CAAC;QACjDa;MACJ,CAAC,CAAC;IACN,CAAC,MACI,IAAIW,KAAK,EAAE;MACZhC,SAAS,CAACa,IAAI,CAAC,GAAGjB,cAAc,CAACC,SAAS,EAAEmC,KAAK,CAAC,CAAC;IACvD;EACJ;EACA,OAAOhC,SAAS;AACpB,CAAC;AACD,MAAMkC,qBAAqB,GAAGA,CAACrC,SAAS,EAAEC,QAAQ,KAAKrB,aAAa,CAACmB,cAAc,CAACC,SAAS,EAAEC,QAAQ,CAAC,CAAC;AACzG,MAAMqC,cAAc,GAAG,YAAY;AACnC,MAAMC,sBAAsB,GAAG;EAAEC,MAAM,EAAE,CAAC,GAAG;EAAEC,KAAK,EAAE,CAAC;AAAI,CAAC;AAC5D,MAAMC,WAAW,GAAI1C,SAAS,IAAK,CAACR,IAAI,EAAEmD,OAAO,KAAK;EAClD,MAAMC,gBAAgB,GAAGP,qBAAqB,CAACrC,SAAS,EAAER,IAAI,CAAC;EAC/D,MAAMqD,CAAC,GAAGrD,IAAI,CAACqB,KAAK,CAACgC,CAAC,KAAKC,SAAS,GAAGH,OAAO,GAAGnD,IAAI,CAACqB,KAAK,CAACgC,CAAC;EAC7D,MAAME,CAAC,GAAGvD,IAAI,CAACqB,KAAK,EAAEkC,CAAC,IAAI,CAAC;EAC5B,MAAMC,SAAS,GAAG;IAAEH,CAAC;IAAEE,CAAC;IAAEE,KAAK,EAAEX,cAAc;IAAEY,MAAM,EAAEZ;EAAe,CAAC;EACzE,MAAMa,mBAAmB,GAAG3D,IAAI,CAACqB,KAAK,CAACsC,mBAAmB,IACtDnD,SAAS,EAAEoD,sBAAsB,CAAC,CAAC,IACnC,IAAI;EACR,MAAMC,aAAa,GAAG;IAAEF,mBAAmB;IAAEZ;EAAuB,CAAC;EACrE,MAAMe,KAAK,GAAGxD,QAAQ,CAAC8C,gBAAgB,EAAEI,SAAS,EAAEK,aAAa,CAAC,CAACE,IAAI,CAAC,CAAC;EACzE,OAAOC,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEjE,IAAI,EAAE;IAAE8D;EAAM,CAAC,CAAC;AAC7C,CAAC;AACD;AACA,MAAMI,cAAc,GAAIlE,IAAI,IAAK;EAC7B,MAAMyC,QAAQ,GAAGzC,IAAI,CAACyC,QAAQ,CAACf,GAAG,CAAC,CAACiB,KAAK,EAAEwB,KAAK,KAAK;IACjD,IAAI,CAACpE,OAAO,CAAC4C,KAAK,CAAC,EACf,OAAOA,KAAK;IAChB,MAAMyB,YAAY,GAAGzB,KAAK,CAACF,QAAQ,CAAC,CAAC,CAAC;IACtC,IAAIE,KAAK,CAACtB,KAAK,CAACgC,CAAC,KAAKC,SAAS,IAC3Ba,KAAK,GAAGnE,IAAI,CAACyC,QAAQ,CAACC,MAAM,GAAG,CAAC,IAChC0B,YAAY,EAAExB,KAAK,EAAE;MACrB,OAAOoB,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEtB,KAAK,EAAE;QAC5BF,QAAQ,EAAE,CAAC;UAAE,GAAG2B,YAAY;UAAExB,KAAK,EAAE,GAAGwB,YAAY,CAACxB,KAAK;QAAI,CAAC;MACnE,CAAC,CAAC;IACN;IACA,OAAOD,KAAK;EAChB,CAAC,EAAE,EAAE,CAAC;EACN,OAAOqB,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEjE,IAAI,EAAE;IAAEyC;EAAS,CAAC,CAAC;AAChD,CAAC;AACD,MAAM4B,YAAY,GAAGA,CAAC7D,SAAS,EAAER,IAAI,KAAK;EACtC,IAAI,CAACA,IAAI,CAACyC,QAAQ,EACd,OAAOzC,IAAI;EACf,IAAIsE,cAAc,GAAGtE,IAAI,CAACqB,KAAK,EAAEgC,CAAC,IAAI,CAAC;EACvC,MAAMkB,QAAQ,GAAGrB,WAAW,CAAC1C,SAAS,CAAC;EACvC,MAAMgE,UAAU,GAAGN,cAAc,CAAClE,IAAI,CAAC;EACvC,MAAMyC,QAAQ,GAAG+B,UAAU,CAAC/B,QAAQ,CAACf,GAAG,CAAEiB,KAAK,IAAK;IAChD,MAAM8B,eAAe,GAAGF,QAAQ,CAAC5B,KAAK,EAAE2B,cAAc,CAAC;IACvDA,cAAc,IAAIG,eAAe,CAACX,KAAK,CAAC,CAAC,CAAC,CAACY,QAAQ;IACnD,OAAOD,eAAe;EAC1B,CAAC,CAAC;EACF,OAAOT,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEjE,IAAI,EAAE;IAAEyC;EAAS,CAAC,CAAC;AAChD,CAAC;AAED,MAAMkC,MAAM,GAAI3E,IAAI,IAAKA,IAAI,CAACC,IAAI,KAAKzB,CAAC,CAACoG,IAAI;AAC7C,MAAMC,OAAO,GAAI7E,IAAI,IAAK;EACtB,MAAMyC,QAAQ,GAAGzC,IAAI,CAACyC,QAAQ,IAAI,EAAE;EACpC,MAAMqC,IAAI,GAAGrC,QAAQ,CAACsC,IAAI,CAACJ,MAAM,CAAC;EAClC,MAAMK,MAAM,GAAGF,IAAI,EAAErC,QAAQ,IAAI,EAAE;EACnC,OAAOuC,MAAM,CAACC,MAAM,CAAC,CAACC,GAAG,EAAEtC,KAAK,KAAK;IACjC,MAAMuC,EAAE,GAAGvC,KAAK,CAACvB,KAAK,EAAE8D,EAAE;IAC1B,IAAIA,EAAE,EACFD,GAAG,CAACC,EAAE,CAAC,GAAGvC,KAAK;IACnB,OAAOsC,GAAG;EACd,CAAC,EAAE,CAAC,CAAC,CAAC;AACV,CAAC;AAED,MAAME,SAAS,GAAIpF,IAAI,IAAKA,IAAI,CAACC,IAAI,KAAKzB,CAAC,CAACoG,IAAI;AAChD,MAAMS,UAAU,GAAIrF,IAAI,IAAK;EACzB,IAAI,CAACA,IAAI,CAACyC,QAAQ,EACd,OAAOzC,IAAI;EACf,MAAMyC,QAAQ,GAAGzC,IAAI,CAACyC,QAAQ,CAAC6C,MAAM,CAACF,SAAS,CAAC;EAChD,OAAOpB,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEjE,IAAI,EAAE;IAAEyC;EAAS,CAAC,CAAC;AAChD,CAAC;AACD,MAAM8C,SAAS,GAAG,4BAA4B;AAC9C,MAAMC,UAAU,GAAGA,CAACV,IAAI,EAAElC,KAAK,KAAK;EAChC,IAAI,CAACA,KAAK,EACN,OAAOU,SAAS;EACpB,IAAI,CAACiC,SAAS,CAACE,IAAI,CAAC7C,KAAK,CAAC,EACtB,OAAOA,KAAK;EAChB,MAAM8C,KAAK,GAAG9C,KAAK,CAAC8C,KAAK,CAACH,SAAS,CAAC;EACpC,OAAOT,IAAI,CAACY,KAAK,CAAC,CAAC,CAAC,CAAC;AACzB,CAAC;AACD,MAAMC,aAAa,GAAIb,IAAI,IAAM9E,IAAI,IAAK;EACtC,MAAMqB,KAAK,GAAGrB,IAAI,CAACqB,KAAK;EACxB,MAAMT,IAAI,GAAG,MAAM,IAAIS,KAAK,GAAGmE,UAAU,CAACV,IAAI,EAAEzD,KAAK,EAAET,IAAI,CAAC,GAAG0C,SAAS;EACxE,MAAMsC,QAAQ,GAAG,UAAU,IAAIvE,KAAK,GAC9BmE,UAAU,CAACV,IAAI,EAAEzD,KAAK,EAAEuE,QAAQ,CAAC,GACjCtC,SAAS;EACf,MAAMuC,QAAQ,GAAG7B,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEjE,IAAI,CAACqB,KAAK,EAAE;IAAET,IAAI;IAAEgF;EAAS,CAAC,CAAC;EAClE,MAAMnD,QAAQ,GAAGzC,IAAI,CAACyC,QAAQ,GACxBzC,IAAI,CAACyC,QAAQ,CAACf,GAAG,CAACiE,aAAa,CAACb,IAAI,CAAC,CAAC,GACtCxB,SAAS;EACf,OAAOU,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEjE,IAAI,EAAE;IAAEqB,KAAK,EAAEwE,QAAQ;IAAEpD;EAAS,CAAC,CAAC;AACjE,CAAC;AACD,MAAMqD,SAAS,GAAIC,IAAI,IAAK;EACxB,IAAI,CAACA,IAAI,CAACtD,QAAQ,EACd,OAAOsD,IAAI;EACf,MAAMjB,IAAI,GAAGD,OAAO,CAACkB,IAAI,CAAC;EAC1B,MAAMtD,QAAQ,GAAGsD,IAAI,CAACtD,QAAQ,CAACf,GAAG,CAACiE,aAAa,CAACb,IAAI,CAAC,CAAC;EACvD,OAAOd,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAE8B,IAAI,EAAE;IAAEtD;EAAS,CAAC,CAAC;AAChD,CAAC;AACD,MAAMuD,WAAW,GAAIhG,IAAI,IAAK;EAC1B,OAAOqF,UAAU,CAACS,SAAS,CAAC9F,IAAI,CAAC,CAAC;AACtC,CAAC;AAED,MAAMiG,YAAY,GAAIrD,KAAK,IAAK;EAC5B,IAAI,CAACA,KAAK,EACN,OAAO,IAAI;EACf,IAAI,OAAOA,KAAK,KAAK,QAAQ,EACzB,OAAOA,KAAK;EAChB,MAAMoC,MAAM,GAAGpC,KAAK,CAACsD,KAAK,CAAC,QAAQ,CAAC,CAACxE,GAAG,CAAC7D,YAAY,CAAC;EACtD,IAAImH,MAAM,CAACtC,MAAM,KAAK,CAAC,EACnB,OAAO,IAAI;EACf,OAAO;IAAEyD,IAAI,EAAEnB,MAAM,CAAC,CAAC,CAAC;IAAEoB,IAAI,EAAEpB,MAAM,CAAC,CAAC,CAAC;IAAEqB,IAAI,EAAErB,MAAM,CAAC,CAAC,CAAC;IAAEsB,IAAI,EAAEtB,MAAM,CAAC,CAAC;EAAE,CAAC;AACjF,CAAC;AAED,MAAMuB,cAAc,GAAIvG,IAAI,IAAK;EAC7B,MAAMwG,OAAO,GAAGP,YAAY,CAACjG,IAAI,CAACqB,KAAK,CAACoF,OAAO,CAAC;EAChD,IAAID,OAAO,EAAE;IACT,OAAO;MAAE/C,KAAK,EAAE+C,OAAO,CAACH,IAAI;MAAE3C,MAAM,EAAE8C,OAAO,CAACF;IAAK,CAAC;EACxD;EACA,IAAItG,IAAI,CAACqB,KAAK,CAACoC,KAAK,IAAIzD,IAAI,CAACqB,KAAK,CAACqC,MAAM,EAAE;IACvC,OAAO;MACHD,KAAK,EAAE5F,YAAY,CAACmC,IAAI,CAACqB,KAAK,CAACoC,KAAK,CAAC;MACrCC,MAAM,EAAE7F,YAAY,CAACmC,IAAI,CAACqB,KAAK,CAACqC,MAAM;IAC1C,CAAC;EACL;EACA,OAAO;IAAED,KAAK,EAAE,CAAC;IAAEC,MAAM,EAAE;EAAE,CAAC;AAClC,CAAC;AAED,MAAMgD,wBAAwB,GAAG,CAC7B,GAAG,EACH,GAAG,EACH,UAAU,EACV,UAAU,EACV,SAAS,EACT,MAAM,EACN,aAAa,EACb,UAAU,EACV,QAAQ,EACR,eAAe,EACf,gBAAgB,EAChB,eAAe,EACf,aAAa,EACb,YAAY,EACZ,kBAAkB,EAClB,OAAO,EACP,YAAY,EACZ,UAAU,EACV,WAAW,EACX,YAAY,EACZ,eAAe,EACf,SAAS,EACT,gBAAgB,EAChB,YAAY,EACZ,WAAW,EACX,YAAY,EACZ,aAAa,CAChB;AACD;AACA,MAAMC,wBAAwB,GAAG7I,OAAO,CAAC,CAAC,GAAG,CAAC,EAAE4I,wBAAwB,CAAC;AACzE,MAAME,mBAAmB,GAAG;EACxB,CAACpI,CAAC,CAACqI,IAAI,GAAGF;AACd,CAAC;AACD,MAAMG,eAAe,GAAI9G,IAAI,IAAK;EAC9B,MAAMqB,KAAK,GAAGrB,IAAI,CAACqB,KAAK,IAAI,CAAC,CAAC;EAC9B,MAAM0F,iBAAiB,GAAGH,mBAAmB,CAAC5G,IAAI,CAACC,IAAI,CAAC,IAAIyG,wBAAwB;EACpF,OAAO3I,IAAI,CAACgJ,iBAAiB,EAAE1F,KAAK,CAAC;AACzC,CAAC;AACD,MAAM2F,YAAY,GAAIhH,IAAI,IAAK;EAC3B,IAAI,CAACA,IAAI,CAACyC,QAAQ,EACd,OAAOzC,IAAI;EACf,MAAMiH,cAAc,GAAGH,eAAe,CAAC9G,IAAI,CAAC;EAC5C,MAAMyC,QAAQ,GAAGzC,IAAI,CAACyC,QAAQ,CAACf,GAAG,CAAEiB,KAAK,IAAK;IAC1C,MAAMtB,KAAK,GAAG2C,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEgD,cAAc,EAAEtE,KAAK,CAACtB,KAAK,IAAI,CAAC,CAAC,CAAC;IAClE,MAAM6F,QAAQ,GAAGlD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEtB,KAAK,EAAE;MAAEtB;IAAM,CAAC,CAAC;IACpD,OAAO2F,YAAY,CAACE,QAAQ,CAAC;EACjC,CAAC,CAAC;EACF,OAAOlD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEjE,IAAI,EAAE;IAAEyC;EAAS,CAAC,CAAC;AAChD,CAAC;AAED,MAAM0E,gBAAgB,GAAIvE,KAAK,IAAK;EAChC,IAAI,OAAOA,KAAK,KAAK,QAAQ,EACzB,OAAOA,KAAK;EAChB,MAAM8C,KAAK,GAAG9C,KAAK,CACdwE,OAAO,CAAC,eAAe,EAAE,GAAG,CAAC,CAC7BA,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CACvBlB,KAAK,CAAC,GAAG,CAAC;EACf,MAAMmB,KAAK,GAAI3B,KAAK,CAAC,CAAC,CAAC,IAAI,UAAW;EACtC,MAAM4B,WAAW,GAAI5B,KAAK,CAAC,CAAC,CAAC,IACzB,MAAO;EACX,OAAO;IAAE2B,KAAK;IAAEC;EAAY,CAAC;AACjC,CAAC;AAED,MAAMC,WAAW,GAAG,CAChB,OAAO,EACP,QAAQ,EACR,OAAO,EACP,QAAQ,EACR,aAAa,EACb,SAAS,EACT,aAAa,EACb,eAAe,EACf,MAAM,EACN,UAAU,EACV,UAAU,EACV,QAAQ,EACR,WAAW,EACX,gBAAgB,EAChB,eAAe,EACf,iBAAiB,EACjB,eAAe,EACf,mBAAmB,CACtB;AACD,MAAMC,cAAc,GAAG,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,IAAI,CAAC;AAC9D,MAAMC,gBAAgB,GAAG,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC;AAC/D,MAAMC,OAAO,GAAI1H,IAAI,IAAKA,IAAI,CAACC,IAAI,KAAKzB,CAAC,CAACmJ,GAAG;AAC7C,MAAMC,QAAQ,GAAI5H,IAAI,IAAKA,IAAI,CAACC,IAAI,KAAKzB,CAAC,CAACqI,IAAI;AAC/C,MAAMgB,gBAAgB,GAAI7H,IAAI,IAAKA,IAAI,CAACC,IAAI,KAAKzB,CAAC,CAAC4B,YAAY;AAC/D,MAAM0H,gBAAgB,GAAItE,SAAS,IAAMnC,KAAK,IAAKnD,SAAS,CAACmD,KAAK,EAAE,CAACuB,KAAK,EAAEmF,GAAG,KAAK;EAChF,MAAMrC,KAAK,GAAGvH,YAAY,CAACyE,KAAK,CAAC;EACjC,IAAI8C,KAAK,IAAI8B,cAAc,CAACQ,QAAQ,CAACD,GAAG,CAAC,EAAE;IACvC,OAAOrC,KAAK,CAACuC,OAAO,GAAGzE,SAAS,CAACE,MAAM;EAC3C;EACA,IAAIgC,KAAK,IAAI+B,gBAAgB,CAACO,QAAQ,CAACD,GAAG,CAAC,EAAE;IACzC,OAAOrC,KAAK,CAACuC,OAAO,GAAGzE,SAAS,CAACC,KAAK;EAC1C;EACA,OAAOb,KAAK;AAChB,CAAC,CAAC;AACF,MAAMsF,YAAY,GAAItF,KAAK,IAAK;EAC5B,MAAM8C,KAAK,GAAGvH,YAAY,CAACyE,KAAK,CAAC;EACjC,OAAO8C,KAAK,GAAGA,KAAK,CAACuC,OAAO,GAAGpK,YAAY,CAAC+E,KAAK,CAAC;AACtD,CAAC;AACD,MAAMuF,cAAc,GAAI3E,SAAS,IAAMZ,KAAK,IAAK;EAC7C,OAAOnE,YAAY,CAAC+E,SAAS,EAAE;IAAE4E,SAAS,EAAExF;EAAM,CAAC,CAAC,CAACwF,SAAS;AAClE,CAAC;AACD,MAAMC,UAAU,GAAI7E,SAAS,IAAMxD,IAAI,IAAK;EACxC,IAAIqB,KAAK,GAAGyG,gBAAgB,CAACtE,SAAS,CAAC,CAACxD,IAAI,CAACqB,KAAK,CAAC;EACnDA,KAAK,GAAGpD,MAAM,CAAC;IACXoF,CAAC,EAAExF,YAAY;IACfyK,EAAE,EAAEzK,YAAY;IAChB0K,EAAE,EAAE1K,YAAY;IAChB0F,CAAC,EAAE1F,YAAY;IACf2K,EAAE,EAAE3K,YAAY;IAChB4K,EAAE,EAAE5K,YAAY;IAChB6K,CAAC,EAAE7K,YAAY;IACf8K,EAAE,EAAE9K,YAAY;IAChB+K,EAAE,EAAE/K,YAAY;IAChBgL,EAAE,EAAEhL,YAAY;IAChBiL,EAAE,EAAEjL,YAAY;IAChB4F,KAAK,EAAE5F,YAAY;IACnB6F,MAAM,EAAE7F,YAAY;IACpBkL,MAAM,EAAEb,YAAY;IACpBtH,IAAI,EAAElC,cAAc;IACpB0C,OAAO,EAAE8G,YAAY;IACrBc,MAAM,EAAEtK,cAAc;IACtBuK,WAAW,EAAEf,YAAY;IACzBgB,SAAS,EAAExK,cAAc;IACzB0J,SAAS,EAAED,cAAc,CAAC3E,SAAS,CAAC;IACpC2F,iBAAiB,EAAEhB,cAAc,CAAC3E,SAAS;EAC/C,CAAC,EAAEnC,KAAK,CAAC;EACT,OAAO2C,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEjE,IAAI,EAAE;IAAEqB;EAAM,CAAC,CAAC;AAC7C,CAAC;AACD,MAAM+H,aAAa,GAAIpJ,IAAI,IAAK;EAC5B,MAAMqJ,KAAK,GAAGrJ,IAAI,CAACqJ,KAAK,IAAI,CAAC,CAAC;EAC9B,MAAMhI,KAAK,GAAG2C,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEoF,KAAK,EAAErJ,IAAI,CAACqB,KAAK,CAAC;EAClD,OAAO2C,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEjE,IAAI,EAAE;IAAEqB;EAAM,CAAC,CAAC;AAC7C,CAAC;AACD,MAAMiI,gBAAgB,GAAItJ,IAAI,IAAK;EAC/B,MAAMuJ,UAAU,GAAI3G,KAAK,IAAMA,KAAK,KAAK,MAAM,GAAG,IAAI,GAAGA,KAAM;EAC/D,MAAMvB,KAAK,GAAGnD,SAAS,CAAC8B,IAAI,CAACqB,KAAK,EAAEkI,UAAU,CAAC;EAC/C,OAAOvF,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEjE,IAAI,EAAE;IAAEqB;EAAM,CAAC,CAAC;AAC7C,CAAC;AACD,MAAMmI,cAAc,GAAIxJ,IAAI,IAAK;EAC7B,MAAMqB,KAAK,GAAGrB,IAAI,CAACqB,KAAK,IAAI,CAAC,CAAC;EAC9B,MAAMoI,UAAU,GAAG1L,IAAI,CAACwJ,WAAW,EAAElG,KAAK,CAAC;EAC3C,MAAMgI,KAAK,GAAGrF,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEwF,UAAU,EAAEzJ,IAAI,CAACqJ,KAAK,IAAI,CAAC,CAAC,CAAC;EAC7D,OAAOrF,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEjE,IAAI,EAAE;IAAEqJ;EAAM,CAAC,CAAC;AAC7C,CAAC;AACD,MAAMK,aAAa,GAAI1J,IAAI,IAAK;EAC5B,MAAMqB,KAAK,GAAGpD,MAAM,CAAC;IACjBwF,KAAK,EAAE5F,YAAY;IACnB6F,MAAM,EAAE7F,YAAY;IACpB4I,OAAO,EAAER,YAAY;IACrB0D,mBAAmB,EAAExC;EACzB,CAAC,EAAEnH,IAAI,CAACqB,KAAK,CAAC;EACd,OAAO2C,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEjE,IAAI,EAAE;IAAEqB;EAAM,CAAC,CAAC;AAC7C,CAAC;AACD,MAAMuI,gBAAgB,GAAI5J,IAAI,KAAM;EAChCC,IAAI,EAAEzB,CAAC,CAAC0B,KAAK;EACbmB,KAAK,EAAE,CAAC,CAAC;EACTgI,KAAK,EAAE,CAAC,CAAC;EACT5G,QAAQ,EAAE,CAACzC,IAAI;AACnB,CAAC,CAAC;AACF,MAAM6J,eAAe,GAAI7J,IAAI,IAAK;EAC9B,IAAI,CAAC4H,QAAQ,CAAC5H,IAAI,CAAC,EACf,OAAOA,IAAI;EACf,IAAI,CAACA,IAAI,CAACyC,QAAQ,EACd,OAAOzC,IAAI;EACf,MAAM8J,YAAY,GAAInH,KAAK,IAAKkF,gBAAgB,CAAClF,KAAK,CAAC,GAAGiH,gBAAgB,CAACjH,KAAK,CAAC,GAAGA,KAAK;EACzF,MAAMF,QAAQ,GAAGzC,IAAI,CAACyC,QAAQ,CAACf,GAAG,CAACoI,YAAY,CAAC;EAChD,OAAO9F,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEjE,IAAI,EAAE;IAAEyC;EAAS,CAAC,CAAC;AAChD,CAAC;AACD,MAAMsH,SAAS,GAAIvJ,SAAS,IAAMR,IAAI,IAAK;EACvC,IAAI4H,QAAQ,CAAC5H,IAAI,CAAC,EACd,OAAOqE,YAAY,CAAC7D,SAAS,EAAER,IAAI,CAAC;EACxC,IAAI,CAACA,IAAI,CAACyC,QAAQ,EACd,OAAOzC,IAAI;EACf,MAAMyC,QAAQ,GAAGzC,IAAI,CAACyC,QAAQ,CAACf,GAAG,CAACqI,SAAS,CAACvJ,SAAS,CAAC,CAAC;EACxD,OAAOwD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEjE,IAAI,EAAE;IAAEyC;EAAS,CAAC,CAAC;AAChD,CAAC;AACD,MAAMuH,cAAc,GAAIxG,SAAS,IAAKxF,OAAO,CAACqK,UAAU,CAAC7E,SAAS,CAAC,EAAEqG,eAAe,EAAEP,gBAAgB,EAAEF,aAAa,CAAC;AACtH,MAAMa,eAAe,GAAIzG,SAAS,IAAMxD,IAAI,IAAK;EAC7C,IAAI,CAACA,IAAI,CAACyC,QAAQ,EACd,OAAOzC,IAAI;EACf,MAAM8J,YAAY,GAAG9L,OAAO,CAACiM,eAAe,CAACzG,SAAS,CAAC,EAAEwG,cAAc,CAACxG,SAAS,CAAC,CAAC;EACnF,MAAMf,QAAQ,GAAGzC,IAAI,CAACyC,QAAQ,CAACf,GAAG,CAACoI,YAAY,CAAC;EAChD,OAAO9F,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEjE,IAAI,EAAE;IAAEyC;EAAS,CAAC,CAAC;AAChD,CAAC;AACD,MAAMyH,gBAAgB,GAAIlK,IAAI,IAAK;EAC/B,MAAMmK,OAAO,GAAG,CAAC,CAAC;EAClB,MAAMC,aAAa,GAAGpK,IAAI,CAACyC,QAAQ,EAAE4H,KAAK,CAAC,CAAC,CAAC,IAAI,EAAE;EACnD,OAAOD,aAAa,CAAC1H,MAAM,GAAG,CAAC,EAAE;IAC7B,MAAMC,KAAK,GAAGyH,aAAa,CAACE,KAAK,CAAC,CAAC;IACnC,IAAI3H,KAAK,CAACtB,KAAK,IAAI,IAAI,IAAIsB,KAAK,CAACtB,KAAK,EAAE;MACpC8I,OAAO,CAACxH,KAAK,CAACtB,KAAK,CAAC8D,EAAE,CAAC,GAAGxC,KAAK;IACnC;IACA,IAAIA,KAAK,CAACF,QAAQ,EACd2H,aAAa,CAAC5I,IAAI,CAAC,GAAGmB,KAAK,CAACF,QAAQ,CAAC;EAC7C;EACA,OAAO0H,OAAO;AAClB,CAAC;AACD,MAAMI,aAAa,GAAGA,CAACvK,IAAI,EAAEmK,OAAO,KAAK;EACrC,IAAInK,IAAI,CAACqB,KAAK,IAAI,WAAW,IAAIrB,IAAI,CAACqB,KAAK,EAAE;IACzC,MAAMmJ,UAAU,GAAGL,OAAO,CAACnK,IAAI,CAACqB,KAAK,CAACoJ,SAAS,CAACrD,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;IAClE;IACA,IAAI,CAACoD,UAAU,EACX,OAAOxK,IAAI;IACf,MAAM6F,QAAQ,GAAG7B,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEuG,UAAU,CAACnJ,KAAK,EAAErB,IAAI,CAACqB,KAAK,CAAC;IAChE,OAAOwE,QAAQ,CAAC4E,SAAS;IACzB,OAAOzG,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEuG,UAAU,EAAE;MAAEnJ,KAAK,EAAEwE;IAAS,CAAC,CAAC;EAC7D;EACA,MAAMpD,QAAQ,GAAGzC,IAAI,CAACyC,QAAQ,EAAEf,GAAG,CAAEiB,KAAK,IAAK4H,aAAa,CAAC5H,KAAK,EAAEwH,OAAO,CAAC,CAAC;EAC7E,OAAOnG,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEjE,IAAI,EAAE;IAAEyC;EAAS,CAAC,CAAC;AAChD,CAAC;AACD,MAAMiI,aAAa,GAAI1K,IAAI,IAAK;EAC5B,MAAMmK,OAAO,GAAGD,gBAAgB,CAAClK,IAAI,CAAC;EACtC,OAAOuK,aAAa,CAACvK,IAAI,EAAEmK,OAAO,CAAC;AACvC,CAAC;AACD,MAAMQ,cAAc,GAAGA,CAAC3K,IAAI,EAAEQ,SAAS,KAAK;EACxC,MAAMgD,SAAS,GAAG+C,cAAc,CAACvG,IAAI,CAAC;EACtC,OAAOhC,OAAO,CAACgI,WAAW,EAAE+D,SAAS,CAACvJ,SAAS,CAAC,EAAEkJ,aAAa,EAAEF,cAAc,EAAExC,YAAY,EAAEiD,eAAe,CAACzG,SAAS,CAAC,EAAEkH,aAAa,CAAC,CAAC1K,IAAI,CAAC;AACnJ,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM4K,UAAU,GAAGA,CAAC5K,IAAI,EAAEQ,SAAS,KAAK;EACpC,IAAI,EAAE,UAAU,IAAIR,IAAI,CAAC,EACrB,OAAOA,IAAI;EACf,MAAM8J,YAAY,GAAInH,KAAK,IAAKiI,UAAU,CAACjI,KAAK,EAAEnC,SAAS,CAAC;EAC5D,MAAMuF,IAAI,GAAG2B,OAAO,CAAC1H,IAAI,CAAC,GAAG2K,cAAc,CAAC3K,IAAI,EAAEQ,SAAS,CAAC,GAAGR,IAAI;EACnE,MAAMyC,QAAQ,GAAGsD,IAAI,CAACtD,QAAQ,EAAEf,GAAG,CAACoI,YAAY,CAAC;EACjD,OAAO9F,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAE8B,IAAI,EAAE;IAAEtD;EAAS,CAAC,CAAC;AAChD,CAAC;AAED,IAAIoI,eAAe;AACnB,MAAMvL,QAAQ,GAAG,MAAAA,CAAA,KAAY;EACzB;EACA;EACA,MAAMmB,QAAQ,GAAG,OAAOoK,eAAe,KAAKtL,UAAU,CAAC,CAAC,CAAC;EACzD,MAAMuL,MAAM,GAAGrK,QAAQ,CAACsK,MAAM,CAACC,MAAM,CAAC,CAAC;EACvCF,MAAM,CAACG,mBAAmB,CAAC,CAAC,CAAC;EAC7B,MAAMjL,IAAI,GAAG;IAAEgL,MAAM,EAAEA,CAAA,KAAMvK,QAAQ,CAACyK,IAAI,CAACC,gBAAgB,CAACL,MAAM;EAAE,CAAC;EACrE,OAAO;IAAE9K;EAAK,CAAC;AACnB,CAAC;AAED,MAAMoL,WAAW,GAAG,MAAOrF,IAAI,IAAK;EAChC,MAAMsF,IAAI,GAAG,MAAM/L,QAAQ,CAAC,CAAC;EAC7B,OAAO0E,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAE8B,IAAI,EAAE;IAAEsF;EAAK,CAAC,CAAC;AAC5C,CAAC;AAED,MAAMC,SAAS,GAAItL,IAAI,IAAKA,IAAI,CAACqJ,KAAK,CAACkC,MAAM;AAC7C,MAAMC,UAAU,GAAIxL,IAAI,IAAKA,IAAI,CAACC,IAAI,KAAKzB,CAAC,CAACiN,QAAQ,IAAIzL,IAAI,CAACC,IAAI,KAAKzB,CAAC,CAACmJ,GAAG;AAC5E,MAAM+D,UAAU,GAAGA,CAACC,CAAC,EAAEC,CAAC,KAAK;EACzB,MAAMC,EAAE,GAAGP,SAAS,CAACK,CAAC,CAAC;EACvB,MAAMG,EAAE,GAAGR,SAAS,CAACM,CAAC,CAAC;EACvB,IAAI,CAACC,EAAE,IAAI,CAACC,EAAE,EACV,OAAO,CAAC;EACZ,IAAI,CAACD,EAAE,EACH,OAAO,CAAC;EACZ,IAAI,CAACC,EAAE,EACH,OAAO,CAAC,CAAC;EACb,OAAOA,EAAE,GAAGD,EAAE;AAClB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,MAAME,iBAAiB,GAAI/L,IAAI,IAAK;EAChC,IAAI,CAACA,IAAI,CAACyC,QAAQ,EACd,OAAOzC,IAAI;EACf,MAAMgM,cAAc,GAAGR,UAAU,CAACxL,IAAI,CAAC,GACjCA,IAAI,CAACyC,QAAQ,CAACwJ,IAAI,CAACP,UAAU,CAAC,GAC9B1L,IAAI,CAACyC,QAAQ;EACnB,MAAMA,QAAQ,GAAGuJ,cAAc,CAACtK,GAAG,CAACqK,iBAAiB,CAAC;EACtD,OAAO/H,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEjE,IAAI,EAAE;IAAEyC;EAAS,CAAC,CAAC;AAChD,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,MAAMyJ,aAAa,GAAInG,IAAI,IAAKgG,iBAAiB,CAAChG,IAAI,CAAC;;AAEvD;AACA,MAAMoG,MAAM,GAAG,CAAC,CAAC;AACjB,MAAMC,KAAK,GAAG5M,UAAU,CAAC,CAAC;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM6M,wBAAwB,GAAIhJ,CAAC,IAAKA,CAAC,KAAK,GAAG;AACjD,MAAMiJ,aAAa,GAAG,SAAAA,CAAC5L,MAAM;EAAA,IAAE6L,sBAAsB,GAAAC,SAAA,CAAA9J,MAAA,QAAA8J,SAAA,QAAAlJ,SAAA,GAAAkJ,SAAA,MAAG,KAAK;EAAA,OAAKC,KAAK,CAACC,IAAI,CAAChM,MAAM,CAAC,CAC/E4E,MAAM,CAACiH,sBAAsB,GAAG,MAAM,IAAI,GAAGF,wBAAwB,CAAC,CACtE3K,GAAG,CAAEiL,IAAI,IAAKA,IAAI,CAACC,WAAW,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAC/CC,IAAI,CAAC,GAAG,CAAC;AAAA;AACd,MAAMC,aAAa,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;EACrC,IAAI,SAAS,IAAIA,MAAM,EAAE;IACrB,OAAOA,MAAM,CAACC,OAAO,CAACZ,aAAa,CAACU,KAAK,EAAEC,MAAM,CAACV,sBAAsB,CAAC,CAAC;EAC9E;EACA,MAAM;IAAEY,GAAG;IAAEC,MAAM,GAAG,KAAK;IAAEb;EAAuB,CAAC,GAAGU,MAAM;EAC9D,OAAO,GAAGE,GAAG,GAAGb,aAAa,CAACU,KAAK,EAAET,sBAAsB,CAAC,IAAIa,MAAM,EAAE;AAC5E,CAAC;AACD,MAAMC,WAAW,GAAGA,CAAC3M,MAAM,EAAEuM,MAAM,KAAK;EACpC,IAAI,CAACA,MAAM,EACP,OAAO,EAAE;EACb,MAAMK,QAAQ,GAAG,EAAE;EACnBb,KAAK,CAACC,IAAI,CAAChM,MAAM,CAAC6M,QAAQ,CAACnB,KAAK,CAAC,CAAC,CAACoB,OAAO,CAAE9H,KAAK,IAAK;IAClD,MAAMsH,KAAK,GAAGtH,KAAK,CAAC,CAAC,CAAC;IACtB,IAAI,CAACyG,MAAM,CAACa,KAAK,CAAC,IAAIb,MAAM,CAACa,KAAK,CAAC,CAACS,OAAO,EAAE;MACzC,MAAMC,QAAQ,GAAGX,aAAa,CAACC,KAAK,EAAEC,MAAM,CAAC;MAC7Cd,MAAM,CAACa,KAAK,CAAC,GAAG;QAAES,OAAO,EAAE;MAAK,CAAC;MACjCH,QAAQ,CAAC9L,IAAI,CAAC/B,YAAY,CAAC;QAAEkO,GAAG,EAAED;MAAS,CAAC,CAAC,CAACE,IAAI,CAAEC,KAAK,IAAK;QAC1D1B,MAAM,CAACa,KAAK,CAAC,CAACS,OAAO,GAAG,KAAK;QAC7BtB,MAAM,CAACa,KAAK,CAAC,CAACjL,IAAI,GAAG8L,KAAK,CAAC9L,IAAI;MACnC,CAAC,CAAC,CAAC;IACP;EACJ,CAAC,CAAC;EACF,OAAOuL,QAAQ;AACnB,CAAC;AACD,MAAMQ,WAAW,GAAInN,SAAS,IAAK;EAC/B,MAAMoN,MAAM,GAAG,EAAE;EACjB,KAAK,IAAIvL,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG7B,SAAS,CAAC+B,MAAM,EAAEF,CAAC,IAAI,CAAC,EAAE;IAC1C,MAAMwL,QAAQ,GAAGrN,SAAS,CAAC6B,CAAC,CAAC;IAC7B,IAAIyL,SAAS,GAAG,CAAC;IACjBxB,KAAK,CAACC,IAAI,CAACsB,QAAQ,CAACtN,MAAM,CAAC6M,QAAQ,CAACnB,KAAK,CAAC,CAAC,CAACoB,OAAO,CAAE9H,KAAK,IAAK;MAC3D,MAAM;QAAEvB;MAAM,CAAC,GAAGuB,KAAK;MACvB,MAAMsH,KAAK,GAAGtH,KAAK,CAAC,CAAC,CAAC;MACtB,MAAMwI,SAAS,GAAGF,QAAQ,CAAChM,UAAU,CAAChB,QAAQ;MAC9C,MAAMmN,KAAK,GAAGH,QAAQ,CAACtN,MAAM,CAAC2J,KAAK,CAAC4D,SAAS,EAAE9J,KAAK,GAAGuB,KAAK,CAAC,CAAC,CAAC,CAAChD,MAAM,CAAC;MACvE;MACA;MACA,IAAIyJ,MAAM,CAACa,KAAK,CAAC,IAAIb,MAAM,CAACa,KAAK,CAAC,CAACjL,IAAI,EAAE;QACrCgM,MAAM,CAACvM,IAAI,CAAC;UACRd,MAAM,EAAEyN,KAAK,CAAC/G,OAAO,CAAC1B,KAAK,CAAC,CAAC,CAAC,EAAE0I,MAAM,CAACC,YAAY,CAAC,MAAM,CAAC,CAAC;UAC5DrM,UAAU,EAAE;YACR,GAAGgM,QAAQ,CAAChM,UAAU;YACtBsM,UAAU,EAAE;cACR7K,KAAK,EAAEyK,SAAS;cAChBxK,MAAM,EAAEwK,SAAS;cACjBK,OAAO,EAAEC,IAAI,CAACC,KAAK,CAACP,SAAS,GAAG,GAAG,CAAC;cACpCL,KAAK,EAAE1B,MAAM,CAACa,KAAK,CAAC,CAACjL;YACzB;UACJ;QACJ,CAAC,CAAC;MACN,CAAC,MACI;QACD;QACAgM,MAAM,CAACvM,IAAI,CAAC;UACRd,MAAM,EAAEyN,KAAK;UACbnM,UAAU,EAAEgM,QAAQ,CAAChM;QACzB,CAAC,CAAC;MACN;MACAiM,SAAS,GAAG9J,KAAK,GAAG6I,KAAK,CAACtK,MAAM;IACpC,CAAC,CAAC;IACF,IAAIuL,SAAS,GAAGD,QAAQ,CAACtN,MAAM,CAACgC,MAAM,EAAE;MACpCqL,MAAM,CAACvM,IAAI,CAAC;QACRd,MAAM,EAAEsN,QAAQ,CAACtN,MAAM,CAAC2J,KAAK,CAAC4D,SAAS,CAAC;QACxCjM,UAAU,EAAEgM,QAAQ,CAAChM;MACzB,CAAC,CAAC;IACN;EACJ;EACA,OAAO+L,MAAM;AACjB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,MAAMW,SAAS,GAAI1O,IAAI,IAAK;EACxB,IAAIA,IAAI,CAACqB,KAAK,CAACsN,GAAG,EACd,OAAO3O,IAAI,CAACqB,KAAK,CAACsN,GAAG;EACzB,IAAI3O,IAAI,CAACqB,KAAK,CAAC4L,MAAM,EACjB,OAAOjN,IAAI,CAACqB,KAAK,CAAC4L,MAAM;AAChC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM2B,aAAa,GAAG,MAAOD,GAAG,IAAK;EACjC,MAAM1B,MAAM,GAAG,OAAO0B,GAAG,KAAK,UAAU,GAAG,MAAMA,GAAG,CAAC,CAAC,GAAG,MAAMA,GAAG;EAClE,OAAO,OAAO1B,MAAM,KAAK,QAAQ,GAAG;IAAEU,GAAG,EAAEV;EAAO,CAAC,GAAGA,MAAM;AAChE,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,MAAM4B,UAAU,GAAG,MAAO7O,IAAI,IAAK;EAC/B,MAAM2O,GAAG,GAAGD,SAAS,CAAC1O,IAAI,CAAC;EAC3B,MAAM;IAAE8O;EAAM,CAAC,GAAG9O,IAAI,CAACqB,KAAK;EAC5B,IAAI,CAACsN,GAAG,EAAE;IACNI,OAAO,CAACC,IAAI,CAAC,KAAK,EAAE,sDAAsD,CAAC;IAC3E;EACJ;EACA,IAAI;IACA,MAAM/B,MAAM,GAAG,MAAM2B,aAAa,CAACD,GAAG,CAAC;IACvC,IAAI,CAAC1B,MAAM,EAAE;MACT,MAAM,IAAIgC,KAAK,CAAC,2CAA2ChC,MAAM,EAAE,CAAC;IACxE;IACAjN,IAAI,CAAC6N,KAAK,GAAG,MAAMpO,YAAY,CAACwN,MAAM,EAAE;MAAE6B;IAAM,CAAC,CAAC;IAClD,IAAII,MAAM,CAACC,QAAQ,CAAClC,MAAM,CAAC,IAAIA,MAAM,YAAYmC,IAAI,EACjD;IACJpP,IAAI,CAAC6N,KAAK,CAAC9F,GAAG,GAAG,MAAM,IAAIkF,MAAM,GAAGA,MAAM,CAAClL,IAAI,CAAC8K,QAAQ,CAAC,CAAC,GAAGI,MAAM,CAACU,GAAG;EAC3E,CAAC,CACD,OAAO0B,CAAC,EAAE;IACNN,OAAO,CAACC,IAAI,CAACK,CAAC,CAACC,OAAO,CAAC;EAC3B;AACJ,CAAC;AAED,MAAMC,SAAS,GAAIvP,IAAI,IAAKA,IAAI,CAACC,IAAI,KAAKzB,CAAC,CAACgR,KAAK;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,WAAW,GAAGA,CAACjP,SAAS,EAAER,IAAI,KAAK;EACrC,MAAMsN,QAAQ,GAAG,EAAE;EACnB,MAAMlD,aAAa,GAAGpK,IAAI,CAACyC,QAAQ,EAAE4H,KAAK,CAAC,CAAC,CAAC,IAAI,EAAE;EACnD,MAAMqF,WAAW,GAAGlP,SAAS,GAAGA,SAAS,CAACmP,cAAc,CAAC,CAAC,GAAG,IAAI;EACjE,OAAOvF,aAAa,CAAC1H,MAAM,GAAG,CAAC,EAAE;IAC7B,MAAMkN,CAAC,GAAGxF,aAAa,CAACE,KAAK,CAAC,CAAC;IAC/B,IAAIiF,SAAS,CAACK,CAAC,CAAC,EAAE;MACdtC,QAAQ,CAAC9L,IAAI,CAACqN,UAAU,CAACe,CAAC,CAAC,CAAC;IAChC;IACA,IAAIpP,SAAS,IAAIoP,CAAC,CAACvG,KAAK,EAAExI,UAAU,EAAE;MAClC,MAAMU,YAAY,GAAGnD,SAAS,CAACwR,CAAC,CAACvG,KAAK,CAACxI,UAAU,CAAC;MAClDyM,QAAQ,CAAC9L,IAAI,CAAC,GAAGD,YAAY,CAACG,GAAG,CAAEb,UAAU,IAAKL,SAAS,CAACqP,IAAI,CAAC;QAC7DhP,UAAU;QACVE,SAAS,EAAE6O,CAAC,CAACvG,KAAK,CAACtI,SAAS;QAC5BD,UAAU,EAAE8O,CAAC,CAACvG,KAAK,CAACvI;MACxB,CAAC,CAAC,CAAC,CAAC;IACR;IACA,IAAI,OAAO8O,CAAC,KAAK,QAAQ,EAAE;MACvBtC,QAAQ,CAAC9L,IAAI,CAAC,GAAG6L,WAAW,CAACuC,CAAC,EAAEF,WAAW,CAAC,CAAC;IACjD;IACA,IAAI,OAAO,IAAIE,CAAC,IAAI,OAAOA,CAAC,CAAChN,KAAK,KAAK,QAAQ,EAAE;MAC7C0K,QAAQ,CAAC9L,IAAI,CAAC,GAAG6L,WAAW,CAACuC,CAAC,CAAChN,KAAK,EAAE8M,WAAW,CAAC,CAAC;IACvD;IACA,IAAIE,CAAC,CAACnN,QAAQ,EAAE;MACZmN,CAAC,CAACnN,QAAQ,CAAC+K,OAAO,CAAEsC,SAAS,IAAK;QAC9B1F,aAAa,CAAC5I,IAAI,CAACsO,SAAS,CAAC;MACjC,CAAC,CAAC;IACN;EACJ;EACA,OAAOxC,QAAQ;AACnB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMyC,aAAa,GAAG,MAAAA,CAAO/P,IAAI,EAAEQ,SAAS,KAAK;EAC7C,MAAM8M,QAAQ,GAAGmC,WAAW,CAACjP,SAAS,EAAER,IAAI,CAAC;EAC7C,MAAMgQ,OAAO,CAACC,GAAG,CAAC3C,QAAQ,CAAC;EAC3B,OAAOtN,IAAI;AACf,CAAC;AAED,MAAMkQ,QAAQ,GAAIlQ,IAAI,IAAKA,IAAI,CAACC,IAAI,KAAKzB,CAAC,CAAC2R,IAAI;AAC/C,MAAMC,mBAAmB,GAAG;EACxBnO,KAAK,EAAE,MAAM;EACbjD,cAAc,EAAE;AACpB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMqR,YAAY,GAAGA,CAAC7M,SAAS,EAAExD,IAAI,KAAK;EACtC,IAAIsQ,SAAS,GAAG,CAACtQ,IAAI,CAACqJ,KAAK,CAAC;EAC5B,IAAI6G,QAAQ,CAAClQ,IAAI,CAAC,EAAE;IAChBsQ,SAAS,GAAG7D,KAAK,CAAC8D,OAAO,CAACvQ,IAAI,CAACqJ,KAAK,CAAC,GAC/B,CAAC+G,mBAAmB,EAAE,GAAGpQ,IAAI,CAACqJ,KAAK,CAAC,GACpC,CAAC+G,mBAAmB,EAAEpQ,IAAI,CAACqJ,KAAK,CAAC;EAC3C;EACA,OAAO5K,YAAY,CAAC+E,SAAS,EAAE8M,SAAS,CAAC;AAC7C,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,MAAME,iBAAiB,GAAIhN,SAAS,IAAMxD,IAAI,IAAK;EAC/C,MAAMqJ,KAAK,GAAGgH,YAAY,CAAC7M,SAAS,EAAExD,IAAI,CAAC;EAC3C,IAAI,CAACA,IAAI,CAACyC,QAAQ,EACd,OAAOuB,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEjE,IAAI,EAAE;IAAEqJ;EAAM,CAAC,CAAC;EAC7C,MAAM5G,QAAQ,GAAGzC,IAAI,CAACyC,QAAQ,CAACf,GAAG,CAAC8O,iBAAiB,CAAChN,SAAS,CAAC,CAAC;EAChE,OAAOQ,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEjE,IAAI,EAAE;IAAEqJ,KAAK;IAAE5G;EAAS,CAAC,CAAC;AACvD,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,MAAMgO,iBAAiB,GAAIC,IAAI,IAAK;EAChC,MAAMC,GAAG,GAAGD,IAAI,CAACrP,KAAK,EAAEsP,GAAG,IAAI,EAAE;EACjC,MAAMtH,KAAK,GAAGqH,IAAI,CAACrH,KAAK;EACxB,MAAM5F,KAAK,GAAGiN,IAAI,CAACE,GAAG,EAAEnN,KAAK,IAAI4F,KAAK,CAAC5F,KAAK;EAC5C,MAAMC,MAAM,GAAGgN,IAAI,CAACE,GAAG,EAAElN,MAAM,IAAI2F,KAAK,CAAC3F,MAAM;EAC/C,MAAMmN,WAAW,GAAGH,IAAI,CAACrP,KAAK,EAAEwP,WAAW,IAAI,UAAU;EACzD,MAAMC,OAAO,GAAGzH,KAAK,EAAErI,QAAQ,IAAI,EAAE;EACrC,MAAMwC,SAAS,GAAG;IAAEC,KAAK;IAAEC,MAAM;IAAEmN,WAAW;IAAEF,GAAG;IAAEG;EAAQ,CAAC;EAC9D,OAAON,iBAAiB,CAAChN,SAAS,CAAC,CAACkN,IAAI,CAAC;AAC7C,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,MAAMK,aAAa,GAAIhL,IAAI,IAAK;EAC5B,IAAI,CAACA,IAAI,CAACtD,QAAQ,EACd,OAAOsD,IAAI;EACf,MAAMtD,QAAQ,GAAGsD,IAAI,CAACtD,QAAQ,CAACf,GAAG,CAAC+O,iBAAiB,CAAC;EACrD,OAAOzM,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAE8B,IAAI,EAAE;IAAEtD;EAAS,CAAC,CAAC;AAChD,CAAC;AAED,MAAMuO,iBAAiB,GAAIC,CAAC,IAAMjR,IAAI,IAAK3B,KAAK,CAAC2B,IAAI,CAACqJ,KAAK,GAAG4H,CAAC,CAAC,CAAC,GAAG,KAAK,GAAGjR,IAAI,CAACqJ,KAAK,GAAG4H,CAAC,CAAC,IAAI,IAAI;AACnG;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,SAAS,GAAIlR,IAAI,IAAK;EACxB,IAAI,CAACA,IAAI,CAAC4Q,GAAG,EACT,OAAO,IAAI;EACf,MAAM;IAAEO,IAAI;IAAEC,GAAG;IAAE3N,KAAK;IAAEC;EAAO,CAAC,GAAG1D,IAAI,CAAC4Q,GAAG;EAC7C,MAAMS,gBAAgB,GAAGL,iBAAiB,CAAC,kBAAkB,CAAC,CAAChR,IAAI,CAAC;EACpE,MAAMsR,gBAAgB,GAAGN,iBAAiB,CAAC,kBAAkB,CAAC,CAAChR,IAAI,CAAC;EACpE,MAAMuR,QAAQ,GAAGpT,YAAY,CAACkT,gBAAgB,CAAC;EAC/C,MAAMG,QAAQ,GAAGrT,YAAY,CAACmT,gBAAgB,CAAC;EAC/C,MAAMG,OAAO,GAAGF,QAAQ,GAAG9N,KAAK,GAAG8N,QAAQ,CAACtJ,OAAO,GAAGoJ,gBAAgB;EACtE,MAAMK,OAAO,GAAGF,QAAQ,GAAG9N,MAAM,GAAG8N,QAAQ,CAACvJ,OAAO,GAAGqJ,gBAAgB;EACvE,IAAIjT,KAAK,CAACoT,OAAO,CAAC,IAAI,OAAOA,OAAO,KAAK,QAAQ,EAC7C,MAAM,IAAIxC,KAAK,CAAC,2BAA2BwC,OAAO,EAAE,CAAC;EACzD,IAAIpT,KAAK,CAACqT,OAAO,CAAC,IAAI,OAAOA,OAAO,KAAK,QAAQ,EAC7C,MAAM,IAAIzC,KAAK,CAAC,2BAA2ByC,OAAO,EAAE,CAAC;EACzD,OAAO;IAAEP,IAAI,EAAEA,IAAI,GAAGM,OAAO;IAAEL,GAAG,EAAEA,GAAG,GAAGM;EAAQ,CAAC;AACvD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,iBAAiB,GAAI3R,IAAI,IAAK;EAChC,MAAM4R,MAAM,GAAGV,SAAS,CAAClR,IAAI,CAAC;EAC9B,MAAM6R,OAAO,GAAG7N,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEjE,IAAI,EAAE;IAAE4R;EAAO,CAAC,CAAC;EACnD,IAAI,CAAC5R,IAAI,CAACyC,QAAQ,EACd,OAAOoP,OAAO;EAClB,MAAMpP,QAAQ,GAAGzC,IAAI,CAACyC,QAAQ,CAACf,GAAG,CAACiQ,iBAAiB,CAAC;EACrD,OAAO3N,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAE4N,OAAO,EAAE;IAAEpP;EAAS,CAAC,CAAC;AACnD,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,MAAMqP,aAAa,GAAI/L,IAAI,IAAK;EAC5B,IAAI,CAACA,IAAI,CAACtD,QAAQ,EACd,OAAOsD,IAAI;EACf,MAAMtD,QAAQ,GAAGsD,IAAI,CAACtD,QAAQ,CAACf,GAAG,CAACiQ,iBAAiB,CAAC;EACrD,OAAO3N,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAE8B,IAAI,EAAE;IAAEtD;EAAS,CAAC,CAAC;AAChD,CAAC;AAED,MAAMsP,gBAAgB,GAAIC,QAAQ,IAAK;EACnC,OAAO,OAAOA,QAAQ,KAAK,QAAQ,GAC7B;IAAEC,KAAK,EAAED,QAAQ;IAAEE,GAAG,EAAE,KAAK;IAAEC,QAAQ,EAAE;EAAM,CAAC,GAChDH,QAAQ;AAClB,CAAC;AACD,MAAMI,gBAAgB,GAAIpS,IAAI,IAAK;EAC/B,IAAIqS,IAAI,GAAG,CAAC;EACZ,MAAM5P,QAAQ,GAAG,CAACzC,IAAI,CAACyC,QAAQ,IAAI,EAAE,EAAE4H,KAAK,CAAC,CAAC,CAAC;EAC/C,MAAMD,aAAa,GAAG3H,QAAQ,CAACf,GAAG,CAAEkB,KAAK,KAAM;IAC3CA,KAAK;IACL0P,MAAM,EAAE;EACZ,CAAC,CAAC,CAAC;EACH,OAAOlI,aAAa,CAAC1H,MAAM,GAAG,CAAC,EAAE;IAC7B,MAAM6P,OAAO,GAAGnI,aAAa,CAACE,KAAK,CAAC,CAAC;IACrC,IAAI,CAACiI,OAAO,EACR;IACJ,MAAM5P,KAAK,GAAG4P,OAAO,CAAC3P,KAAK;IAC3B,IAAI0P,MAAM,GAAGC,OAAO,CAACD,MAAM;IAC3B,IAAI3P,KAAK,CAACtB,KAAK,IAAI,UAAU,IAAIsB,KAAK,CAACtB,KAAK,EAAE;MAC1C,MAAM2Q,QAAQ,GAAGD,gBAAgB,CAACpP,KAAK,CAACtB,KAAK,CAAC2Q,QAAQ,CAAC;MACvD,MAAMQ,GAAG,GAAGH,IAAI,EAAE;MAClB,MAAMI,YAAY,GAAG;QAAED,GAAG;QAAEF,MAAM,EAAEA,MAAM,EAAEE,GAAG;QAAE,GAAGR;MAAS,CAAC;MAC9DrP,KAAK,CAACtB,KAAK,CAAC2Q,QAAQ,GAAGS,YAAY;MACnCH,MAAM,GAAGG,YAAY;IACzB;IACA,IAAI9P,KAAK,CAACF,QAAQ,EAAE;MAChBE,KAAK,CAACF,QAAQ,CAAC+K,OAAO,CAAEsC,SAAS,IAAK;QAClC1F,aAAa,CAAC5I,IAAI,CAAC;UAAEoB,KAAK,EAAEkN,SAAS;UAAEwC;QAAO,CAAC,CAAC;MACpD,CAAC,CAAC;IACN;EACJ;EACA,OAAOtS,IAAI;AACf,CAAC;AAED,MAAM0S,kBAAkB,GAAG,CAAC,UAAU,EAAE,WAAW,CAAC;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,cAAc,GAAIjC,IAAI,IAAK;EAC7B,MAAM9N,KAAK,GAAG8N,IAAI,CAACrP,KAAK,EAAEwP,WAAW,IAAI,UAAU;EACnD,OAAO6B,kBAAkB,CAAC1K,QAAQ,CAACpF,KAAK,CAAC,GAAGA,KAAK,GAAG,UAAU;AAClE,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,MAAMgQ,WAAW,GAAIlC,IAAI,IAAKiC,cAAc,CAACjC,IAAI,CAAC,KAAK,WAAW;;AAElE;AACA,MAAMmC,UAAU,GAAG;EACf,KAAK,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC;EACzB,KAAK,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC;EACzBC,EAAE,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC;EACtBC,EAAE,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC;EACtBC,EAAE,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC;EACtBC,EAAE,EAAE,CAAC,MAAM,EAAE,OAAO,CAAC;EACrBC,EAAE,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC;EACpBC,EAAE,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC;EACpBC,EAAE,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC;EACpBC,EAAE,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC;EACpBC,EAAE,EAAE,CAAC,KAAK,EAAE,MAAM,CAAC;EACnBC,EAAE,EAAE,CAAC,MAAM,EAAE,KAAK,CAAC;EACnBC,GAAG,EAAE,CAAC,IAAI,EAAE,MAAM,CAAC;EACnBC,EAAE,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC;EACtBC,EAAE,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC;EACtBC,EAAE,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC;EACtBC,EAAE,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC;EACtBC,EAAE,EAAE,CAAC,MAAM,EAAE,OAAO,CAAC;EACrBC,EAAE,EAAE,CAAC,KAAK,EAAE,MAAM,CAAC;EACnBC,EAAE,EAAE,CAAC,MAAM,EAAE,KAAK,CAAC;EACnBC,EAAE,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC;EACpBC,EAAE,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC;EACpBC,EAAE,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC;EACpBC,GAAG,EAAE,CAAC,KAAK,EAAE,MAAM,CAAC;EACpBC,EAAE,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC;EACtBC,EAAE,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC;EACtBC,EAAE,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC;EACtBC,EAAE,EAAE,CAAC,MAAM,EAAE,OAAO,CAAC;EACrBC,EAAE,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC;EACpBC,EAAE,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC;EACpBC,EAAE,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC;EACpBC,EAAE,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC;EACpBC,EAAE,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC;EACpBC,EAAE,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC;EACpBC,GAAG,EAAE,CAAC,KAAK,EAAE,MAAM,CAAC;EACpBC,GAAG,EAAE,CAAC,MAAM,EAAE,OAAO,CAAC;EACtBC,GAAG,EAAE,CAAC,OAAO,EAAE,MAAM,CAAC;EACtBC,GAAG,EAAE,CAAC,MAAM,EAAE,OAAO,CAAC;EACtBC,GAAG,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC;EACrBC,GAAG,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC;EACrBC,IAAI,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC;EACxBC,IAAI,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC;EACxBC,IAAI,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC;EACxBC,IAAI,EAAE,CAAC,MAAM,EAAE,OAAO,CAAC;EACvBC,IAAI,EAAE,CAAC,KAAK,EAAE,MAAM,CAAC;EACrBC,SAAS,EAAE,CAAC,MAAM,EAAE,KAAK,CAAC;EAC1BC,KAAK,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC;EACrBC,KAAK,EAAE,CAAC,KAAK,EAAE,MAAM,CAAC;EACtBC,MAAM,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC;EACtBC,OAAO,EAAE,CAAC,KAAK,EAAE,MAAM,CAAC;EACxBC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG;AAClB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,UAAU,GAAInT,KAAK,IAAK;EAC1B,IAAI,OAAOA,KAAK,KAAK,QAAQ,EACzB,OAAO;IAAEA,KAAK;IAAEoT,IAAI,EAAE1S;EAAU,CAAC;EACrC,MAAMoC,KAAK,GAAG,mCAAmC,CAACuQ,IAAI,CAACrT,KAAK,CAAC;EAC7D,OAAO8C,KAAK,GACN;IAAE9C,KAAK,EAAEhF,UAAU,CAAC8H,KAAK,CAAC,CAAC,CAAC,CAAC;IAAEsQ,IAAI,EAAEtQ,KAAK,CAAC,CAAC,CAAC,IAAI;EAAK,CAAC,GACvD;IAAE9C,KAAK;IAAEoT,IAAI,EAAE1S;EAAU,CAAC;AACpC,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM4S,aAAa,GAAGA,CAACtT,KAAK,EAAEuT,QAAQ,KAAK;EACvC,IAAI,CAACvT,KAAK,EACN,OAAO,CAAC;EACZ,MAAMwT,MAAM,GAAGL,UAAU,CAACnT,KAAK,CAAC;EAChC,MAAMyT,SAAS,GAAG,EAAE;EACpB,MAAMC,QAAQ,GAAI,CAAC,GAAG,IAAI,GAAID,SAAS;EACvC,MAAME,QAAQ,GAAI,CAAC,GAAG,IAAI,GAAIF,SAAS;EACvC,IAAI,OAAOD,MAAM,CAACxT,KAAK,KAAK,QAAQ,EAChC,MAAM,IAAIqM,KAAK,CAAC,sBAAsBrM,KAAK,EAAE,CAAC;EAClD,QAAQwT,MAAM,CAACJ,IAAI;IACf,KAAK,IAAI;MACL,OAAOI,MAAM,CAACxT,KAAK,GAAGyT,SAAS;IACnC,KAAK,IAAI;MACL,OAAOD,MAAM,CAACxT,KAAK,GAAG0T,QAAQ;IAClC,KAAK,IAAI;MACL,OAAOF,MAAM,CAACxT,KAAK,GAAG2T,QAAQ;IAClC,KAAK,IAAI;MACL,OAAO/H,IAAI,CAACgI,KAAK,CAACJ,MAAM,CAACxT,KAAK,IAAIyT,SAAS,GAAGF,QAAQ,CAAC,CAAC;IAC5D;MACI,OAAOC,MAAM,CAACxT,KAAK;EAC3B;AACJ,CAAC;AACD,MAAM6T,cAAc,GAAGA,CAAAC,IAAA,EAAoB/F,GAAG;EAAA,IAAtB;IAAElN,KAAK;IAAEC;EAAO,CAAC,GAAAgT,IAAA;EAAA,OAAW;IAChDjT,KAAK,EAAEyS,aAAa,CAACzS,KAAK,EAAEkN,GAAG,CAAC;IAChCjN,MAAM,EAAEwS,aAAa,CAACxS,MAAM,EAAEiN,GAAG;EACrC,CAAC;AAAA,CAAC;AACF;AACA;AACA;AACA;AACA;AACA;AACA,MAAMgG,YAAY,GAAIC,CAAC,KAAM;EACzBnT,KAAK,EAAEmT,CAAC,CAAC,CAAC,CAAC;EACXlT,MAAM,EAAEkT,CAAC,CAAC,CAAC;AACf,CAAC,CAAC;AACF;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,cAAc,GAAID,CAAC,KAAM;EAC3BnT,KAAK,EAAEmT,CAAC,CAAClT,MAAM;EACfA,MAAM,EAAEkT,CAAC,CAACnT;AACd,CAAC,CAAC;AACF;AACA;AACA;AACA;AACA;AACA;AACA,MAAMqT,aAAa,GAAIF,CAAC,IAAK;EACzB,OAAOD,YAAY,CAAC9D,UAAU,CAAC+D,CAAC,CAAC/W,WAAW,CAAC,CAAC,CAAC,CAAC;AACpD,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,MAAMkX,aAAa,GAAInH,CAAC,IAAK+G,YAAY,CAAC,CAAC/G,CAAC,EAAEA,CAAC,CAAC,CAAC;AACjD;AACA;AACA;AACA;AACA;AACA;AACA,MAAMoH,OAAO,GAAItG,IAAI,IAAK;EACtB,MAAM9N,KAAK,GAAG8N,IAAI,CAACrP,KAAK,EAAE4V,IAAI,IAAI,IAAI;EACtC,MAAMtG,GAAG,GAAGD,IAAI,CAACrP,KAAK,EAAEsP,GAAG,IAAI,EAAE;EACjC,IAAIsG,IAAI;EACR,IAAI,OAAOrU,KAAK,KAAK,QAAQ,EAAE;IAC3BqU,IAAI,GAAGH,aAAa,CAAClU,KAAK,CAAC;EAC/B,CAAC,MACI,IAAI6J,KAAK,CAAC8D,OAAO,CAAC3N,KAAK,CAAC,EAAE;IAC3BqU,IAAI,GAAGR,cAAc,CAACE,YAAY,CAAC/T,KAAK,CAAC,EAAE+N,GAAG,CAAC;EACnD,CAAC,MACI,IAAI,OAAO/N,KAAK,KAAK,QAAQ,EAAE;IAChCqU,IAAI,GAAGR,cAAc,CAACM,aAAa,CAACnU,KAAK,CAAC,EAAE+N,GAAG,CAAC;EACpD,CAAC,MACI;IACDsG,IAAI,GAAGR,cAAc,CAAC7T,KAAK,EAAE+N,GAAG,CAAC;EACrC;EACA,OAAOiC,WAAW,CAAClC,IAAI,CAAC,GAAGmG,cAAc,CAACI,IAAI,CAAC,GAAGA,IAAI;AAC1D,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,eAAe,GAAIxG,IAAI,IAAK;EAC9B,MAAMuG,IAAI,GAAGD,OAAO,CAACtG,IAAI,CAAC;EAC1B,MAAMrH,KAAK,GAAG1K,OAAO,CAAC+R,IAAI,CAACrH,KAAK,IAAI,CAAC,CAAC,CAAC;EACvC,OAAO;IAAE,GAAGqH,IAAI;IAAErH,KAAK,EAAE;MAAE,GAAGA,KAAK;MAAE,GAAG4N;IAAK;EAAE,CAAC;AACpD,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,MAAME,gBAAgB,GAAIpR,IAAI,IAAK;EAC/B,IAAI,CAACA,IAAI,CAACtD,QAAQ,EACd,OAAOsD,IAAI;EACf,MAAMtD,QAAQ,GAAGsD,IAAI,CAACtD,QAAQ,CAACf,GAAG,CAACwV,eAAe,CAAC;EACnD,OAAOlT,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAE8B,IAAI,EAAE;IAAEtD;EAAS,CAAC,CAAC;AAChD,CAAC;AAED,MAAM2U,OAAO,GAAIpX,IAAI,IAAK;EACtB,IAAI,CAACA,IAAI,CAACqB,KAAK,EACX,OAAO,KAAK;EAChB,OAAO,OAAO,IAAIrB,IAAI,CAACqB,KAAK,GAAGrB,IAAI,CAACqB,KAAK,CAACgW,KAAK,KAAK,IAAI,GAAG,KAAK;AACpE,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,iBAAiB,GAAGA,CAACtX,IAAI,EAAE0D,MAAM,KAAK;EACxC,IAAIH,CAAC,GAAG,CAAC;EACT,IAAI,CAACvD,IAAI,CAAC8D,KAAK,EACX,OAAO,CAAC;EACZ,KAAK,IAAItB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGxC,IAAI,CAAC8D,KAAK,CAACpB,MAAM,EAAEF,CAAC,IAAI,CAAC,EAAE;IAC3C,MAAM+U,IAAI,GAAGvX,IAAI,CAAC8D,KAAK,CAACtB,CAAC,CAAC;IAC1B,IAAIe,CAAC,GAAGgU,IAAI,CAAC3G,GAAG,CAAClN,MAAM,GAAGA,MAAM,EAC5B,OAAOlB,CAAC;IACZe,CAAC,IAAIgU,IAAI,CAAC3G,GAAG,CAAClN,MAAM;EACxB;EACA,OAAO1D,IAAI,CAAC8D,KAAK,CAACpB,MAAM;AAC5B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,MAAM8U,iBAAiB,GAAGA,CAACxX,IAAI,EAAEmE,KAAK,KAAK;EACvC,IAAIsT,OAAO,GAAG,CAAC;EACf,IAAI,CAACzX,IAAI,CAAC8D,KAAK,EACX,OAAO2T,OAAO;EAClB,KAAK,IAAIjV,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG2B,KAAK,EAAE3B,CAAC,IAAI,CAAC,EAAE;IAC/B,MAAM+U,IAAI,GAAGvX,IAAI,CAAC8D,KAAK,CAACtB,CAAC,CAAC;IAC1B,IAAI,CAAC+U,IAAI,EACL;IACJE,OAAO,IAAIF,IAAI,CAAC3G,GAAG,CAAClN,MAAM;EAC9B;EACA,OAAO+T,OAAO;AAClB,CAAC;AAED,MAAMC,YAAY,GAAGA,CAAC1X,IAAI,EAAE0D,MAAM,KAAK;EACnC,MAAM0N,GAAG,GAAGpR,IAAI,CAAC4Q,GAAG,EAAEQ,GAAG,IAAI,CAAC;EAC9B,MAAMuG,MAAM,GAAG3X,IAAI,CAACqB,KAAK,CAACsW,MAAM,IAAI,CAAC;EACrC,MAAMC,OAAO,GAAG5X,IAAI,CAACqB,KAAK,CAACuW,OAAO,IAAI,CAAC;EACvC,MAAMC,aAAa,GAAG7X,IAAI,CAAC8D,KAAK,CAACpB,MAAM;EACvC,MAAMoV,UAAU,GAAGR,iBAAiB,CAACtX,IAAI,EAAE0D,MAAM,GAAG0N,GAAG,CAAC;EACxD,IAAI0G,UAAU,KAAK,CAAC,EAAE;IAClB,OAAO,CAAC;EACZ;EACA,IAAID,aAAa,GAAGD,OAAO,EAAE;IACzB,OAAOC,aAAa;EACxB;EACA,IAAIC,UAAU,GAAGF,OAAO,IAAIC,aAAa,GAAGD,OAAO,GAAGD,MAAM,EAAE;IAC1D,OAAO,CAAC;EACZ;EACA,IAAIE,aAAa,KAAKD,OAAO,GAAGD,MAAM,EAAE;IACpC,OAAOC,OAAO;EAClB;EACA,IAAIC,aAAa,GAAGC,UAAU,GAAGH,MAAM,EAAE;IACrC,OAAOE,aAAa,GAAGF,MAAM;EACjC;EACA,OAAOG,UAAU;AACrB,CAAC;AACD;AACA,MAAMC,SAAS,GAAGA,CAAC/X,IAAI,EAAE0D,MAAM,KAAK;EAChC,MAAMsU,eAAe,GAAGN,YAAY,CAAC1X,IAAI,EAAE0D,MAAM,CAAC;EAClD,MAAMuU,aAAa,GAAGT,iBAAiB,CAACxX,IAAI,EAAEgY,eAAe,CAAC;EAC9D,MAAME,UAAU,GAAGlY,IAAI,CAAC4Q,GAAG,CAAClN,MAAM,GAAGuU,aAAa;EAClD,MAAME,OAAO,GAAGnU,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEjE,IAAI,EAAE;IACpC4Q,GAAG,EAAE;MACD,GAAG5Q,IAAI,CAAC4Q,GAAG;MACXlN,MAAM,EAAEuU,aAAa;MACrBG,iBAAiB,EAAE;IACvB,CAAC;IACD/O,KAAK,EAAE;MACH,GAAGrJ,IAAI,CAACqJ,KAAK;MACbgP,YAAY,EAAE,CAAC;MACfC,aAAa,EAAE,CAAC;MAChBF,iBAAiB,EAAE,CAAC;MACpBG,sBAAsB,EAAE,CAAC;MACzBC,uBAAuB,EAAE;IAC7B,CAAC;IACD1U,KAAK,EAAE9D,IAAI,CAAC8D,KAAK,CAACuG,KAAK,CAAC,CAAC,EAAE2N,eAAe;EAC9C,CAAC,CAAC;EACF,MAAMS,IAAI,GAAGzU,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEjE,IAAI,EAAE;IACjC4Q,GAAG,EAAE;MACD,GAAG5Q,IAAI,CAAC4Q,GAAG;MACXQ,GAAG,EAAE,CAAC;MACN1N,MAAM,EAAEwU,UAAU;MAClBQ,cAAc,EAAE;IACpB,CAAC;IACDrP,KAAK,EAAE;MACH,GAAGrJ,IAAI,CAACqJ,KAAK;MACbsP,SAAS,EAAE,CAAC;MACZC,UAAU,EAAE,CAAC;MACbF,cAAc,EAAE,CAAC;MACjBG,mBAAmB,EAAE,CAAC;MACtBC,oBAAoB,EAAE;IAC1B,CAAC;IACDhV,KAAK,EAAE9D,IAAI,CAAC8D,KAAK,CAACuG,KAAK,CAAC2N,eAAe;EAC3C,CAAC,CAAC;EACF,OAAO,CAACG,OAAO,EAAEM,IAAI,CAAC;AAC1B,CAAC;AAED,MAAMM,QAAQ,GAAI/Y,IAAI,IAAKA,IAAI,CAAC4Q,GAAG,EAAEQ,GAAG,IAAI,CAAC;AAC7C,MAAM4H,cAAc,GAAIhZ,IAAI,IAAK,CAAC3B,KAAK,CAAC2B,IAAI,CAACqJ,KAAK,EAAE3F,MAAM,CAAC;AAC3D,MAAMuV,SAAS,GAAGA,CAACjZ,IAAI,EAAE0D,MAAM,KAAK;EAChC,IAAI,CAAC1D,IAAI,EACL,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC;EACvB,MAAMkZ,OAAO,GAAGH,QAAQ,CAAC/Y,IAAI,CAAC;EAC9B,MAAMmY,OAAO,GAAGnU,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEjE,IAAI,EAAE;IACpC4Q,GAAG,EAAE;MACD,GAAG5Q,IAAI,CAAC4Q,GAAG;MACXwH,iBAAiB,EAAE;IACvB,CAAC;IACD/O,KAAK,EAAE;MACH,GAAGrJ,IAAI,CAACqJ,KAAK;MACbgP,YAAY,EAAE,CAAC;MACfC,aAAa,EAAE,CAAC;MAChBF,iBAAiB,EAAE,CAAC;MACpBG,sBAAsB,EAAE,CAAC;MACzBC,uBAAuB,EAAE;IAC7B;EACJ,CAAC,CAAC;EACFL,OAAO,CAAC9O,KAAK,CAAC3F,MAAM,GAAGA,MAAM,GAAGwV,OAAO;EACvC,MAAMhB,UAAU,GAAGc,cAAc,CAAChZ,IAAI,CAAC,GACjCA,IAAI,CAAC4Q,GAAG,CAAClN,MAAM,IAAIA,MAAM,GAAGwV,OAAO,CAAC,GACpC,IAAI;EACV,MAAMT,IAAI,GAAGzU,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEjE,IAAI,EAAE;IACjC4Q,GAAG,EAAE;MACD,GAAG5Q,IAAI,CAAC4Q,GAAG;MACXQ,GAAG,EAAE,CAAC;MACNsH,cAAc,EAAE;IACpB,CAAC;IACDrP,KAAK,EAAE;MACH,GAAGrJ,IAAI,CAACqJ,KAAK;MACbsP,SAAS,EAAE,CAAC;MACZC,UAAU,EAAE,CAAC;MACbF,cAAc,EAAE,CAAC;MACjBG,mBAAmB,EAAE,CAAC;MACtBC,oBAAoB,EAAE;IAC1B;EACJ,CAAC,CAAC;EACF,IAAIZ,UAAU,EAAE;IACZO,IAAI,CAACpP,KAAK,CAAC3F,MAAM,GAAGwU,UAAU;EAClC;EACA,OAAO,CAACC,OAAO,EAAEM,IAAI,CAAC;AAC1B,CAAC;AAED,MAAMU,cAAc,GAAG,CAAC3a,CAAC,CAACmJ,GAAG,EAAEnJ,CAAC,CAAC4a,IAAI,EAAE5a,CAAC,CAACgR,KAAK,EAAEhR,CAAC,CAAC6a,MAAM,CAAC;AACzD,MAAMC,OAAO,GAAItZ,IAAI,IAAK;EACtB,IAAImZ,cAAc,CAACnR,QAAQ,CAAChI,IAAI,CAACC,IAAI,CAAC,EAClC,OAAO,KAAK;EAChB,IAAI,CAACD,IAAI,CAACqB,KAAK,EACX,OAAO,IAAI;EACf,OAAO,MAAM,IAAIrB,IAAI,CAACqB,KAAK,GAAGrB,IAAI,CAACqB,KAAK,CAACkY,IAAI,GAAG,IAAI;AACxD,CAAC;AAED,MAAMC,kBAAkB,GAAGA,CAACxZ,IAAI,EAAEyZ,IAAI,KAAK;EACvC,MAAM;IAAEC;EAAS,CAAC,GAAG1Z,IAAI;EACzB,OAAO0Z,QAAQ,GAAGA,QAAQ,CAACF,kBAAkB,CAACC,IAAI,CAAC,GAAG,IAAI;AAC9D,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,MAAME,UAAU,GAAI3Z,IAAI,IAAK;EACzB,MAAM;IAAEqJ,KAAK;IAAEuH;EAAI,CAAC,GAAG5Q,IAAI;EAC3B,MAAM4Y,UAAU,GAAGY,kBAAkB,CAACxZ,IAAI,EAAEX,IAAI,CAACua,IAAI,CAACC,GAAG,CAAC,IACtDjJ,GAAG,EAAEgI,UAAU,IACfvP,KAAK,EAAEuP,UAAU,IACjB,CAAC;EACL,MAAMkB,YAAY,GAAGN,kBAAkB,CAACxZ,IAAI,EAAEX,IAAI,CAACua,IAAI,CAACG,KAAK,CAAC,IAC1DnJ,GAAG,EAAEkJ,YAAY,IACjBzQ,KAAK,EAAEyQ,YAAY,IACnB,CAAC;EACL,MAAMxB,aAAa,GAAGkB,kBAAkB,CAACxZ,IAAI,EAAEX,IAAI,CAACua,IAAI,CAACI,MAAM,CAAC,IAC5DpJ,GAAG,EAAE0H,aAAa,IAClBjP,KAAK,EAAEiP,aAAa,IACpB,CAAC;EACL,MAAM2B,WAAW,GAAGT,kBAAkB,CAACxZ,IAAI,EAAEX,IAAI,CAACua,IAAI,CAACM,IAAI,CAAC,IACxDtJ,GAAG,EAAEqJ,WAAW,IAChB5Q,KAAK,EAAE4Q,WAAW,IAClB,CAAC;EACL,OAAO;IAAErB,UAAU;IAAEkB,YAAY;IAAExB,aAAa;IAAE2B;EAAY,CAAC;AACnE,CAAC;AAED,MAAME,WAAW,GAAIzJ,IAAI,IAAK;EAC1B,MAAMhN,MAAM,GAAGgN,IAAI,CAACrH,KAAK,EAAE3F,MAAM;EACjC,MAAM;IAAE4U;EAAc,CAAC,GAAGqB,UAAU,CAACjJ,IAAI,CAAC;EAC1C,OAAOhN,MAAM,GAAG4U,aAAa;AACjC,CAAC;AAED,MAAM8B,cAAc,GAAI1J,IAAI,IAAK;EAC7B,MAAMhN,MAAM,GAAGgN,IAAI,CAACrH,KAAK,EAAE3F,MAAM;EACjC,MAAM;IAAEkV,UAAU;IAAEN;EAAc,CAAC,GAAGqB,UAAU,CAACjJ,IAAI,CAAC;EACtD,OAAOhN,MAAM,GAAG4U,aAAa,GAAGM,UAAU;AAC9C,CAAC;AAED,MAAMyB,QAAQ,GAAIzX,KAAK,IAAK,OAAOA,KAAK,KAAK,QAAQ;AACrD,MAAM0X,QAAQ,GAAI1X,KAAK,IAAK,OAAOA,KAAK,KAAK,QAAQ;AACrD,MAAM2X,SAAS,GAAI3X,KAAK,IAAK,OAAOA,KAAK,KAAK,SAAS;AACvD,MAAM4X,UAAU,GAAI5X,KAAK,IAAKA,KAAK,IAAIA,KAAK,CAAC3C,IAAI,KAAKwa,MAAM,CAACC,GAAG,CAAC,gBAAgB,CAAC;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,eAAe,GAAIpI,OAAO,IAAK;EACjC,IAAI,CAACA,OAAO,EACR,OAAO,EAAE;EACb,IAAI9F,KAAK,CAAC8D,OAAO,CAACgC,OAAO,CAAC,EAAE;IACxB,OAAOA,OAAO,CAACtN,MAAM,CAAC,CAACC,GAAG,EAAE0V,EAAE,KAAK1V,GAAG,CAAC2V,MAAM,CAACF,eAAe,CAACC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;EAC3E;EACA,IAAIL,SAAS,CAAChI,OAAO,CAAC,EAAE;IACpB,OAAO,EAAE;EACb;EACA,IAAI8H,QAAQ,CAAC9H,OAAO,CAAC,IAAI+H,QAAQ,CAAC/H,OAAO,CAAC,EAAE;IACxC,OAAO,CAAC;MAAEtS,IAAI,EAAEzB,CAAC,CAAC4B,YAAY;MAAEwC,KAAK,EAAE,GAAG2P,OAAO;IAAG,CAAC,CAAC;EAC1D;EACA,IAAIiI,UAAU,CAACjI,OAAO,CAAC,EAAE;IACrB;IACA,OAAOoI,eAAe,CAACpI,OAAO,CAAClR,KAAK,CAACoB,QAAQ,CAAC;EAClD;EACA,IAAI,CAAC4X,QAAQ,CAAC9H,OAAO,CAACtS,IAAI,CAAC,EAAE;IACzB;IACA,OAAO0a,eAAe,CAACpI,OAAO,CAACtS,IAAI,CAACsS,OAAO,CAAClR,KAAK,CAAC,CAAC;EACvD;EACA,MAAM;IAAEpB,IAAI;IAAEoB,KAAK,EAAE;MAAEgI,KAAK,GAAG,CAAC,CAAC;MAAE5G,QAAQ;MAAE,GAAGpB;IAAM;EAAG,CAAC,GAAGkR,OAAO;EACpE,MAAMuI,YAAY,GAAG1c,SAAS,CAACqE,QAAQ,CAAC,CAACwC,MAAM,CAAC,CAACC,GAAG,EAAEvC,KAAK,KAAKuC,GAAG,CAAC2V,MAAM,CAACF,eAAe,CAAChY,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;EACvG,OAAO,CACH;IACI1C,IAAI;IACJoJ,KAAK;IACLhI,KAAK;IACLoB,QAAQ,EAAEqY;EACd,CAAC,CACJ;AACL,CAAC;AAED,MAAMC,QAAQ,GAAI/a,IAAI,IAAK,OAAO,IAAIA,IAAI,CAACqB,KAAK,GAAGrB,IAAI,CAACqB,KAAK,CAAC2Z,KAAK,GAAG,KAAK;AAC3E,MAAMC,mBAAmB,GAAIjb,IAAI,IAAK,kBAAkB,IAAIA,IAAI,CAACqB,KAAK,GAAGrB,IAAI,CAACqB,KAAK,CAAC6Z,gBAAgB,GAAG,CAAC;AACxG,MAAMC,cAAc,GAAIC,QAAQ,IAAK5M,IAAI,CAAC6M,GAAG,CAAC,GAAGD,QAAQ,CAAC1Z,GAAG,CAAE1B,IAAI,IAAKA,IAAI,CAAC4Q,GAAG,CAACQ,GAAG,GAAGpR,IAAI,CAAC4Q,GAAG,CAAClN,MAAM,CAAC,CAAC;AACxG,MAAM4X,wBAAwB,GAAI3Y,KAAK,IAAK;EACxC,OAAQA,KAAK,CAACiO,GAAG,CAACQ,GAAG,GACjBzO,KAAK,CAACiO,GAAG,CAAClN,MAAM,GAChBf,KAAK,CAACiO,GAAG,CAACyH,YAAY,GACtB4C,mBAAmB,CAACtY,KAAK,CAAC;AAClC,CAAC;AACD,MAAM4Y,gBAAgB,GAAGA,CAAC5Y,KAAK,EAAE6Y,cAAc,KAAK;EAChD,MAAMC,qBAAqB,GAAGH,wBAAwB,CAAC3Y,KAAK,CAAC;EAC7D,MAAM+Y,0BAA0B,GAAGP,cAAc,CAACK,cAAc,CAAClW,MAAM,CAAEtF,IAAI,IAAK,EAAE,OAAO,IAAIA,IAAI,CAACqB,KAAK,CAAC,CAAC,CAAC;EAC5G,OAAOmN,IAAI,CAACmN,GAAG,CAACF,qBAAqB,EAAEC,0BAA0B,CAAC;AACtE,CAAC;AACD,MAAME,WAAW,GAAGA,CAACjZ,KAAK,EAAE6Y,cAAc,EAAE9X,MAAM,KAAK;EACnD,IAAI,OAAO,IAAIf,KAAK,CAACtB,KAAK,EACtB,OAAO,KAAK;EAChB,MAAMwa,WAAW,GAAGnY,MAAM,GAAGf,KAAK,CAACiO,GAAG,CAACQ,GAAG,GAAGzO,KAAK,CAACiO,GAAG,CAAClN,MAAM;EAC7D,MAAMoY,OAAO,GAAGxC,OAAO,CAAC3W,KAAK,CAAC;EAC9B;EACA,MAAMoZ,aAAa,GAAGR,gBAAgB,CAAC5Y,KAAK,EAAE6Y,cAAc,CAAC;EAC7D;EACA;EACA,MAAMQ,wBAAwB,GAAGrZ,KAAK,CAACiO,GAAG,CAACQ,GAAG,GAAGzO,KAAK,CAACiO,GAAG,CAAC+H,SAAS;EACpE,OAAQoC,QAAQ,CAACpY,KAAK,CAAC,IAClBkZ,WAAW,IAAI,CAACC,OAAQ,IACxB,CAACD,WAAW,IAAIE,aAAa,GAAGrY,MAAM,IAAIsY,wBAAyB;AAC5E,CAAC;AAED,MAAMC,oBAAoB,GAAG,CACzB,IAAI;AAAE;AACN,IAAI,CAAE;AAAA,CACT;AACD,MAAMC,kBAAkB,GAAIza,IAAI,IAAKwa,oBAAoB,CAAChX,MAAM,CAAC,CAACC,GAAG,EAAEiX,SAAS,KAAK;EACjF,IAAI1a,IAAI,IACJA,IAAI,CAAC2a,oBAAoB,IACzB3a,IAAI,CAAC2a,oBAAoB,CAACD,SAAS,CAAC,EAAE;IACtC,OAAOjX,GAAG;EACd;EACA,OAAO,CAAC,GAAGA,GAAG,EAAEkJ,MAAM,CAACC,YAAY,CAAC8N,SAAS,CAAC,CAAC;AACnD,CAAC,EAAE,EAAE,CAAC;AACN,MAAME,WAAW,GAAI1b,SAAS,IAAKA,SAAS,CAACe,GAAG,CAAEsM,QAAQ,IAAK;EAC3D,MAAMsO,UAAU,GAAGJ,kBAAkB,CAAClO,QAAQ,CAAChM,UAAU,CAACP,IAAI,CAAC,CAAC,CAAC,CAAC;EAClE,MAAM8a,WAAW,GAAG,IAAIC,MAAM,CAACF,UAAU,CAACxP,IAAI,CAAC,GAAG,CAAC,CAAC;EACpD,OAAO;IACHpM,MAAM,EAAEsN,QAAQ,CAACtN,MAAM,CAAC0G,OAAO,CAACmV,WAAW,EAAE,EAAE,CAAC;IAChDva,UAAU,EAAEgM,QAAQ,CAAChM;EACzB,CAAC;AACL,CAAC,CAAC;AAEF,MAAMya,aAAa,GAAG,CAACJ,WAAW,EAAEvO,WAAW,CAAC;AAChD,MAAM4O,SAAS,GAAI1c,IAAI,IAAKA,IAAI,CAACC,IAAI,KAAKzB,CAAC,CAACgR,KAAK;AACjD,MAAMmN,gBAAgB,GAAI3c,IAAI,IAAKA,IAAI,CAACC,IAAI,KAAKzB,CAAC,CAAC4B,YAAY;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMwc,YAAY,GAAG,SAAAA,CAACpc,SAAS,EAAEC,QAAQ,EAAmC;EAAA,IAAjCoc,UAAU,GAAArQ,SAAA,CAAA9J,MAAA,QAAA8J,SAAA,QAAAlJ,SAAA,GAAAkJ,SAAA,MAAG,IAAI;EAAA,IAAEsQ,KAAK,GAAAtQ,SAAA,CAAA9J,MAAA,QAAA8J,SAAA,QAAAlJ,SAAA,GAAAkJ,SAAA,MAAG,CAAC;EACnE,IAAI,CAAC/L,QAAQ,EACT,OAAO,CAAC;IAAEC,MAAM,EAAE;EAAG,CAAC,CAAC;EAC3B,IAAIC,SAAS,GAAG,EAAE;EAClB,MAAM;IAAEsB,KAAK,GAAG,OAAO;IAAE8a,SAAS,GAAG,KAAK;IAAElc,UAAU,GAAG,WAAW;IAAEC,UAAU;IAAEC,SAAS;IAAEC,QAAQ,GAAG,EAAE;IAAEgc,SAAS;IAAEC,UAAU;IAAEje,cAAc;IAAEiC,mBAAmB;IAAEC,mBAAmB;IAAEC,aAAa;IAAE+b,aAAa;IAAEC,UAAU;IAAE/b,OAAO;IAAEgc;EAAe,CAAC,GAAG3c,QAAQ,CAAC4I,KAAK;EACjR,MAAM9H,YAAY,GAAG,OAAOV,UAAU,KAAK,QAAQ,GAAG,CAACA,UAAU,CAAC,GAAG,CAAC,IAAIA,UAAU,IAAI,EAAE,CAAC,CAAC;EAC5F;EACAU,YAAY,CAACC,IAAI,CAAC,WAAW,CAAC;EAC9B,MAAMC,IAAI,GAAGF,YAAY,CAACG,GAAG,CAAEC,cAAc,IAAK;IAC9C,MAAMC,IAAI,GAAG;MAAEf,UAAU,EAAEc,cAAc;MAAEb,UAAU;MAAEC;IAAU,CAAC;IAClE,MAAMc,GAAG,GAAGrB,SAAS,CAACsB,OAAO,CAACF,IAAI,CAAC;IACnC,OAAOC,GAAG,EAAEE,IAAI;EACpB,CAAC,CAAC;EACF;EACA,MAAMsb,eAAe,GAAGP,KAAK,KAAK,CAAC,GAAG,IAAI,GAAGrc,QAAQ,CAAC4I,KAAK,CAACgU,eAAe;EAC3E,MAAMrb,UAAU,GAAG;IACfP,IAAI;IACJQ,KAAK;IACLb,OAAO;IACPJ,QAAQ;IACRic,UAAU;IACVF,SAAS;IACTK,aAAa;IACbC,eAAe;IACfC,MAAM,EAAEH,UAAU;IAClBI,gBAAgB,EAAEL,aAAa;IAC/B5a,WAAW,EAAEpB,mBAAmB;IAChCgB,cAAc,EAAEhB,mBAAmB;IACnCiB,SAAS,EAAEnD,cAAc,KAAK,WAAW,IACrCA,cAAc,KAAK,wBAAwB,IAC3CA,cAAc,KAAK,wBAAwB;IAC/CqD,MAAM,EAAErD,cAAc,KAAK,cAAc,IACrCA,cAAc,KAAK,wBAAwB,IAC3CA,cAAc,KAAK,wBAAwB;IAC/CuD,WAAW,EAAEtB,mBAAmB,IAAIgB,KAAK;IACzCG,cAAc,EAAEnB,mBAAmB,IAAIgB,KAAK;IAC5C;IACAub,IAAI,EAAEX,UAAU,IAAIpc,QAAQ,CAACY,KAAK,EAAEsN,GAAG,IAAIlO,QAAQ,CAACY,KAAK,EAAEoc,IAAI;IAC/DpW,KAAK,EAAE2V,SAAS,KAAKD,SAAS,KAAK,KAAK,GAAG,OAAO,GAAG,MAAM;EAC/D,CAAC;EACD,KAAK,IAAIva,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG/B,QAAQ,CAACgC,QAAQ,CAACC,MAAM,EAAEF,CAAC,IAAI,CAAC,EAAE;IAClD,MAAMG,KAAK,GAAGlC,QAAQ,CAACgC,QAAQ,CAACD,CAAC,CAAC;IAClC,IAAIka,SAAS,CAAC/Z,KAAK,CAAC,EAAE;MAClBhC,SAAS,CAACa,IAAI,CAAC;QACXd,MAAM,EAAE0N,MAAM,CAACC,YAAY,CAAC,MAAM,CAAC;QACnCrM,UAAU,EAAE;UACR,GAAGA,UAAU;UACbsM,UAAU,EAAE;YACR7K,KAAK,EAAGd,KAAK,CAAC0G,KAAK,CAAC5F,KAAK,IAAIzC,QAAS;YACtC0C,MAAM,EAAGf,KAAK,CAAC0G,KAAK,CAAC3F,MAAM,IAAI1C,QAAS;YACxC6M,KAAK,EAAElL,KAAK,CAACkL,KAAK,CAAC9L;UACvB;QACJ;MACJ,CAAC,CAAC;IACN,CAAC,MACI,IAAI4a,gBAAgB,CAACha,KAAK,CAAC,EAAE;MAC9BhC,SAAS,CAACa,IAAI,CAAC;QACXd,MAAM,EAAEhB,aAAa,CAACiD,KAAK,CAACC,KAAK,EAAEzB,aAAa,CAAC;QACjDa;MACJ,CAAC,CAAC;IACN,CAAC,MACI,IAAIW,KAAK,EAAE;MACZhC,SAAS,CAACa,IAAI,CAAC,GAAGob,YAAY,CAACpc,SAAS,EAAEmC,KAAK,EAAEX,UAAU,CAACwb,IAAI,EAAEV,KAAK,GAAG,CAAC,CAAC,CAAC;IACjF;EACJ;EACA,KAAK,IAAIta,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGia,aAAa,CAAC/Z,MAAM,EAAEF,CAAC,IAAI,CAAC,EAAE;IAC9C,MAAMkb,YAAY,GAAGjB,aAAa,CAACja,CAAC,CAAC;IACrC7B,SAAS,GAAG+c,YAAY,CAAC/c,SAAS,CAAC;EACvC;EACA,OAAOA,SAAS;AACpB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMgd,mBAAmB,GAAGA,CAACnd,SAAS,EAAEC,QAAQ,KAAK;EACjD,MAAME,SAAS,GAAGic,YAAY,CAACpc,SAAS,EAAEC,QAAQ,CAAC;EACnD,OAAOrB,aAAa,CAACuB,SAAS,CAAC;AACnC,CAAC;AAED,MAAMid,OAAO,GAAG;EACZze,IAAI;EACJD,WAAW;EACXD,aAAa;EACbD,cAAc;EACdD,cAAc;EACdD,eAAe;EACfD;AACJ,CAAC;AACD,MAAMgf,MAAM,GAAGjf,YAAY,CAACgf,OAAO,CAAC;AACpC,MAAME,WAAW,GAAI9d,IAAI,IAAKA,IAAI,CAACqJ,KAAK,EAAE0U,QAAQ;AAClD,MAAMC,eAAe,GAAIhe,IAAI,IAAKA,IAAI,CAACqJ,KAAK,EAAE4U,YAAY;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,YAAY,GAAGA,CAACza,KAAK,EAAEC,MAAM,EAAE1D,IAAI,KAAK;EAC1C,MAAM+d,QAAQ,GAAGD,WAAW,CAAC9d,IAAI,CAAC;EAClC,MAAMie,YAAY,GAAGD,eAAe,CAAChe,IAAI,CAAC;EAC1C,OAAO;IACHqD,CAAC,EAAE,CAAC;IACJE,CAAC,EAAE,CAAC;IACJE,KAAK;IACLsa,QAAQ;IACRra,MAAM,EAAEA,MAAM,IAAIya,QAAQ;IAC1BC,YAAY,EAAEH;EAClB,CAAC;AACL,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,MAAMI,gBAAgB,GAAGA,CAAC7d,SAAS,EAAER,IAAI,MAAM;EAC3Cse,kBAAkB,EAAEte,IAAI,CAACqB,KAAK,CAACid,kBAAkB;EACjDvb,sBAAsB,EAAE;IAAEC,MAAM,EAAE,CAAC,GAAG;IAAEC,KAAK,EAAE,CAAC;EAAI,CAAC;EACrDU,mBAAmB,EAAE3D,IAAI,CAACqB,KAAK,CAACsC,mBAAmB,IAC/CnD,SAAS,EAAEoD,sBAAsB,CAAC,CAAC,IACnC;AACR,CAAC,CAAC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM2a,UAAU,GAAGA,CAACve,IAAI,EAAEyD,KAAK,EAAEC,MAAM,EAAElD,SAAS,KAAK;EACnD,MAAM4C,gBAAgB,GAAGua,mBAAmB,CAACnd,SAAS,EAAER,IAAI,CAAC;EAC7D,MAAMwD,SAAS,GAAG0a,YAAY,CAACza,KAAK,EAAEC,MAAM,EAAE1D,IAAI,CAAC;EACnD,MAAMwe,OAAO,GAAGH,gBAAgB,CAAC7d,SAAS,EAAER,IAAI,CAAC;EACjD,MAAM8D,KAAK,GAAG+Z,MAAM,CAACza,gBAAgB,EAAEI,SAAS,EAAEgb,OAAO,CAAC;EAC1D,OAAO1a,KAAK,CAACmB,MAAM,CAAC,CAACC,GAAG,EAAEqS,IAAI,KAAK,CAAC,GAAGrS,GAAG,EAAE,GAAGqS,IAAI,CAAC,EAAE,EAAE,CAAC;AAC7D,CAAC;AAED,MAAMkH,OAAO,GAAIze,IAAI,IAAKA,IAAI,CAACC,IAAI,KAAKzB,CAAC,CAACmJ,GAAG;AAC7C,MAAM+W,QAAQ,GAAI1e,IAAI,IAAKA,IAAI,CAACC,IAAI,KAAKzB,CAAC,CAACqI,IAAI;AAC/C,MAAM8X,aAAa,GAAI3e,IAAI,IAAK,CAACye,OAAO,CAACze,IAAI,CAAC,IAAI,CAAC0e,QAAQ,CAAC1e,IAAI,CAAC;AACjE,MAAM4e,gBAAgB,GAAI5e,IAAI,IAAK0e,QAAQ,CAAC1e,IAAI,CAAC,IAAI,CAACA,IAAI,CAAC8D,KAAK;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM+a,iBAAiB,GAAGA,CAAC7e,IAAI,EAAEQ,SAAS,KAAK;EAC3C,IAAIoe,gBAAgB,CAAC5e,IAAI,CAAC,EAAE;IACxB,MAAMyD,KAAK,GAAGzD,IAAI,CAAC4Q,GAAG,CAACnN,KAAK,IAAIzD,IAAI,CAAC4Q,GAAG,CAACkJ,YAAY,GAAG9Z,IAAI,CAAC4Q,GAAG,CAACqJ,WAAW,CAAC;IAC7E,MAAMvW,MAAM,GAAG1D,IAAI,CAAC4Q,GAAG,CAAClN,MAAM,IAAI1D,IAAI,CAAC4Q,GAAG,CAACgI,UAAU,GAAG5Y,IAAI,CAAC4Q,GAAG,CAAC0H,aAAa,CAAC;IAC/EtY,IAAI,CAAC8D,KAAK,GAAGya,UAAU,CAACve,IAAI,EAAEyD,KAAK,EAAEC,MAAM,EAAElD,SAAS,CAAC;EAC3D;EACA,IAAIme,aAAa,CAAC3e,IAAI,CAAC,EAAE;IACrB,IAAI,CAACA,IAAI,CAACyC,QAAQ,EACd,OAAOzC,IAAI;IACf,MAAM8e,QAAQ,GAAInc,KAAK,IAAKkc,iBAAiB,CAAClc,KAAK,EAAEnC,SAAS,CAAC;IAC/D,MAAMiC,QAAQ,GAAGzC,IAAI,CAACyC,QAAQ,CAACf,GAAG,CAACod,QAAQ,CAAC;IAC5C,OAAO9a,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEjE,IAAI,EAAE;MAAEyC;IAAS,CAAC,CAAC;EAChD;EACA,OAAOzC,IAAI;AACf,CAAC;AAED,MAAM+e,2BAA2B,GAAG,CAChC,OAAO,EACP,YAAY,EACZ,UAAU,EACV,WAAW,EACX,YAAY,EACZ,eAAe,EACf,SAAS,EACT,gBAAgB,EAChB,eAAe,EACf,YAAY,EACZ,WAAW,EACX,YAAY,EACZ,aAAa,CAChB;AACD,MAAMC,2BAA2B,GAAG,CAChC,GAAGD,2BAA2B,EAC9B,iBAAiB,CACpB;AACD,MAAME,QAAQ,GAAIhf,IAAI,IAAMD,IAAI,IAAKA,IAAI,CAACC,IAAI,KAAKA,IAAI;AACvD,MAAMif,OAAO,GAAGD,QAAQ,CAACzgB,CAAC,CAACmJ,GAAG,CAAC;AAC/B,MAAMwX,QAAQ,GAAGF,QAAQ,CAACzgB,CAAC,CAACqI,IAAI,CAAC;AACjC;AACA,MAAMuY,WAAW,GAAGA,CAACC,SAAS,EAAEzc,KAAK,EAAE0c,cAAc,KAAK;EACtD,QAAQD,SAAS;IACb,KAAK,gBAAgB;MAAE;QACnB;QACA,OAAO,CAACC,cAAc,EAAE1c,KAAK,CAAC,CAAC0C,MAAM,CAAEsR,CAAC,IAAKA,CAAC,IAAIA,CAAC,KAAK,MAAM,CAAC,CAAC9J,IAAI,CAAC,GAAG,CAAC;MAC7E;IACA;MACI,OAAOlK,KAAK;EACpB;AACJ,CAAC;AACD;AACA,MAAM2c,KAAK,GAAGA,CAACC,eAAe,EAAEnW,KAAK,KAAK;EACtC,MAAMoW,YAAY,GAAG;IAAE,GAAGD;EAAgB,CAAC;EAC3Cxb,MAAM,CAAC0b,OAAO,CAACrW,KAAK,CAAC,CAACmE,OAAO,CAACmS,KAAA,IAAwB;IAAA,IAAvB,CAACN,SAAS,EAAEzc,KAAK,CAAC,GAAA+c,KAAA;IAC7CF,YAAY,CAACJ,SAAS,CAAC,GAAGD,WAAW,CAACC,SAAS,EAAEzc,KAAK,EAAE4c,eAAe,CAACH,SAAS,CAAC,CAAC;EACvF,CAAC,CAAC;EACF,OAAOI,YAAY;AACvB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,MAAMG,WAAW,GAAIJ,eAAe,IAAMxf,IAAI,IAAK;EAC/C,MAAMqJ,KAAK,GAAGkW,KAAK,CAACC,eAAe,EAAExf,IAAI,CAACqJ,KAAK,IAAI,CAAC,CAAC,CAAC;EACtD,OAAOrF,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEjE,IAAI,EAAE;IAAEqJ;EAAM,CAAC,CAAC;AAC7C,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMwW,kBAAkB,GAAI7f,IAAI,IAAK;EACjC,IAAIkf,OAAO,CAAClf,IAAI,CAAC,EACb,OAAOA,IAAI;EACf,IAAI,EAAE,UAAU,IAAIA,IAAI,CAAC,EACrB,OAAOA,IAAI;EACf,MAAM8f,qBAAqB,GAAGX,QAAQ,CAACnf,IAAI,CAAC,GACtCgf,2BAA2B,GAC3BD,2BAA2B;EACjC,MAAMgB,aAAa,GAAGhiB,IAAI,CAAC+hB,qBAAqB,EAAE9f,IAAI,CAACqJ,KAAK,IAAI,CAAC,CAAC,CAAC;EACnE,MAAMS,YAAY,GAAG9L,OAAO,CAAC6hB,kBAAkB,EAAED,WAAW,CAACG,aAAa,CAAC,CAAC;EAC5E,MAAMtd,QAAQ,GAAGzC,IAAI,CAACyC,QAAQ,CAACf,GAAG,CAACoI,YAAY,CAAC;EAChD,OAAO9F,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEjE,IAAI,EAAE;IAAEyC;EAAS,CAAC,CAAC;AAChD,CAAC;AAED,MAAMud,iBAAiB,GAAGA,CAAChgB,IAAI,EAAEyZ,IAAI,KAAK;EACtC,MAAM;IAAEC;EAAS,CAAC,GAAG1Z,IAAI;EACzB,OAAO0Z,QAAQ,GAAGA,QAAQ,CAACsG,iBAAiB,CAACvG,IAAI,CAAC,GAAG,IAAI;AAC7D,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,MAAMwG,SAAS,GAAIjgB,IAAI,IAAK;EACxB,MAAM;IAAEqJ,KAAK;IAAEuH;EAAI,CAAC,GAAG5Q,IAAI;EAC3B,MAAM2Y,SAAS,GAAGqH,iBAAiB,CAAChgB,IAAI,EAAEX,IAAI,CAACua,IAAI,CAACC,GAAG,CAAC,IACpDjJ,GAAG,EAAE+H,SAAS,IACdtP,KAAK,EAAEsP,SAAS,IAChB,CAAC;EACL,MAAMuH,WAAW,GAAGF,iBAAiB,CAAChgB,IAAI,EAAEX,IAAI,CAACua,IAAI,CAACG,KAAK,CAAC,IACxDnJ,GAAG,EAAEsP,WAAW,IAChB7W,KAAK,EAAE6W,WAAW,IAClB,CAAC;EACL,MAAM7H,YAAY,GAAG2H,iBAAiB,CAAChgB,IAAI,EAAEX,IAAI,CAACua,IAAI,CAACI,MAAM,CAAC,IAC1DpJ,GAAG,EAAEyH,YAAY,IACjBhP,KAAK,EAAEgP,YAAY,IACnB,CAAC;EACL,MAAM8H,UAAU,GAAGH,iBAAiB,CAAChgB,IAAI,EAAEX,IAAI,CAACua,IAAI,CAACM,IAAI,CAAC,IACtDtJ,GAAG,EAAEuP,UAAU,IACf9W,KAAK,EAAE8W,UAAU,IACjB,CAAC;EACL,OAAO;IAAExH,SAAS;IAAEuH,WAAW;IAAE7H,YAAY;IAAE8H;EAAW,CAAC;AAC/D,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,WAAW,GAAIpgB,IAAI,IAAK;EAC1B,MAAM;IAAE0Z;EAAS,CAAC,GAAG1Z,IAAI;EACzB,OAAO;IACHoR,GAAG,EAAEsI,QAAQ,EAAE2G,cAAc,CAAC,CAAC,IAAI,CAAC;IACpCC,KAAK,EAAE5G,QAAQ,EAAE6G,gBAAgB,CAAC,CAAC,IAAI,CAAC;IACxCC,MAAM,EAAE9G,QAAQ,EAAE+G,iBAAiB,CAAC,CAAC,IAAI,CAAC;IAC1CtP,IAAI,EAAEuI,QAAQ,EAAEgH,eAAe,CAAC,CAAC,IAAI;EACzC,CAAC;AACL,CAAC;AAED,MAAMC,iBAAiB,GAAG;EACtBld,KAAK,EAAE,CAAC;EACRC,MAAM,EAAE;AACZ,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,MAAMkd,YAAY,GAAI5gB,IAAI,IAAK;EAC3B,MAAM;IAAE0Z;EAAS,CAAC,GAAG1Z,IAAI;EACzB,IAAI,CAAC0Z,QAAQ,EACT,OAAOiH,iBAAiB;EAC5B,OAAO;IACHld,KAAK,EAAEiW,QAAQ,CAACmH,gBAAgB,CAAC,CAAC;IAClCnd,MAAM,EAAEgW,QAAQ,CAACoH,iBAAiB,CAAC;EACvC,CAAC;AACL,CAAC;AAED,MAAMC,iBAAiB,GAAGA,CAACrH,QAAQ,EAAED,IAAI,KAAMC,QAAQ,GAAGA,QAAQ,CAACqH,iBAAiB,CAACtH,IAAI,CAAC,GAAG,CAAE;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA,MAAMuH,cAAc,GAAIhhB,IAAI,IAAK;EAC7B,MAAM;IAAE0Z;EAAS,CAAC,GAAG1Z,IAAI;EACzB,OAAO;IACH0Y,cAAc,EAAEqI,iBAAiB,CAACrH,QAAQ,EAAEra,IAAI,CAACua,IAAI,CAACC,GAAG,CAAC;IAC1DoH,gBAAgB,EAAEF,iBAAiB,CAACrH,QAAQ,EAAEra,IAAI,CAACua,IAAI,CAACG,KAAK,CAAC;IAC9D3B,iBAAiB,EAAE2I,iBAAiB,CAACrH,QAAQ,EAAEra,IAAI,CAACua,IAAI,CAACI,MAAM,CAAC;IAChEkH,eAAe,EAAEH,iBAAiB,CAACrH,QAAQ,EAAEra,IAAI,CAACua,IAAI,CAACM,IAAI;EAC/D,CAAC;AACL,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,MAAMiH,UAAU,GAAIve,KAAK,IAAM5C,IAAI,IAAK;EACpC,MAAM;IAAE0Z;EAAS,CAAC,GAAG1Z,IAAI;EACzB,IAAI0Z,QAAQ,EAAE;IACVA,QAAQ,CAACyH,UAAU,CAACve,KAAK,KAAK,MAAM,GAAGvD,IAAI,CAAC+hB,OAAO,CAACC,IAAI,GAAGhiB,IAAI,CAAC+hB,OAAO,CAACE,IAAI,CAAC;EACjF;EACA,OAAOthB,IAAI;AACf,CAAC;AAED,MAAMuhB,QAAQ,GAAG;EACbC,MAAM,EAAEniB,IAAI,CAACoiB,QAAQ,CAACC,MAAM;EAC5BC,MAAM,EAAEtiB,IAAI,CAACoiB,QAAQ,CAACG;AAC1B,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,WAAW,GAAIjf,KAAK,IAAM5C,IAAI,IAAK;EACrC,MAAM;IAAE0Z;EAAS,CAAC,GAAG1Z,IAAI;EACzB,IAAI,CAAC3B,KAAK,CAACuE,KAAK,CAAC,IAAI8W,QAAQ,EAAE;IAC3B,MAAMoI,QAAQ,GAAGP,QAAQ,CAAC3e,KAAK,CAAC,IAAIvD,IAAI,CAACoiB,QAAQ,CAACM,OAAO;IACzDrI,QAAQ,CAACmI,WAAW,CAACC,QAAQ,CAAC;EAClC;EACA,OAAO9hB,IAAI;AACf,CAAC;AAED,MAAMgiB,SAAS,GAAG;EACdzI,IAAI,EAAEla,IAAI,CAAC4iB,IAAI,CAACA,IAAI;EACpB,cAAc,EAAE5iB,IAAI,CAAC4iB,IAAI,CAACC;AAC9B,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,WAAW,GAAIvf,KAAK,IAAM5C,IAAI,IAAK;EACrC,MAAM;IAAE0Z;EAAS,CAAC,GAAG1Z,IAAI;EACzB,IAAI0Z,QAAQ,EAAE;IACV,MAAM0I,QAAQ,GAAGJ,SAAS,CAACpf,KAAK,CAAC,IAAIvD,IAAI,CAAC4iB,IAAI,CAACI,MAAM;IACrD3I,QAAQ,CAACyI,WAAW,CAACC,QAAQ,CAAC;EAClC;EACA,OAAOpiB,IAAI;AACf,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMsiB,YAAY,GAAGA,CAACC,IAAI,EAAE9I,IAAI,KAAM7W,KAAK,IAAM5C,IAAI,IAAK;EACtD,MAAM;IAAE0Z;EAAS,CAAC,GAAG1Z,IAAI;EACzB,IAAI,CAAC3B,KAAK,CAACuE,KAAK,CAAC,IAAI8W,QAAQ,EAAE;IAC3B,MAAM8I,OAAO,GAAG,CAACnkB,KAAK,CAACob,IAAI,CAAC;IAC5B,MAAMgJ,WAAW,GAAG,MAAM/kB,UAAU,CAAC6kB,IAAI,CAAC,EAAE;IAC5C,MAAMG,UAAU,GAAG,GAAGD,WAAW,MAAM;IACvC,MAAME,aAAa,GAAG,GAAGF,WAAW,SAAS;IAC7C,MAAMxa,OAAO,GAAG9J,YAAY,CAACyE,KAAK,CAAC;IACnC,IAAIqF,OAAO,IAAI,CAACyR,QAAQ,CAACiJ,aAAa,CAAC,EAAE;MACrC,MAAM,IAAI1T,KAAK,CAAC,uCAAuCsT,IAAI,WAAW,CAAC;IAC3E;IACA,IAAIta,OAAO,EAAE;MACT,IAAIua,OAAO,EAAE;QACT9I,QAAQ,CAACiJ,aAAa,CAAC,GAAGlJ,IAAI,EAAExR,OAAO,CAACrF,KAAK,CAAC;MAClD,CAAC,MACI;QACD8W,QAAQ,CAACiJ,aAAa,CAAC,GAAG1a,OAAO,CAACrF,KAAK,CAAC;MAC5C;IACJ,CAAC,MACI,IAAIA,KAAK,KAAK,MAAM,EAAE;MACvB,IAAI4f,OAAO,EAAE;QACT9I,QAAQ,CAACgJ,UAAU,CAAC,GAAGjJ,IAAI,CAAC;MAChC,CAAC,MACI;QACDC,QAAQ,CAACgJ,UAAU,CAAC,GAAG,CAAC;MAC5B;IACJ,CAAC,MACI,IAAIF,OAAO,EAAE;MACd9I,QAAQ,CAAC+I,WAAW,CAAC,GAAGhJ,IAAI,EAAE7W,KAAK,CAAC;IACxC,CAAC,MACI;MACD8W,QAAQ,CAAC+I,WAAW,CAAC,GAAG7f,KAAK,CAAC;IAClC;EACJ;EACA,OAAO5C,IAAI;AACf,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,MAAM4iB,WAAW,GAAIhgB,KAAK,IAAM5C,IAAI,IAAK;EACrC,OAAOsiB,YAAY,CAAC,UAAU,CAAC,CAAC1f,KAAK,IAAI,CAAC,CAAC,CAAC5C,IAAI,CAAC;AACrD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM6iB,YAAY,GAAGP,YAAY,CAAC,WAAW,CAAC;AAE9C,MAAMQ,KAAK,GAAG;EACV,YAAY,EAAEzjB,IAAI,CAAC0jB,KAAK,CAACC,SAAS;EAClCC,MAAM,EAAE5jB,IAAI,CAAC0jB,KAAK,CAACG,MAAM;EACzB,UAAU,EAAE7jB,IAAI,CAAC0jB,KAAK,CAACI,OAAO;EAC9BC,OAAO,EAAE/jB,IAAI,CAAC0jB,KAAK,CAACM,OAAO;EAC3BC,QAAQ,EAAEjkB,IAAI,CAAC0jB,KAAK,CAACQ,QAAQ;EAC7B,eAAe,EAAElkB,IAAI,CAAC0jB,KAAK,CAACS,YAAY;EACxC,cAAc,EAAEnkB,IAAI,CAAC0jB,KAAK,CAACU,WAAW;EACtC,cAAc,EAAEpkB,IAAI,CAAC0jB,KAAK,CAACW;AAC/B,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,QAAQ,GAAIpB,IAAI,IAAM3f,KAAK,IAAM5C,IAAI,IAAK;EAC5C,MAAM;IAAE0Z;EAAS,CAAC,GAAG1Z,IAAI;EACzB,MAAM4jB,YAAY,GAAGrB,IAAI,KAAK,OAAO,GAAGljB,IAAI,CAAC0jB,KAAK,CAACM,OAAO,GAAGhkB,IAAI,CAAC0jB,KAAK,CAACc,IAAI;EAC5E,IAAInK,QAAQ,EAAE;IACV,MAAMrS,KAAK,GAAGyb,KAAK,CAAClgB,KAAK,CAAC,IAAIghB,YAAY;IAC1ClK,QAAQ,CAAC,WAAWhc,UAAU,CAAC6kB,IAAI,CAAC,EAAE,CAAC,CAAClb,KAAK,CAAC;EAClD;EACA,OAAOrH,IAAI;AACf,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM8jB,YAAY,GAAGH,QAAQ,CAAC,MAAM,CAAC;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMI,aAAa,GAAGJ,QAAQ,CAAC,OAAO,CAAC;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA,MAAMK,aAAa,GAAIphB,KAAK,IAAM5C,IAAI,IAAK;EACvC,OAAOsiB,YAAY,CAAC,YAAY,CAAC,CAAC1f,KAAK,IAAI,CAAC,CAAC,CAAC5C,IAAI,CAAC;AACvD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,MAAMikB,cAAc,GAAIrhB,KAAK,IAAM5C,IAAI,IAAK;EACxC,MAAM;IAAE0Z;EAAS,CAAC,GAAG1Z,IAAI;EACzB,IAAI,CAAC3B,KAAK,CAACuE,KAAK,CAAC,IAAI8W,QAAQ,EAAE;IAC3BA,QAAQ,CAACuK,cAAc,CAACrhB,KAAK,CAAC;EAClC;EACA,OAAO5C,IAAI;AACf,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMkkB,eAAe,GAAGP,QAAQ,CAAC,SAAS,CAAC;AAE3C,MAAMQ,QAAQ,GAAG;EACbC,QAAQ,EAAE/kB,IAAI,CAACglB,YAAY,CAACC,QAAQ;EACpCC,QAAQ,EAAEllB,IAAI,CAACglB,YAAY,CAACG,QAAQ;EACpCC,MAAM,EAAEplB,IAAI,CAACglB,YAAY,CAACK;AAC9B,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,eAAe,GAAI/hB,KAAK,IAAM5C,IAAI,IAAK;EACzC,MAAM;IAAE0Z;EAAS,CAAC,GAAG1Z,IAAI;EACzB,IAAI,CAAC3B,KAAK,CAACuE,KAAK,CAAC,IAAI8W,QAAQ,EAAE;IAC3BA,QAAQ,CAACiL,eAAe,CAACR,QAAQ,CAACvhB,KAAK,CAAC,CAAC;EAC7C;EACA,OAAO5C,IAAI;AACf,CAAC;AAED,MAAM4kB,eAAe,GAAG;EACpBC,GAAG,EAAExlB,IAAI,CAACylB,aAAa,CAACC,GAAG;EAC3B,aAAa,EAAE1lB,IAAI,CAACylB,aAAa,CAACE,UAAU;EAC5C,gBAAgB,EAAE3lB,IAAI,CAACylB,aAAa,CAACG;AACzC,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,gBAAgB,GAAItiB,KAAK,IAAM5C,IAAI,IAAK;EAC1C,MAAM;IAAE0Z;EAAS,CAAC,GAAG1Z,IAAI;EACzB,IAAI0Z,QAAQ,EAAE;IACV,MAAMyL,aAAa,GAAGP,eAAe,CAAChiB,KAAK,CAAC,IAAIvD,IAAI,CAACylB,aAAa,CAACM,MAAM;IACzE1L,QAAQ,CAACwL,gBAAgB,CAACC,aAAa,CAAC;EAC5C;EACA,OAAOnlB,IAAI;AACf,CAAC;AAED,MAAMqlB,eAAe,GAAG;EACpBpC,MAAM,EAAE5jB,IAAI,CAACimB,OAAO,CAACpC,MAAM;EAC3B,UAAU,EAAE7jB,IAAI,CAACimB,OAAO,CAACnC,OAAO;EAChC,eAAe,EAAE9jB,IAAI,CAACimB,OAAO,CAAC9B,YAAY;EAC1C,cAAc,EAAEnkB,IAAI,CAACimB,OAAO,CAAC7B,WAAW;EACxC,cAAc,EAAEpkB,IAAI,CAACimB,OAAO,CAAC5B;AACjC,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,MAAM6B,iBAAiB,GAAI3iB,KAAK,IAAM5C,IAAI,IAAK;EAC3C,MAAM;IAAE0Z;EAAS,CAAC,GAAG1Z,IAAI;EACzB,IAAI,CAAC3B,KAAK,CAACuE,KAAK,CAAC,IAAI8W,QAAQ,EAAE;IAC3B,MAAM8L,cAAc,GAAGH,eAAe,CAACziB,KAAK,CAAC,IAAIvD,IAAI,CAACimB,OAAO,CAACtC,SAAS;IACvEtJ,QAAQ,CAAC6L,iBAAiB,CAACC,cAAc,CAAC;EAC9C;EACA,OAAOxlB,IAAI;AACf,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMylB,YAAY,GAAGnD,YAAY,CAAC,QAAQ,EAAEjjB,IAAI,CAACua,IAAI,CAACC,GAAG,CAAC;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM6L,cAAc,GAAGpD,YAAY,CAAC,QAAQ,EAAEjjB,IAAI,CAACua,IAAI,CAACG,KAAK,CAAC;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM4L,eAAe,GAAGrD,YAAY,CAAC,QAAQ,EAAEjjB,IAAI,CAACua,IAAI,CAACI,MAAM,CAAC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM4L,aAAa,GAAGtD,YAAY,CAAC,QAAQ,EAAEjjB,IAAI,CAACua,IAAI,CAACM,IAAI,CAAC;;AAE5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM2L,aAAa,GAAGvD,YAAY,CAAC,SAAS,EAAEjjB,IAAI,CAACua,IAAI,CAACC,GAAG,CAAC;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMiM,eAAe,GAAGxD,YAAY,CAAC,SAAS,EAAEjjB,IAAI,CAACua,IAAI,CAACG,KAAK,CAAC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMgM,gBAAgB,GAAGzD,YAAY,CAAC,SAAS,EAAEjjB,IAAI,CAACua,IAAI,CAACI,MAAM,CAAC;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMgM,cAAc,GAAG1D,YAAY,CAAC,SAAS,EAAEjjB,IAAI,CAACua,IAAI,CAACM,IAAI,CAAC;;AAE9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM+L,YAAY,GAAG3D,YAAY,CAAC,QAAQ,EAAEjjB,IAAI,CAACua,IAAI,CAACC,GAAG,CAAC;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMqM,cAAc,GAAG5D,YAAY,CAAC,QAAQ,EAAEjjB,IAAI,CAACua,IAAI,CAACG,KAAK,CAAC;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMoM,eAAe,GAAG7D,YAAY,CAAC,QAAQ,EAAEjjB,IAAI,CAACua,IAAI,CAACI,MAAM,CAAC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMoM,aAAa,GAAG9D,YAAY,CAAC,QAAQ,EAAEjjB,IAAI,CAACua,IAAI,CAACM,IAAI,CAAC;;AAE5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMmM,cAAc,GAAG/D,YAAY,CAAC,UAAU,EAAEjjB,IAAI,CAACua,IAAI,CAACC,GAAG,CAAC;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMyM,gBAAgB,GAAGhE,YAAY,CAAC,UAAU,EAAEjjB,IAAI,CAACua,IAAI,CAACG,KAAK,CAAC;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMwM,iBAAiB,GAAGjE,YAAY,CAAC,UAAU,EAAEjjB,IAAI,CAACua,IAAI,CAACI,MAAM,CAAC;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMwM,eAAe,GAAGlE,YAAY,CAAC,UAAU,EAAEjjB,IAAI,CAACua,IAAI,CAACM,IAAI,CAAC;;AAEhE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMuM,QAAQ,GAAGnE,YAAY,CAAC,OAAO,CAAC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMoE,WAAW,GAAGpE,YAAY,CAAC,UAAU,CAAC;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMqE,WAAW,GAAGrE,YAAY,CAAC,UAAU,CAAC;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMsE,SAAS,GAAGtE,YAAY,CAAC,QAAQ,CAAC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMuE,YAAY,GAAGvE,YAAY,CAAC,WAAW,CAAC;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMwE,YAAY,GAAGxE,YAAY,CAAC,WAAW,CAAC;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA,MAAMyE,SAAS,GAAGzE,YAAY,CAAC,KAAK,EAAEjjB,IAAI,CAAC2nB,MAAM,CAACjC,GAAG,CAAC;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,MAAMkC,YAAY,GAAG3E,YAAY,CAAC,KAAK,EAAEjjB,IAAI,CAAC2nB,MAAM,CAAC5B,MAAM,CAAC;AAE5D,MAAM8B,cAAc,GAAI1gB,OAAO,IAAK;EAChC,IAAI,CAACA,OAAO,EACR,OAAO,IAAI;EACf,IAAI,OAAOA,OAAO,KAAK,QAAQ,EAC3B,OAAO,IAAI;EACf,OAAO,CAACA,OAAO,CAACH,IAAI,GAAGG,OAAO,CAACL,IAAI,KAAKK,OAAO,CAACF,IAAI,GAAGE,OAAO,CAACJ,IAAI,CAAC;AACxE,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM+gB,eAAe,GAAGA,CAACzW,IAAI,EAAE1Q,IAAI,KAAK,CAACyD,KAAK,EAAE2jB,SAAS,EAAE1jB,MAAM,EAAE2jB,UAAU,KAAK;EAC9E,MAAMC,WAAW,GAAGJ,cAAc,CAAClnB,IAAI,CAACqB,KAAK,CAACoF,OAAO,CAAC,IAAI,CAAC;EAC3D,IAAI2gB,SAAS,KAAK/nB,IAAI,CAACkoB,WAAW,CAACC,OAAO,IACtCJ,SAAS,KAAK/nB,IAAI,CAACkoB,WAAW,CAACE,MAAM,EAAE;IACvC,OAAO;MAAEhkB,KAAK;MAAEC,MAAM,EAAED,KAAK,GAAG6jB;IAAY,CAAC;EACjD;EACA,IAAID,UAAU,KAAKhoB,IAAI,CAACkoB,WAAW,CAACC,OAAO,EAAE;IACzC,OAAO;MAAE/jB,KAAK,EAAEC,MAAM,GAAG4jB;IAAY,CAAC;EAC1C;EACA,OAAO,CAAC,CAAC;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,MAAMI,UAAU,GAAI1nB,IAAI,IAAK;EACzB,IAAI,CAACA,IAAI,CAAC8D,KAAK,EACX,OAAO,CAAC;EACZ,OAAO0K,IAAI,CAAC6M,GAAG,CAAC,CAAC,EAAE,GAAGrb,IAAI,CAAC8D,KAAK,CAACpC,GAAG,CAAE6V,IAAI,IAAKA,IAAI,CAAC7S,QAAQ,CAAC,CAAC;AAClE,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,MAAMijB,WAAW,GAAI3nB,IAAI,IAAK;EAC1B,IAAI,CAACA,IAAI,CAAC8D,KAAK,EACX,OAAO,CAAC,CAAC;EACb,OAAO9D,IAAI,CAAC8D,KAAK,CAACmB,MAAM,CAAC,CAACC,GAAG,EAAEqS,IAAI,KAAKrS,GAAG,GAAGqS,IAAI,CAAC3G,GAAG,CAAClN,MAAM,EAAE,CAAC,CAAC;AACrE,CAAC;AAED,MAAMkkB,iBAAiB,GAAG;EAAE3E,MAAM,EAAE,GAAG;EAAE3C,KAAK,EAAE;AAAE,CAAC;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMuH,WAAW,GAAGA,CAACnX,IAAI,EAAE1Q,IAAI,EAAEQ,SAAS,KAAK,CAACiD,KAAK,EAAE2jB,SAAS,EAAE1jB,MAAM,KAAK;EACzE,IAAI0jB,SAAS,KAAK/nB,IAAI,CAACkoB,WAAW,CAACC,OAAO,EAAE;IACxC,IAAI,CAACxnB,IAAI,CAAC8D,KAAK,EACX9D,IAAI,CAAC8D,KAAK,GAAGya,UAAU,CAACve,IAAI,EAAEyD,KAAK,EAAEC,MAAM,EAAElD,SAAS,CAAC;IAC3D,OAAO;MAAEkD,MAAM,EAAEikB,WAAW,CAAC3nB,IAAI;IAAE,CAAC;EACxC;EACA,IAAIonB,SAAS,KAAK/nB,IAAI,CAACkoB,WAAW,CAACE,MAAM,EAAE;IACvC,MAAMK,WAAW,GAAGF,iBAAiB,CAAC5nB,IAAI,CAACqJ,KAAK,EAAE2T,SAAS,CAAC,IAAI,CAAC;IACjE,IAAI,CAAChd,IAAI,CAAC8D,KAAK,EAAE;MACb9D,IAAI,CAAC8D,KAAK,GAAGya,UAAU,CAACve,IAAI,EAAEyD,KAAK,EAAEC,MAAM,EAAElD,SAAS,CAAC;MACvDR,IAAI,CAAC+nB,WAAW,GAAG,CAACtkB,KAAK,GAAGikB,UAAU,CAAC1nB,IAAI,CAAC,IAAI8nB,WAAW,CAAC,CAAC;IACjE;IACA,OAAO;MACHpkB,MAAM,EAAEikB,WAAW,CAAC3nB,IAAI,CAAC;MACzByD,KAAK,EAAE+K,IAAI,CAACmN,GAAG,CAAClY,KAAK,EAAEikB,UAAU,CAAC1nB,IAAI,CAAC;IAC3C,CAAC;EACL;EACA,OAAO,CAAC,CAAC;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,MAAMgoB,QAAQ,GAAIhoB,IAAI,IAAK;EACvB,OAAOA,IAAI,CAAC6N,KAAK,EAAE9L,IAAI,GAAG/B,IAAI,CAAC6N,KAAK,CAACpK,KAAK,GAAGzD,IAAI,CAAC6N,KAAK,CAACnK,MAAM,GAAG,CAAC;AACtE,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,MAAMukB,YAAY,GAAIvX,IAAI,IAAKrS,KAAK,CAACqS,IAAI,CAACE,GAAG,EAAElN,MAAM,CAAC;AAEtD,MAAMwkB,eAAe,GAAG,EAAE;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,YAAY,GAAGA,CAACzX,IAAI,EAAE1Q,IAAI,KAAK,CAACyD,KAAK,EAAE2jB,SAAS,EAAE1jB,MAAM,EAAE2jB,UAAU,KAAK;EAC3E,MAAMe,UAAU,GAAGJ,QAAQ,CAAChoB,IAAI,CAAC;EACjC,MAAMqoB,WAAW,GAAGpI,SAAS,CAACjgB,IAAI,CAAC;EACnC,MAAMsoB,WAAW,GAAG3O,UAAU,CAACjJ,IAAI,CAAC;EACpC;EACA,MAAM6X,QAAQ,GAAGN,YAAY,CAACvX,IAAI,CAAC,GAC7ByN,QAAQ,GACR,CAACzN,IAAI,CAACE,GAAG,EAAElN,MAAM,IAAI,CAAC,IACpB4kB,WAAW,CAAC1P,UAAU,GACtB0P,WAAW,CAAChQ,aAAa,GACzB+P,WAAW,CAAC1P,SAAS,GACrB0P,WAAW,CAAChQ,YAAY,GACxB6P,eAAe;EACvB;EACA,IAAI,CAACloB,IAAI,CAAC6N,KAAK,EACX,OAAO;IAAEpK,KAAK,EAAE,CAAC;IAAEC,MAAM,EAAE;EAAE,CAAC;EAClC,IAAI0jB,SAAS,KAAK/nB,IAAI,CAACkoB,WAAW,CAACC,OAAO,IACtCH,UAAU,KAAKhoB,IAAI,CAACkoB,WAAW,CAACiB,SAAS,EAAE;IAC3C,MAAMC,YAAY,GAAGhlB,KAAK,GAAG2kB,UAAU;IACvC,OAAO;MAAE1kB,MAAM,EAAE8K,IAAI,CAACmN,GAAG,CAAC4M,QAAQ,EAAEE,YAAY;IAAE,CAAC;EACvD;EACA,IAAIpB,UAAU,KAAKhoB,IAAI,CAACkoB,WAAW,CAACC,OAAO,KACtCJ,SAAS,KAAK/nB,IAAI,CAACkoB,WAAW,CAACE,MAAM,IAClCL,SAAS,KAAK/nB,IAAI,CAACkoB,WAAW,CAACiB,SAAS,CAAC,EAAE;IAC/C,OAAO;MAAE/kB,KAAK,EAAE+K,IAAI,CAACmN,GAAG,CAACjY,MAAM,GAAG0kB,UAAU,EAAE3kB,KAAK;IAAE,CAAC;EAC1D;EACA,IAAI2jB,SAAS,KAAK/nB,IAAI,CAACkoB,WAAW,CAACC,OAAO,IACtCH,UAAU,KAAKhoB,IAAI,CAACkoB,WAAW,CAACE,MAAM,EAAE;IACxC,MAAMgB,YAAY,GAAGhlB,KAAK,GAAG2kB,UAAU;IACvC,OAAO;MAAE1kB,MAAM,EAAE8K,IAAI,CAACmN,GAAG,CAACjY,MAAM,EAAE6kB,QAAQ,EAAEE,YAAY;IAAE,CAAC;EAC/D;EACA,IAAIrB,SAAS,KAAK/nB,IAAI,CAACkoB,WAAW,CAACE,MAAM,IACrCJ,UAAU,KAAKhoB,IAAI,CAACkoB,WAAW,CAACE,MAAM,EAAE;IACxC,IAAIW,UAAU,GAAG,CAAC,EAAE;MAChB,OAAO;QACH3kB,KAAK;QACLC,MAAM,EAAE8K,IAAI,CAACmN,GAAG,CAAClY,KAAK,GAAG2kB,UAAU,EAAE1kB,MAAM;MAC/C,CAAC;IACL;IACA,OAAO;MACHA,MAAM;MACND,KAAK,EAAE+K,IAAI,CAACmN,GAAG,CAACjY,MAAM,GAAG0kB,UAAU,EAAE3kB,KAAK;IAC9C,CAAC;EACL;EACA,OAAO;IAAEC,MAAM;IAAED;EAAM,CAAC;AAC5B,CAAC;AAED,MAAMilB,aAAa,GAAG,EAAE;AACxB,MAAMC,MAAM,GAAI3jB,MAAM,IAAKwJ,IAAI,CAAC6M,GAAG,CAAC,CAAC8C,QAAQ,EAAE,GAAGnZ,MAAM,CAAC;AACzD;AACA;AACA;AACA;AACA,MAAM4jB,UAAU,GAAGA,CAAA,KAAM;EACrB,MAAMC,GAAG,GAAG,CAAC,CAAC;EACd,MAAMC,MAAM,GAAG,EAAE;EACjB,MAAMC,GAAG,GAAGA,CAAA,KAAMF,GAAG;EACrB,MAAMG,QAAQ,GAAGA,CAAC3lB,CAAC,EAAEE,CAAC,KAAKulB,MAAM,CAACtnB,IAAI,CAAC,CAAC6B,CAAC,EAAEE,CAAC,CAAC,CAAC;EAC9C,MAAM0lB,MAAM,GAAGA,CAAC5lB,CAAC,EAAEE,CAAC,KAAK;IACrBylB,QAAQ,CAAC3lB,CAAC,EAAEE,CAAC,CAAC;IACd,OAAOslB,GAAG;EACd,CAAC;EACD,MAAMK,IAAI,GAAGA,CAAC7lB,CAAC,EAAEE,CAAC,EAAE4lB,CAAC,EAAEC,CAAC,KAAK;IACzBJ,QAAQ,CAAC3lB,CAAC,EAAEE,CAAC,CAAC;IACdylB,QAAQ,CAAC3lB,CAAC,GAAG8lB,CAAC,EAAE5lB,CAAC,CAAC;IAClBylB,QAAQ,CAAC3lB,CAAC,EAAEE,CAAC,GAAG6lB,CAAC,CAAC;IAClBJ,QAAQ,CAAC3lB,CAAC,GAAG8lB,CAAC,EAAE5lB,CAAC,GAAG6lB,CAAC,CAAC;IACtB,OAAOP,GAAG;EACd,CAAC;EACD,MAAMQ,OAAO,GAAGA,CAAChmB,CAAC,EAAEE,CAAC,EAAEoF,EAAE,EAAEC,EAAE,KAAK;IAC9BA,EAAE,GAAGA,EAAE,IAAID,EAAE;IACbqgB,QAAQ,CAAC3lB,CAAC,GAAGsF,EAAE,EAAEpF,CAAC,GAAGqF,EAAE,CAAC;IACxBogB,QAAQ,CAAC3lB,CAAC,GAAGsF,EAAE,EAAEpF,CAAC,GAAGqF,EAAE,CAAC;IACxBogB,QAAQ,CAAC3lB,CAAC,GAAGsF,EAAE,EAAEpF,CAAC,GAAGqF,EAAE,CAAC;IACxBogB,QAAQ,CAAC3lB,CAAC,GAAGsF,EAAE,EAAEpF,CAAC,GAAGqF,EAAE,CAAC;IACxB,OAAOigB,GAAG;EACd,CAAC;EACD,MAAMS,OAAO,GAAG,SAAAA,CAAA,EAAY;IACxBR,MAAM,CAACtnB,IAAI,CAAC,GAAAgL,SAAM,CAAC;IACnB,OAAOqc,GAAG;EACd,CAAC;EACD;EACAA,GAAG,CAACK,IAAI,GAAGA,IAAI;EACfL,GAAG,CAACI,MAAM,GAAGA,MAAM;EACnBJ,GAAG,CAACU,MAAM,GAAGN,MAAM;EACnBJ,GAAG,CAACW,MAAM,GAAGH,OAAO;EACpBR,GAAG,CAACS,OAAO,GAAGA,OAAO;EACrBT,GAAG,CAACQ,OAAO,GAAGA,OAAO;EACrBR,GAAG,CAACY,WAAW,GAAGP,IAAI;EACtB;EACAL,GAAG,CAAClpB,IAAI,GAAGopB,GAAG;EACdF,GAAG,CAACa,IAAI,GAAGX,GAAG;EACdF,GAAG,CAACc,SAAS,GAAGZ,GAAG;EACnBF,GAAG,CAACe,aAAa,GAAGb,GAAG;EACvBF,GAAG,CAACgB,gBAAgB,GAAGd,GAAG;EAC1BF,GAAG,CAACiB,KAAK,GAAGf,GAAG;EACfF,GAAG,CAACkB,MAAM,GAAGhB,GAAG;EAChBF,GAAG,CAACmB,SAAS,GAAGjB,GAAG;EACnB;EACAF,GAAG,CAACoB,IAAI,GAAGlB,GAAG;EACdF,GAAG,CAACqB,IAAI,GAAGnB,GAAG;EACdF,GAAG,CAACsB,IAAI,GAAGpB,GAAG;EACdF,GAAG,CAACjoB,IAAI,GAAGmoB,GAAG;EACdF,GAAG,CAACpnB,IAAI,GAAGsnB,GAAG;EACdF,GAAG,CAAC7f,MAAM,GAAG+f,GAAG;EAChBF,GAAG,CAACuB,OAAO,GAAGrB,GAAG;EACjBF,GAAG,CAACznB,OAAO,GAAG2nB,GAAG;EACjBF,GAAG,CAACwB,OAAO,GAAGtB,GAAG;EACjBF,GAAG,CAACyB,QAAQ,GAAGvB,GAAG;EAClBF,GAAG,CAAC7nB,QAAQ,GAAG+nB,GAAG;EAClBF,GAAG,CAAC0B,SAAS,GAAGxB,GAAG;EACnBF,GAAG,CAAC2B,UAAU,GAAGzB,GAAG;EACpBF,GAAG,CAAC4B,WAAW,GAAG1B,GAAG;EACrBF,GAAG,CAAC6B,WAAW,GAAG3B,GAAG;EACrBF,GAAG,CAAC8B,aAAa,GAAG5B,GAAG;EACvBF,GAAG,CAAC+B,cAAc,GAAG7B,GAAG;EACxBF,GAAG,CAACgC,cAAc,GAAG9B,GAAG;EACxBF,GAAG,CAACiC,QAAQ,GAAG,MAAMnC,MAAM,CAACG,MAAM,CAACpnB,GAAG,CAAEqpB,CAAC,IAAKA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACpDlC,GAAG,CAACmC,SAAS,GAAG,MAAMrC,MAAM,CAACG,MAAM,CAACpnB,GAAG,CAAEqpB,CAAC,IAAKA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACrD,OAAOlC,GAAG;AACd,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMoC,aAAa,GAAGA,CAACva,IAAI,EAAE1Q,IAAI,KAAK,MAAM;EACxC,MAAMqoB,WAAW,GAAGpI,SAAS,CAACjgB,IAAI,CAAC;EACnC,MAAMsoB,WAAW,GAAG3O,UAAU,CAACjJ,IAAI,CAAC;EACpC;EACA,MAAM6X,QAAQ,GAAGN,YAAY,CAACvX,IAAI,CAAC,GAC7ByN,QAAQ,GACR,CAACzN,IAAI,CAACE,GAAG,EAAElN,MAAM,IAAI,CAAC,IACpB4kB,WAAW,CAAC1P,UAAU,GACtB0P,WAAW,CAAChQ,aAAa,GACzB+P,WAAW,CAAC1P,SAAS,GACrB0P,WAAW,CAAChQ,YAAY,GACxBqQ,aAAa;EACrB,MAAMG,GAAG,GAAGD,UAAU,CAAC,CAAC;EACxB5oB,IAAI,CAACqB,KAAK,CAAC6pB,KAAK,CAACrC,GAAG,CAAC;EACrB,MAAMplB,KAAK,GAAGolB,GAAG,CAACiC,QAAQ,CAAC,CAAC;EAC5B,MAAMpnB,MAAM,GAAG8K,IAAI,CAACmN,GAAG,CAAC4M,QAAQ,EAAEM,GAAG,CAACmC,SAAS,CAAC,CAAC,CAAC;EAClD,OAAO;IAAEvnB,KAAK;IAAEC;EAAO,CAAC;AAC5B,CAAC;AAED,MAAMynB,QAAQ,GAAIlrB,IAAI,IAAMD,IAAI,IAAKA,IAAI,CAACC,IAAI,KAAKA,IAAI;AACvD,MAAMmrB,KAAK,GAAGD,QAAQ,CAAC3sB,CAAC,CAACmJ,GAAG,CAAC;AAC7B,MAAM0jB,QAAQ,GAAGF,QAAQ,CAAC3sB,CAAC,CAACqI,IAAI,CAAC;AACjC,MAAMykB,MAAM,GAAGH,QAAQ,CAAC3sB,CAAC,CAAC4a,IAAI,CAAC;AAC/B,MAAMmS,MAAM,GAAGJ,QAAQ,CAAC3sB,CAAC,CAACgtB,IAAI,CAAC;AAC/B,MAAMC,OAAO,GAAGN,QAAQ,CAAC3sB,CAAC,CAACgR,KAAK,CAAC;AACjC,MAAMkc,QAAQ,GAAGP,QAAQ,CAAC3sB,CAAC,CAAC6a,MAAM,CAAC;AACnC,MAAMsS,gBAAgB,GAAGR,QAAQ,CAAC3sB,CAAC,CAAC4B,YAAY,CAAC;AACjD,MAAMwrB,aAAa,GAAI5rB,IAAI,IAAK;EAC5B,MAAM4C,KAAK,GAAG2oB,MAAM,CAACvrB,IAAI,CAAC,GAAGA,IAAI,CAAC4Q,GAAG,EAAElN,MAAM,GAAG1D,IAAI,CAACqJ,KAAK,EAAE3F,MAAM;EAClE,OAAOkjB,SAAS,CAAChkB,KAAK,CAAC;AAC3B,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,MAAMipB,aAAa,GAAI7rB,IAAI,IAAK;EAC5BhC,OAAO,CAAC4tB,aAAa,CAAC5rB,IAAI,CAAC,EAAEymB,QAAQ,CAACzmB,IAAI,CAACqJ,KAAK,CAAC5F,KAAK,CAAC,EAAEijB,WAAW,CAAC1mB,IAAI,CAACqJ,KAAK,CAACyiB,QAAQ,CAAC,EAAEnF,WAAW,CAAC3mB,IAAI,CAACqJ,KAAK,CAAC0iB,QAAQ,CAAC,EAAElF,YAAY,CAAC7mB,IAAI,CAACqJ,KAAK,CAAC2iB,SAAS,CAAC,EAAElF,YAAY,CAAC9mB,IAAI,CAACqJ,KAAK,CAAC4iB,SAAS,CAAC,EAAExG,YAAY,CAACzlB,IAAI,CAACqJ,KAAK,CAACsP,SAAS,CAAC,EAAE+M,cAAc,CAAC1lB,IAAI,CAACqJ,KAAK,CAAC6W,WAAW,CAAC,EAAEyF,eAAe,CAAC3lB,IAAI,CAACqJ,KAAK,CAACgP,YAAY,CAAC,EAAEuN,aAAa,CAAC5lB,IAAI,CAACqJ,KAAK,CAAC8W,UAAU,CAAC,EAAE0F,aAAa,CAAC7lB,IAAI,CAACqJ,KAAK,CAACuP,UAAU,CAAC,EAAEkN,eAAe,CAAC9lB,IAAI,CAACqJ,KAAK,CAACyQ,YAAY,CAAC,EAAEiM,gBAAgB,CAAC/lB,IAAI,CAACqJ,KAAK,CAACiP,aAAa,CAAC,EAAE0N,cAAc,CAAChmB,IAAI,CAACqJ,KAAK,CAAC4Q,WAAW,CAAC,EAAE0K,eAAe,CAAC3kB,IAAI,CAACqJ,KAAK,CAAC6iB,QAAQ,CAAC,EAAE7F,cAAc,CAACrmB,IAAI,CAACqJ,KAAK,CAAC+H,GAAG,CAAC,EAAEkV,gBAAgB,CAACtmB,IAAI,CAACqJ,KAAK,CAACiX,KAAK,CAAC,EAAEiG,iBAAiB,CAACvmB,IAAI,CAACqJ,KAAK,CAACmX,MAAM,CAAC,EAAEgG,eAAe,CAACxmB,IAAI,CAACqJ,KAAK,CAAC8H,IAAI,CAAC,EAAE8U,YAAY,CAACjmB,IAAI,CAACqJ,KAAK,CAACqP,cAAc,CAAC,EAAEwN,cAAc,CAAClmB,IAAI,CAACqJ,KAAK,CAAC4X,gBAAgB,CAAC,EAAEkF,eAAe,CAACnmB,IAAI,CAACqJ,KAAK,CAAC+O,iBAAiB,CAAC,EAAEgO,aAAa,CAACpmB,IAAI,CAACqJ,KAAK,CAAC6X,eAAe,CAAC,EAAEC,UAAU,CAACnhB,IAAI,CAACqJ,KAAK,CAAC8iB,OAAO,CAAC,EAAEjH,gBAAgB,CAACllB,IAAI,CAACqJ,KAAK,CAAC8b,aAAa,CAAC,EAAErB,YAAY,CAAC9jB,IAAI,CAACqJ,KAAK,CAAC+iB,SAAS,CAAC,EAAElI,eAAe,CAAClkB,IAAI,CAACqJ,KAAK,CAACgjB,YAAY,CAAC,EAAEtI,aAAa,CAAC/jB,IAAI,CAACqJ,KAAK,CAACijB,UAAU,CAAC,EAAE/G,iBAAiB,CAACvlB,IAAI,CAACqJ,KAAK,CAACmc,cAAc,CAAC,EAAErD,WAAW,CAACniB,IAAI,CAACqJ,KAAK,CAAC+Y,QAAQ,CAAC,EAAEP,WAAW,CAAC7hB,IAAI,CAACqJ,KAAK,CAACyY,QAAQ,CAAC,EAAEmC,cAAc,CAACjkB,IAAI,CAACqJ,KAAK,CAACie,WAAW,CAAC,EAAEzE,YAAY,CAAC7iB,IAAI,CAACqJ,KAAK,CAACkjB,SAAS,CAAC,EAAE3J,WAAW,CAAC5iB,IAAI,CAACqJ,KAAK,CAACmjB,QAAQ,CAAC,EAAExI,aAAa,CAAChkB,IAAI,CAACqJ,KAAK,CAACojB,UAAU,CAAC,EAAE1F,SAAS,CAAC/mB,IAAI,CAACqJ,KAAK,CAACqjB,MAAM,CAAC,EAAEzF,YAAY,CAACjnB,IAAI,CAACqJ,KAAK,CAACsjB,SAAS,CAAC,CAAC,CAAC3sB,IAAI,CAAC;AACx3C,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,MAAM4sB,eAAe,GAAIta,MAAM,IAAM3P,KAAK,IAAK;EAC3C2P,MAAM,CAACua,WAAW,CAAClqB,KAAK,CAAC+W,QAAQ,EAAEpH,MAAM,CAACwa,aAAa,CAAC,CAAC,CAAC;EAC1D,OAAOnqB,KAAK;AAChB,CAAC;AACD,MAAMoqB,cAAc,GAAGA,CAAC/sB,IAAI,EAAE0Q,IAAI,EAAElQ,SAAS,KAAK;EAC9C,MAAM;IAAEkZ;EAAS,CAAC,GAAG1Z,IAAI;EACzB,IAAIqrB,QAAQ,CAACrrB,IAAI,CAAC,EAAE;IAChB0Z,QAAQ,CAACqT,cAAc,CAAClF,WAAW,CAACnX,IAAI,EAAE1Q,IAAI,EAAEQ,SAAS,CAAC,CAAC;EAC/D;EACA,IAAIirB,OAAO,CAACzrB,IAAI,CAAC,EAAE;IACf0Z,QAAQ,CAACqT,cAAc,CAAC5E,YAAY,CAACzX,IAAI,EAAE1Q,IAAI,CAAC,CAAC;EACrD;EACA,IAAI0rB,QAAQ,CAAC1rB,IAAI,CAAC,EAAE;IAChB0Z,QAAQ,CAACqT,cAAc,CAAC9B,aAAa,CAACva,IAAI,EAAE1Q,IAAI,CAAC,CAAC;EACtD;EACA,IAAIorB,KAAK,CAACprB,IAAI,CAAC,EAAE;IACb0Z,QAAQ,CAACqT,cAAc,CAAC5F,eAAe,CAACzW,IAAI,EAAE1Q,IAAI,CAAC,CAAC;EACxD;EACA,OAAOA,IAAI;AACf,CAAC;AACD,MAAMgtB,eAAe,GAAIhtB,IAAI,IAAK,CAACqrB,QAAQ,CAACrrB,IAAI,CAAC,IAAI,CAACsrB,MAAM,CAACtrB,IAAI,CAAC,IAAI,CAACorB,KAAK,CAACprB,IAAI,CAAC;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMitB,eAAe,GAAGA,CAACvc,IAAI,EAAElQ,SAAS,EAAE6K,IAAI,KAAMrL,IAAI,IAAK;EACzD,MAAM0Z,QAAQ,GAAGrO,IAAI,CAACrL,IAAI,CAACgL,MAAM,CAAC,CAAC;EACnC,MAAM+C,MAAM,GAAG/J,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEjE,IAAI,EAAE;IAAE0Z;EAAS,CAAC,CAAC;EACpDmS,aAAa,CAAC9d,MAAM,CAAC;EACrB,IAAIif,eAAe,CAAChtB,IAAI,CAAC,IAAIA,IAAI,CAACyC,QAAQ,EAAE;IACxC,MAAMqH,YAAY,GAAG9L,OAAO,CAAC4uB,eAAe,CAAClT,QAAQ,CAAC,EAAEuT,eAAe,CAACvc,IAAI,EAAElQ,SAAS,EAAE6K,IAAI,CAAC,CAAC;IAC/F0C,MAAM,CAACtL,QAAQ,GAAGzC,IAAI,CAACyC,QAAQ,CAACf,GAAG,CAACoI,YAAY,CAAC;EACrD;EACAijB,cAAc,CAAChf,MAAM,EAAE2C,IAAI,EAAElQ,SAAS,CAAC;EACvC,OAAOuN,MAAM;AACjB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,MAAMmf,eAAe,GAAIxc,IAAI,IAAK;EAC9BA,IAAI,CAACgJ,QAAQ,CAACwT,eAAe,CAAC,CAAC;EAC/B,OAAOxc,IAAI;AACf,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,MAAMyc,iBAAiB,GAAIntB,IAAI,IAAK;EAChC,IAAI2rB,gBAAgB,CAAC3rB,IAAI,CAAC,EACtB,OAAOA,IAAI;EACf,MAAM4Q,GAAG,GAAG5M,MAAM,CAACC,MAAM,CAAC0V,UAAU,CAAC3Z,IAAI,CAAC,EAAEigB,SAAS,CAACjgB,IAAI,CAAC,EAAEghB,cAAc,CAAChhB,IAAI,CAAC,EAAEogB,WAAW,CAACpgB,IAAI,CAAC,EAAE4gB,YAAY,CAAC5gB,IAAI,CAAC,CAAC;EACzH,MAAM6R,OAAO,GAAG7N,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEjE,IAAI,EAAE;IAAE4Q;EAAI,CAAC,CAAC;EAChD,IAAI,CAAC5Q,IAAI,CAACyC,QAAQ,EACd,OAAOoP,OAAO;EAClB,MAAMpP,QAAQ,GAAGzC,IAAI,CAACyC,QAAQ,CAACf,GAAG,CAACyrB,iBAAiB,CAAC;EACrD,OAAOnpB,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAE4N,OAAO,EAAE;IAAEpP;EAAS,CAAC,CAAC;AACnD,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,MAAM2qB,gBAAgB,GAAIptB,IAAI,IAAK;EAC/B,MAAM6R,OAAO,GAAG7N,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEjE,IAAI,CAAC;EACvC,OAAO6R,OAAO,CAAC6H,QAAQ;EACvB,IAAI,CAAC1Z,IAAI,CAACyC,QAAQ,EACd,OAAOoP,OAAO;EAClB,MAAMpP,QAAQ,GAAGzC,IAAI,CAACyC,QAAQ,CAACf,GAAG,CAAC0rB,gBAAgB,CAAC;EACpD,OAAOppB,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAE4N,OAAO,EAAE;IAAEpP;EAAS,CAAC,CAAC;AACnD,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,MAAM4qB,aAAa,GAAIrtB,IAAI,IAAK;EAC5B,IAAIA,IAAI,CAAC0Z,QAAQ,EACb1Z,IAAI,CAAC0Z,QAAQ,CAAC4T,aAAa,CAAC,CAAC;EACjC,OAAOttB,IAAI;AACf,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMutB,qBAAqB,GAAGA,CAAC7c,IAAI,EAAElQ,SAAS,EAAE6K,IAAI,KAAK;EACrD,IAAIhN,KAAK,CAACqS,IAAI,CAAC,EACX,OAAO,IAAI;EACf,OAAO1S,OAAO,CAACovB,gBAAgB,EAAEC,aAAa,EAAEF,iBAAiB,EAAED,eAAe,EAAED,eAAe,CAACvc,IAAI,EAAElQ,SAAS,EAAE6K,IAAI,CAAC,CAAC,CAACqF,IAAI,CAAC;AACrI,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM8c,iBAAiB,GAAGA,CAACxtB,IAAI,EAAEQ,SAAS,KAAK;EAC3C,IAAI,CAACR,IAAI,CAACyC,QAAQ,EACd,OAAOzC,IAAI;EACf,MAAM8J,YAAY,GAAInH,KAAK,IAAK4qB,qBAAqB,CAAC5qB,KAAK,EAAEnC,SAAS,EAAER,IAAI,CAACqL,IAAI,CAAC;EAClF,MAAM5I,QAAQ,GAAGzC,IAAI,CAACyC,QAAQ,CAACf,GAAG,CAACoI,YAAY,CAAC;EAChD,OAAO9F,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEjE,IAAI,EAAE;IAAEyC;EAAS,CAAC,CAAC;AAChD,CAAC;AAED,MAAMgrB,QAAQ,GAAIztB,IAAI,IAAKA,IAAI,CAACC,IAAI,KAAKzB,CAAC,CAACqI,IAAI;AAC/C;AACA,MAAM6mB,gBAAgB,GAAG,KAAK;AAC9B,MAAMC,cAAc,GAAGA,CAAClrB,QAAQ,EAAEzC,IAAI,KAAKgE,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEjE,IAAI,EAAE;EAAEyC;AAAS,CAAC,CAAC;AAChF,MAAMmrB,MAAM,GAAI5tB,IAAI,IAAKA,IAAI,CAAC4Q,GAAG,EAAEQ,GAAG,IAAI,CAAC;AAC3C,MAAMyc,QAAQ,GAAIC,KAAK,IAAKA,KAAK,CAACC,KAAK,CAAC3W,OAAO,CAAC;AAChD,MAAM4W,SAAS,GAAIhuB,IAAI,IAAKA,IAAI,CAACqB,KAAK,IAAI,QAAQ,IAAIrB,IAAI,CAACqB,KAAK;AAChE,MAAM4sB,YAAY,GAAGjwB,OAAO,CAAC6gB,iBAAiB,EAAE0O,qBAAqB,EAAE1N,kBAAkB,EAAEpP,iBAAiB,CAAC;AAC7G,MAAMyd,oBAAoB,GAAIluB,IAAI,IAAK;EACnC+O,OAAO,CAACC,IAAI,CAAC,gBAAgBhP,IAAI,CAACC,IAAI,sEAAsE,CAAC;AACjH,CAAC;AACD,MAAMkuB,UAAU,GAAGA,CAACzqB,MAAM,EAAE0qB,WAAW,EAAEN,KAAK,KAAK;EAC/C,MAAMO,eAAe,GAAG,EAAE;EAC1B,MAAMvT,YAAY,GAAG,EAAE;EACvB,KAAK,IAAItY,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGsrB,KAAK,CAACprB,MAAM,EAAEF,CAAC,IAAI,CAAC,EAAE;IACtC,MAAMG,KAAK,GAAGmrB,KAAK,CAACtrB,CAAC,CAAC;IACtB,MAAM8rB,WAAW,GAAGR,KAAK,CAACzjB,KAAK,CAAC7H,CAAC,GAAG,CAAC,CAAC;IACtC,MAAM+rB,gBAAgB,GAAGD,WAAW,CAAChpB,MAAM,CAAC8R,OAAO,CAAC;IACpD,MAAM8B,OAAO,GAAG0U,MAAM,CAACjrB,KAAK,CAAC;IAC7B,MAAM6rB,UAAU,GAAG7rB,KAAK,CAACiO,GAAG,CAAClN,MAAM;IACnC,MAAM+qB,SAAS,GAAG/qB,MAAM,IAAIwV,OAAO;IACnC,MAAMwV,aAAa,GAAG9S,WAAW,CAACjZ,KAAK,EAAE2rB,WAAW,EAAE5qB,MAAM,CAAC;IAC7D,MAAMmY,WAAW,GAAGnY,MAAM,GAAGgqB,gBAAgB,GAAGxU,OAAO,GAAGsV,UAAU;IACpE,MAAM1S,OAAO,GAAGxC,OAAO,CAAC3W,KAAK,CAAC;IAC9B,MAAMgsB,cAAc,GAAGH,UAAU,IAAIJ,WAAW;IAChD,IAAIhX,OAAO,CAACzU,KAAK,CAAC,EAAE;MAChBmY,YAAY,CAACtZ,IAAI,CAACmB,KAAK,CAAC;MACxB0rB,eAAe,CAAC7sB,IAAI,CAACmB,KAAK,CAAC;MAC3B;IACJ;IACA,IAAI8rB,SAAS,EAAE;MACX,MAAM7d,GAAG,GAAG5M,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEtB,KAAK,CAACiO,GAAG,EAAE;QAAEQ,GAAG,EAAEzO,KAAK,CAACiO,GAAG,CAACQ,GAAG,GAAG1N;MAAO,CAAC,CAAC;MACzE,MAAM+U,IAAI,GAAGzU,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEtB,KAAK,EAAE;QAAEiO;MAAI,CAAC,CAAC;MAC9CkK,YAAY,CAACtZ,IAAI,CAACiX,IAAI,CAAC;MACvB;IACJ;IACA,IAAI,CAACkW,cAAc,IAAI,CAAC7S,OAAO,EAAE;MAC7BuS,eAAe,CAAC7sB,IAAI,CAACmB,KAAK,CAAC;MAC3BmY,YAAY,CAACtZ,IAAI,CAAC,GAAG8sB,WAAW,CAAC;MACjCJ,oBAAoB,CAACvrB,KAAK,CAAC;MAC3B;IACJ;IACA,IAAI+rB,aAAa,EAAE;MACf,MAAM9d,GAAG,GAAG5M,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEtB,KAAK,CAACiO,GAAG,EAAE;QAAEQ,GAAG,EAAEzO,KAAK,CAACiO,GAAG,CAACQ,GAAG,GAAG1N;MAAO,CAAC,CAAC;MACzE,MAAMrC,KAAK,GAAG2C,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEtB,KAAK,CAACtB,KAAK,EAAE;QACzCkY,IAAI,EAAE,IAAI;QACVyB,KAAK,EAAE;MACX,CAAC,CAAC;MACF,MAAMvC,IAAI,GAAGzU,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEtB,KAAK,EAAE;QAAEiO,GAAG;QAAEvP;MAAM,CAAC,CAAC;MACrDgtB,eAAe,CAAC7sB,IAAI,CAAC,GAAG+sB,gBAAgB,CAAC;MACzCzT,YAAY,CAACtZ,IAAI,CAACiX,IAAI,EAAE,GAAG6V,WAAW,CAAC;MACvC;IACJ;IACA,IAAIzS,WAAW,EAAE;MACb,MAAM,CAAC+S,YAAY,EAAEC,SAAS,CAAC,GAAG3oB,KAAK,CAACvD,KAAK,EAAEe,MAAM,EAAE0qB,WAAW,CAAC;MACnE;MACA,IAAIzrB,KAAK,CAACF,QAAQ,CAACC,MAAM,GAAG,CAAC,IAAIksB,YAAY,CAACnsB,QAAQ,CAACC,MAAM,KAAK,CAAC,EAAE;QACjE;QACA,IAAI2rB,eAAe,CAAC3rB,MAAM,KAAK,CAAC,EAAE;UAC9B2rB,eAAe,CAAC7sB,IAAI,CAACmB,KAAK,EAAE,GAAG4rB,gBAAgB,CAAC;UAChDzT,YAAY,CAACtZ,IAAI,CAAC,GAAG8sB,WAAW,CAAC;QACrC,CAAC,MACI;UACD,MAAM1d,GAAG,GAAG5M,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEtB,KAAK,CAACiO,GAAG,EAAE;YACrCQ,GAAG,EAAEzO,KAAK,CAACiO,GAAG,CAACQ,GAAG,GAAG1N;UACzB,CAAC,CAAC;UACF,MAAM+U,IAAI,GAAGzU,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEtB,KAAK,EAAE;YAAEiO;UAAI,CAAC,CAAC;UAC9Cyd,eAAe,CAAC7sB,IAAI,CAAC,GAAG+sB,gBAAgB,CAAC;UACzCzT,YAAY,CAACtZ,IAAI,CAACiX,IAAI,EAAE,GAAG6V,WAAW,CAAC;QAC3C;QACA;MACJ;MACA,IAAIM,YAAY,EACZP,eAAe,CAAC7sB,IAAI,CAACotB,YAAY,CAAC;MACtC,IAAIC,SAAS,EACT/T,YAAY,CAACtZ,IAAI,CAACqtB,SAAS,CAAC;MAChC;IACJ;IACAR,eAAe,CAAC7sB,IAAI,CAACmB,KAAK,CAAC;EAC/B;EACA,OAAO,CAAC0rB,eAAe,EAAEvT,YAAY,CAAC;AAC1C,CAAC;AACD,MAAMgU,aAAa,GAAGA,CAACprB,MAAM,EAAE0qB,WAAW,EAAEpuB,IAAI,KAAK;EACjD,MAAMyC,QAAQ,GAAGzC,IAAI,CAACyC,QAAQ,IAAI,EAAE;EACpC,MAAMssB,eAAe,GAAGrrB,MAAM,GAAGkqB,MAAM,CAAC5tB,IAAI,CAAC;EAC7C,OAAOmuB,UAAU,CAACY,eAAe,EAAEX,WAAW,EAAE3rB,QAAQ,CAAC;AAC7D,CAAC;AACD,MAAMusB,SAAS,GAAGA,CAAChvB,IAAI,EAAE0D,MAAM,EAAE0qB,WAAW,KAAK;EAC7C,MAAM,CAACa,WAAW,EAAEC,QAAQ,CAAC,GAAGjW,SAAS,CAACjZ,IAAI,EAAE0D,MAAM,CAAC;EACvD,MAAM,CAACyrB,aAAa,EAAErU,YAAY,CAAC,GAAGgU,aAAa,CAACprB,MAAM,EAAE0qB,WAAW,EAAEpuB,IAAI,CAAC;EAC9E,OAAO,CACH2tB,cAAc,CAACwB,aAAa,EAAEF,WAAW,CAAC,EAC1CtB,cAAc,CAAC7S,YAAY,EAAEoU,QAAQ,CAAC,CACzC;AACL,CAAC;AACD,MAAMhpB,KAAK,GAAGA,CAAClG,IAAI,EAAE0D,MAAM,EAAE0qB,WAAW,KAAKX,QAAQ,CAACztB,IAAI,CAAC,GAAG+X,SAAS,CAAC/X,IAAI,EAAE0D,MAAM,CAAC,GAAGsrB,SAAS,CAAChvB,IAAI,EAAE0D,MAAM,EAAE0qB,WAAW,CAAC;AAC5H,MAAMgB,yBAAyB,GAAIpvB,IAAI,IAAK;EACxC,MAAMyC,QAAQ,GAAGzC,IAAI,CAACyC,QAAQ,IAAI,EAAE;EACpC,OAAOurB,SAAS,CAAChuB,IAAI,CAAC,IAAIyC,QAAQ,CAAC4sB,IAAI,CAACD,yBAAyB,CAAC;AACtE,CAAC;AACD,MAAME,mBAAmB,GAAGA,CAACjuB,KAAK,EAAErB,IAAI,KAAK;EACzC,MAAMuvB,aAAa,GAAGvB,SAAS,CAAChuB,IAAI,CAAC;EACrC;EACA,MAAMiK,eAAe,GAAG,SAAAA,CAAA,EAAmB;IAAA,IAAlBxH,QAAQ,GAAA+J,SAAA,CAAA9J,MAAA,QAAA8J,SAAA,QAAAlJ,SAAA,GAAAkJ,SAAA,MAAG,EAAE;IAClC,IAAI+iB,aAAa,EAAE;MACf,MAAMC,GAAG,GAAGxvB,IAAI,CAACqB,KAAK,CAACouB,MAAM,CAACpuB,KAAK,CAAC;MACpC,OAAQsZ,eAAe,CAAC6U,GAAG,CAAC,CACvBlqB,MAAM,CAACoqB,OAAO;MACf;MAAA,CACChuB,GAAG,CAAEkO,CAAC,IAAK0f,mBAAmB,CAACjuB,KAAK,EAAEuO,CAAC,CAAC,CAAC;IAClD;IACA,OAAOnN,QAAQ,CAACf,GAAG,CAAEiuB,CAAC,IAAKL,mBAAmB,CAACjuB,KAAK,EAAEsuB,CAAC,CAAC,CAAC;EAC7D,CAAC;EACD;EACA,MAAMC,WAAW,GAAGL,aAAa,IAAI9B,QAAQ,CAACztB,IAAI,CAAC;EACnD,MAAM4Q,GAAG,GAAGgf,WAAW,GAAG;IAAE,GAAG5vB,IAAI,CAAC4Q,GAAG;IAAElN,MAAM,EAAE;EAAE,CAAC,GAAG1D,IAAI,CAAC4Q,GAAG;EAC/D,MAAMnO,QAAQ,GAAGwH,eAAe,CAACjK,IAAI,CAACyC,QAAQ,CAAC;EAC/C;EACA,MAAMqB,KAAK,GAAGyrB,aAAa,GAAG,IAAI,GAAGvvB,IAAI,CAAC8D,KAAK;EAC/C,OAAOE,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEjE,IAAI,EAAE;IAAE4Q,GAAG;IAAE9M,KAAK;IAAErB;EAAS,CAAC,CAAC;AAC5D,CAAC;AACD,MAAMotB,kBAAkB,GAAGA,CAACxuB,KAAK,EAAEqP,IAAI,EAAElQ,SAAS,EAAE6K,IAAI,KAAK;EACzD,IAAI+jB,yBAAyB,CAAC1e,IAAI,CAAC,EAAE;IACjC,MAAMof,YAAY,GAAGR,mBAAmB,CAACjuB,KAAK,EAAEqP,IAAI,CAAC;IACrD,OAAOud,YAAY,CAAC6B,YAAY,EAAEtvB,SAAS,EAAE6K,IAAI,CAAC;EACtD;EACA,OAAOqF,IAAI;AACf,CAAC;AACD,MAAMqf,SAAS,GAAGA,CAACrf,IAAI,EAAEsf,UAAU,EAAExvB,SAAS,EAAE6K,IAAI,KAAK;EACrD,MAAM4kB,QAAQ,GAAG9V,WAAW,CAACzJ,IAAI,CAAC;EAClC,MAAM0d,WAAW,GAAGhU,cAAc,CAAC1J,IAAI,CAAC;EACxC,MAAMwf,WAAW,GAAGL,kBAAkB,CAAC;IAAEG;EAAW,CAAC,EAAEtf,IAAI,EAAElQ,SAAS,EAAE6K,IAAI,CAAC;EAC7E,MAAM3H,MAAM,GAAGgN,IAAI,CAACrH,KAAK,CAAC3F,MAAM;EAChC,MAAM,CAACyrB,aAAa,EAAEgB,UAAU,CAAC,GAAGhC,UAAU,CAAC8B,QAAQ,EAAE7B,WAAW,EAAE8B,WAAW,CAACztB,QAAQ,CAAC;EAC3F,MAAM2tB,QAAQ,GAAIpwB,IAAI;EACtB;EACAiuB,YAAY,CAACjuB,IAAI,EAAEQ,SAAS,EAAE6K,IAAI,CAAC;EACnC,MAAMglB,UAAU,GAAG;IAAE,GAAG3f,IAAI,CAACE,GAAG;IAAElN;EAAO,CAAC;EAC1C,MAAM4sB,WAAW,GAAGF,QAAQ,CAACpsB,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEyM,IAAI,EAAE;IAAEE,GAAG,EAAEyf,UAAU;IAAE5tB,QAAQ,EAAE0sB;EAAc,CAAC,CAAC,CAAC;EACnG,IAAIgB,UAAU,CAACztB,MAAM,KAAK,CAAC,IAAImrB,QAAQ,CAACsC,UAAU,CAAC,EAC/C,OAAO,CAACG,WAAW,EAAE,IAAI,CAAC;EAC9B,MAAMC,OAAO,GAAGjyB,IAAI,CAAC,QAAQ,EAAEoS,IAAI,CAACE,GAAG,CAAC;EACxC,MAAM4f,SAAS,GAAGlyB,IAAI,CAAC,UAAU,EAAEoS,IAAI,CAACrP,KAAK,CAAC;EAC9C,MAAMovB,QAAQ,GAAGL,QAAQ,CAACpsB,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEyM,IAAI,EAAE;IAC9CrP,KAAK,EAAEmvB,SAAS;IAChB5f,GAAG,EAAE2f,OAAO;IACZ9tB,QAAQ,EAAE0tB;EACd,CAAC,CAAC,CAAC;EACH,OAAO,CAACG,WAAW,EAAEG,QAAQ,CAAC;AAClC,CAAC;AACD,MAAMC,kBAAkB,GAAGA,CAAClwB,SAAS,EAAE6K,IAAI,EAAEqF,IAAI,EAAEsf,UAAU,EAAEW,KAAK,KAAK;EACrE,MAAMC,UAAU,GAAGD,KAAK,CAACjuB,MAAM;EAC/B,MAAMrB,KAAK,GAAG;IACVuvB,UAAU;IACVZ,UAAU,EAAEA,UAAU,GAAG,CAAC;IAC1Ba,aAAa,EAAEngB,IAAI,CAACmgB,aAAa,GAAG,CAAC;IACrCC,iBAAiB,EAAEpgB,IAAI,CAACogB;EAC5B,CAAC;EACD,OAAOjB,kBAAkB,CAACxuB,KAAK,EAAEqP,IAAI,EAAElQ,SAAS,EAAE6K,IAAI,CAAC;AAC3D,CAAC;AACD,MAAM0lB,gBAAgB,GAAIC,QAAQ,IAAK;EACnC,OAAOA,QAAQ,CAACtvB,GAAG,CAAC,CAACgP,IAAI,EAAElO,CAAC,MAAM;IAC9B,GAAGkO,IAAI;IACPmgB,aAAa,EAAEruB,CAAC;IAChBsuB,iBAAiB,EAAEE,QAAQ,CAACtuB;EAChC,CAAC,CAAC,CAAC;AACP,CAAC;AACD,MAAMuuB,iBAAiB,GAAIvgB,IAAI,IAAK;EAChC,OAAOpS,IAAI,CAAC,CAAC,eAAe,EAAE,mBAAmB,CAAC,EAAEoS,IAAI,CAAC;AAC7D,CAAC;AACD,MAAMwgB,QAAQ,GAAGA,CAACxgB,IAAI,EAAEsf,UAAU,EAAExvB,SAAS,EAAE6K,IAAI,KAAK;EACpD,IAAI,CAACqF,IAAI,EACL,OAAO,EAAE;EACb,IAAIA,IAAI,CAACrP,KAAK,EAAEkY,IAAI,KAAK,KAAK,EAC1B,OAAO,CAAC7I,IAAI,CAAC;EACjB,IAAIygB,YAAY,GAAGpB,SAAS,CAACrf,IAAI,EAAEsf,UAAU,EAAExvB,SAAS,EAAE6K,IAAI,CAAC;EAC/D,MAAMslB,KAAK,GAAG,CAACQ,YAAY,CAAC,CAAC,CAAC,CAAC;EAC/B,IAAIV,QAAQ,GAAGU,YAAY,CAAC,CAAC,CAAC;EAC9B,OAAOV,QAAQ,KAAK,IAAI,EAAE;IACtBU,YAAY,GAAGpB,SAAS,CAACU,QAAQ,EAAET,UAAU,GAAGW,KAAK,CAACjuB,MAAM,EAAElC,SAAS,EAAE6K,IAAI,CAAC;IAC9EslB,KAAK,CAACnvB,IAAI,CAAC2vB,YAAY,CAAC,CAAC,CAAC,CAAC;IAC3BV,QAAQ,GAAGU,YAAY,CAAC,CAAC,CAAC;EAC9B;EACA,OAAOR,KAAK;AAChB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMS,iBAAiB,GAAGA,CAACrrB,IAAI,EAAEvF,SAAS,KAAK;EAC3C,IAAImwB,KAAK,GAAG,EAAE;EACd,IAAIX,UAAU,GAAG,CAAC;EAClB,KAAK,IAAIxtB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGuD,IAAI,CAACtD,QAAQ,CAACC,MAAM,EAAEF,CAAC,IAAI,CAAC,EAAE;IAC9C,MAAMkO,IAAI,GAAG3K,IAAI,CAACtD,QAAQ,CAACD,CAAC,CAAC;IAC7B,IAAIwuB,QAAQ,GAAGE,QAAQ,CAACxgB,IAAI,EAAEsf,UAAU,EAAExvB,SAAS,EAAEuF,IAAI,CAACsF,IAAI,CAAC;IAC/D2lB,QAAQ,GAAGD,gBAAgB,CAACC,QAAQ,CAAC;IACrChB,UAAU,IAAIgB,QAAQ,CAACtuB,MAAM;IAC7BiuB,KAAK,GAAGA,KAAK,CAAC9V,MAAM,CAACmW,QAAQ,CAAC;EAClC;EACAL,KAAK,GAAGA,KAAK,CAACjvB,GAAG,CAAC;IAAA,SAAA2vB,IAAA,GAAA7kB,SAAA,CAAA9J,MAAA,EAAI4uB,IAAI,OAAA7kB,KAAA,CAAA4kB,IAAA,GAAAE,IAAA,MAAAA,IAAA,GAAAF,IAAA,EAAAE,IAAA;MAAJD,IAAI,CAAAC,IAAA,IAAA/kB,SAAA,CAAA+kB,IAAA;IAAA;IAAA,OAAKN,iBAAiB,CAACP,kBAAkB,CAAClwB,SAAS,EAAEuF,IAAI,CAACsF,IAAI,EAAE,GAAGimB,IAAI,CAAC,CAAC;EAAA,EAAC;EACpG,OAAO3D,cAAc,CAACgD,KAAK,EAAE5qB,IAAI,CAAC;AACtC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,MAAMyrB,4BAA4B,GAAIhuB,SAAS,IAAMZ,KAAK,IAAK;EAC3D,MAAM8C,KAAK,GAAGvH,YAAY,CAACyE,KAAK,CAAC;EACjC,MAAMa,KAAK,GAAGD,SAAS,CAACC,KAAK;EAC7B,OAAOiC,KAAK,GAAGA,KAAK,CAACuC,OAAO,GAAGxE,KAAK,GAAGb,KAAK;AAChD,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,MAAM6uB,0BAA0B,GAAIjuB,SAAS,IAAMZ,KAAK,IAAK;EACzD,MAAM8C,KAAK,GAAGvH,YAAY,CAACyE,KAAK,CAAC;EACjC,MAAMc,MAAM,GAAGF,SAAS,CAACE,MAAM;EAC/B,OAAOgC,KAAK,GAAGA,KAAK,CAACuC,OAAO,GAAGvE,MAAM,GAAGd,KAAK;AACjD,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,MAAM8uB,mBAAmB,GAAIhhB,IAAI,IAAK;EAClC,MAAMlN,SAAS,GAAGkN,IAAI,CAACrH,KAAK;EAC5B,MAAMA,KAAK,GAAGpL,MAAM,CAAC;IACjB2a,UAAU,EAAE6Y,0BAA0B,CAACjuB,SAAS,CAAC;IACjDyW,WAAW,EAAEuX,4BAA4B,CAAChuB,SAAS,CAAC;IACpDsW,YAAY,EAAE0X,4BAA4B,CAAChuB,SAAS,CAAC;IACrD8U,aAAa,EAAEmZ,0BAA0B,CAACjuB,SAAS;EACvD,CAAC,EAAEkN,IAAI,CAACrH,KAAK,CAAC;EACd,OAAOrF,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEyM,IAAI,EAAE;IAAErH;EAAM,CAAC,CAAC;AAC7C,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMsoB,oBAAoB,GAAI5rB,IAAI,IAAK;EACnC,IAAI,CAACA,IAAI,CAACtD,QAAQ,EACd,OAAOsD,IAAI;EACf,MAAMtD,QAAQ,GAAGsD,IAAI,CAACtD,QAAQ,CAACf,GAAG,CAACgwB,mBAAmB,CAAC;EACvD,OAAO1tB,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAE8B,IAAI,EAAE;IAAEtD;EAAS,CAAC,CAAC;AAChD,CAAC;AAED,MAAMmvB,aAAa,GAAIhhB,GAAG,IAAMhO,KAAK,IAAK;EACtC,IAAI,CAACA,KAAK,EACN,OAAOU,SAAS;EACpB,MAAMoC,KAAK,GAAGvH,YAAY,CAACyE,KAAK,CAAC;EACjC,OAAO8C,KAAK,GAAGA,KAAK,CAACuC,OAAO,GAAGuG,IAAI,CAACmN,GAAG,CAAC/K,GAAG,CAACnN,KAAK,EAAEmN,GAAG,CAAClN,MAAM,CAAC,GAAGd,KAAK;AAC1E,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,MAAMivB,oBAAoB,GAAI7xB,IAAI,IAAK;EACnC,MAAMqJ,KAAK,GAAGpL,MAAM,CAAC;IACjB4a,mBAAmB,EAAE+Y,aAAa,CAAC5xB,IAAI,CAAC4Q,GAAG,CAAC;IAC5CkI,oBAAoB,EAAE8Y,aAAa,CAAC5xB,IAAI,CAAC4Q,GAAG,CAAC;IAC7C4H,uBAAuB,EAAEoZ,aAAa,CAAC5xB,IAAI,CAAC4Q,GAAG,CAAC;IAChD2H,sBAAsB,EAAEqZ,aAAa,CAAC5xB,IAAI,CAAC4Q,GAAG;EAClD,CAAC,EAAE5Q,IAAI,CAACqJ,KAAK,IAAI,CAAC,CAAC,CAAC;EACpB,MAAMwI,OAAO,GAAG7N,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEjE,IAAI,EAAE;IAAEqJ;EAAM,CAAC,CAAC;EAClD,IAAI,CAACrJ,IAAI,CAACyC,QAAQ,EACd,OAAOoP,OAAO;EAClB,MAAMpP,QAAQ,GAAGzC,IAAI,CAACyC,QAAQ,CAACf,GAAG,CAACmwB,oBAAoB,CAAC;EACxD,OAAO7tB,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAE4N,OAAO,EAAE;IAAEpP;EAAS,CAAC,CAAC;AACnD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,MAAMqvB,eAAe,GAAGA,CAACvJ,QAAQ,EAAE7kB,MAAM,KAAK;EAC1C,MAAMgC,KAAK,GAAGvH,YAAY,CAACuF,MAAM,CAAC;EAClC,OAAOgC,KAAK,GAAGA,KAAK,CAACuC,OAAO,GAAGsgB,QAAQ,GAAG7kB,MAAM;AACpD,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,MAAMquB,WAAW,GAAIrhB,IAAI,IAAK;EAC1B,MAAMshB,UAAU,GAAGthB,IAAI,CAACrH,KAAK,CAAC3F,MAAM;EACpC,MAAMuuB,cAAc,GAAIvhB,IAAI,CAACrH,KAAK,EAAEuP,UAAU,IAAI,CAAE;EACpD,MAAMsZ,iBAAiB,GAAIxhB,IAAI,CAACrH,KAAK,EAAEiP,aAAa,IAAI,CAAE;EAC1D,OAAO0Z,UAAU,GAAGC,cAAc,GAAGC,iBAAiB;AAC1D,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,wBAAwB,GAAGA,CAACzhB,IAAI,EAAE1Q,IAAI,KAAK;EAC7C,IAAI3B,KAAK,CAACqS,IAAI,CAACrH,KAAK,EAAE3F,MAAM,CAAC,EACzB,OAAO1D,IAAI;EACf,IAAI3B,KAAK,CAAC2B,IAAI,CAACqJ,KAAK,EAAE3F,MAAM,CAAC,EACzB,OAAO1D,IAAI;EACf,MAAMuoB,QAAQ,GAAGwJ,WAAW,CAACrhB,IAAI,CAAC;EAClC,MAAMhN,MAAM,GAAGouB,eAAe,CAACvJ,QAAQ,EAAEvoB,IAAI,CAACqJ,KAAK,CAAC3F,MAAM,CAAC;EAC3D,MAAM2F,KAAK,GAAGrF,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEjE,IAAI,CAACqJ,KAAK,EAAE;IAAE3F;EAAO,CAAC,CAAC;EACvD,OAAOM,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEjE,IAAI,EAAE;IAAEqJ;EAAM,CAAC,CAAC;AAC7C,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,MAAM+oB,wBAAwB,GAAI1hB,IAAI,IAAK;EACvC,IAAI,CAACA,IAAI,CAACjO,QAAQ,EACd,OAAOiO,IAAI;EACf,MAAM5G,YAAY,GAAInH,KAAK,IAAKwvB,wBAAwB,CAACzhB,IAAI,EAAE/N,KAAK,CAAC;EACrE,MAAMF,QAAQ,GAAGiO,IAAI,CAACjO,QAAQ,CAACf,GAAG,CAACoI,YAAY,CAAC;EAChD,OAAO9F,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEyM,IAAI,EAAE;IAAEjO;EAAS,CAAC,CAAC;AAChD,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM4vB,oBAAoB,GAAItsB,IAAI,IAAK;EACnC,IAAI,CAACA,IAAI,CAACtD,QAAQ,EACd,OAAOsD,IAAI;EACf,MAAMtD,QAAQ,GAAGsD,IAAI,CAACtD,QAAQ,CAACf,GAAG,CAAC0wB,wBAAwB,CAAC;EAC5D,OAAOpuB,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAE8B,IAAI,EAAE;IAAEtD;EAAS,CAAC,CAAC;AAChD,CAAC;AAED,MAAM6vB,MAAM,GAAIryB,IAAI,IAAMD,IAAI,IAAKA,IAAI,CAACC,IAAI,KAAKA,IAAI;AACrD,MAAMsyB,MAAM,GAAGD,MAAM,CAAC9zB,CAAC,CAAC2R,IAAI,CAAC;AAC7B,MAAMqiB,MAAM,GAAGF,MAAM,CAAC9zB,CAAC,CAACqI,IAAI,CAAC;AAC7B,MAAM4rB,cAAc,GAAGH,MAAM,CAAC9zB,CAAC,CAAC4B,YAAY,CAAC;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,MAAMsyB,aAAa,GAAI1yB,IAAI,IAAK,QAAQ,IAAIA,IAAI,CAACqB,KAAK;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,MAAMsxB,UAAU,GAAI3yB,IAAI,IAAKwyB,MAAM,CAACxyB,IAAI,CAAC,IAAIyyB,cAAc,CAACzyB,IAAI,CAAC;AACjE;AACA;AACA;AACA;AACA;AACA;AACA,MAAM4yB,UAAU,GAAI5yB,IAAI,IAAK;EACzB,MAAMyC,QAAQ,GAAGzC,IAAI,CAACyC,QAAQ,IAAI,EAAE;EACpC;EACA,IAAIA,QAAQ,CAACsrB,KAAK,CAAC0E,cAAc,CAAC,EAC9B,OAAO,IAAI;EACf;EACA,IAAIhwB,QAAQ,CAACsrB,KAAK,CAACyE,MAAM,CAAC,EACtB,OAAO,KAAK;EAChB,OAAO/vB,QAAQ,CAACsrB,KAAK,CAAC4E,UAAU,CAAC;AACrC,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,MAAME,QAAQ,GAAI7yB,IAAI,IAAK;EACvB,MAAM8yB,WAAW,GAAG;IAChB7yB,IAAI,EAAEzB,CAAC,CAACqI,IAAI;IACZxF,KAAK,EAAE,CAAC,CAAC;IACTgI,KAAK,EAAE,CAAC,CAAC;IACTuH,GAAG,EAAE,CAAC,CAAC;IACPnO,QAAQ,EAAEzC,IAAI,CAACyC;EACnB,CAAC;EACD,OAAOuB,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEjE,IAAI,EAAE;IAAEyC,QAAQ,EAAE,CAACqwB,WAAW;EAAE,CAAC,CAAC;AAC/D,CAAC;AACD,MAAMC,aAAa,GAAI/yB,IAAI,IAAK;EAC5B,IAAI,CAACuyB,MAAM,CAACvyB,IAAI,CAAC,EACb,OAAOA,IAAI;EACf;EACA;EACA,IAAI0yB,aAAa,CAAC1yB,IAAI,CAAC,EACnB,OAAOgE,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEjE,IAAI,EAAE;IAAEC,IAAI,EAAEzB,CAAC,CAACqI;EAAK,CAAC,CAAC;EACpD;EACA;EACA,IAAI+rB,UAAU,CAAC5yB,IAAI,CAAC,EAChB,OAAO6yB,QAAQ,CAAC7yB,IAAI,CAAC;EACzB,OAAOA,IAAI;AACf,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,MAAMgzB,uBAAuB,GAAIhzB,IAAI,IAAK;EACtC,IAAI,CAACA,IAAI,CAACyC,QAAQ,EACd,OAAOzC,IAAI;EACf,MAAM8J,YAAY,GAAG9L,OAAO,CAAC+0B,aAAa,EAAEC,uBAAuB,CAAC;EACpE,MAAMvwB,QAAQ,GAAGzC,IAAI,CAACyC,QAAQ,CAACf,GAAG,CAACoI,YAAY,CAAC;EAChD,OAAO9F,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEjE,IAAI,EAAE;IAAEyC;EAAS,CAAC,CAAC;AAChD,CAAC;AAED,MAAMwwB,MAAM,GAAG10B,YAAY,CAAC2N,aAAa,EAAE4F,aAAa,EAAE/B,aAAa,EAAEqhB,iBAAiB,EAAEvS,iBAAiB,EAAEgT,oBAAoB,EAAErE,iBAAiB,EAAE5iB,UAAU,EAAEmF,aAAa,EAAE8P,kBAAkB,EAAEwS,oBAAoB,EAAEV,oBAAoB,EAAE5gB,aAAa,EAAEiiB,uBAAuB,EAAE5gB,gBAAgB,EAAE+E,gBAAgB,EAAE/L,WAAW,CAAC;AAE3U,SAAS6nB,MAAM,IAAIC,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}